#BeginSection(header)
	/* 
	DESSBAS - model for VSTENO (Grundschrift Stolze-Schrey, Deutsch)
    	(c) 2018-2109  Marcel Maci
	
	This program is free software: you can redistribute it and/or modify
    	it under the terms of the GNU General Public License as published by
    	the Free Software Foundation, either version 3 of the License, or
    	(at your option) any later version.

    	This program is distributed in the hope that it will be useful,
    	but WITHOUT ANY WARRANTY; without even the implied warranty of
    	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    	GNU General Public License for more details.

    	You should have received a copy of the GNU General Public License
    	along with this program.  If not, see <https://www.gnu.org/licenses/>.
	*/
	/* this file was originately generated as export from old parser, then later completed with manual additions to form DESSBAS (DD=Deutsch SS=Stolze-Schrey BAS=Grundschrift) */
	//
	// Die Grundschrift Stolze-Schrey soll nun nach folgenden Prinzipien neu designt werden:
	// 
	// Zeichen:
	// Prinzipiell sollen schönere Zeichen gestaltet werden. Dies wird erreicht durch:
	// - bessere Platzierung der Zeichenknoten (Verwendung von VPAINT wo möglich, der Rest wird nach wie vor handeditiert)
	// - Korrektur der Spannungen (geradere Modellierung von Zeichen-Rücken, schönere Anfangs- und Endbögen)
	// - bessere Zeichenabstände in Engschreibung: Zeichen werden neu als "Rohzeichen" modelliert, d.h. nur mit width (offset 0) ohne additional width before/after (offsets 4 + 5).
	//   Die Regeln werden um einen "spacer" ergänzt, der individuelle Abstände zwischen den Zeichen einfügt.
	//
	// Technisch sollen folgende Prinzipien eingehalten werden:
	// - es soll nur die SE1 rev0 genutzt werden (also keine parallelen Rotationsachsen und keine proportionalen/orthogonalen Punkte), dies um sicherzustellen, dass die Definitionen 100% mit der
	//   SE1 kompatibel sind)
	// - die Zeichen werden für eine Neigung von 60 Grad optimiert (dies damit die Knoten trotz horizontaler Schiebung möglichst optimal platziert werden)
	//
	// Wenn nötig (d.h. wenn damit keine schönen Zeichen generiert werden können) soll auf spezielle Funktionen der SE1, die darauf ausgerichtet waren, den Editionsaufwand und die Datenmengen 
	// zu reduzieren, verzichtet werden:
	// - auf late entry und early exit knots wird verzichtet => stattdessen wird für jede Variante ein eigenes Zeichen definiert
	// - auf token combiner und shifter wird verzichtet => stattdessen wird für jede Variante ein eigenes Zeichen definiert
	// - eventuell sollen die Zeichen auch um neue Knoten erweitert werden, um eine feinere Ausgestaltung zu erreichen (z.B. bei der Schattierung), allerdings soll dies vorsichtig gehandhabt
	//   werden, da es allenfalls Sinn macht, Optimierung der Schattierung später automatisch vorzunehmen (ähnlich wie bei der geplanten SE2)
	//
	// Regeln:
	// - es soll konsequent darauf geachtet werden, mit der STD-Form einen Kompatibilitätspunkt im Parsprozess zu generieren
	// - da mehr Zeichen definiert werden, soll konsequent darauf geachtet werden, dass die Bezeichnungen der Tokens einer einheitlichen Schreibweise folgen (diese soll im Font und innerhalb
	//   der Regeln verwendet werden)
	// - Reste aus dem alten "Trickster" sollen entfernt werden
	// - generelles Ausmisten und Ausräumen der Regeln
	/  - es wird ein Spacer ergänzt, der individuelle Abstände zwischen Zeichen (in Abhängikeit auch von Hoch-/Tiefstellung etc. einfügen kann)
	//
	// Schreibweise:
	// = ein Zeichen am Wortanfang (z.B. [F=]) oder Wortende (z.B. [=NG])
	// ^ ein höher gestelltes Zeichen (z.B. [^CH]) oder Variante vor höhergestelltem Zeichen (z.B. [AR5^])
	// _ ein tiefer gestelltes Zeichen (z.B. [_N])
	// @ ein Verbundzeichen (z.B. [@L] oder [@R], die mit anderen Zeichen verbunden werden)
	// 0..9 bei runden Zeichen: Anknüpfpunkt (z.B. [@R6] = Zeichen R mit Anknüpfpunkt bei 6 Uhr, also im Fusspunkt)
	// # technische Zeichen (z.B. [#WS] = wide shadowed, eine weite, schattierte Verbindung, also ä im System Stolze-Schrey; [#5] = spacer mit Abstand 5px)
	// +- Gross- oder Kleinschreibung bei Blockschriftzeichen (z.B. [A+] = grosses A, [A-] = kleines A)
	// & geschriebene Vokale oder Häkchen (z.B. [&I] oder [&E])
        // -1 bei Aufstrich-t: wie viel tiefer weitergeschrieben wird (z.B. [&T-1] in Verbindung mit [B])
	#BeginSubSection(session)
		"prefixes_list" := "in, kon, ge, zu, un, be, bei, ein, um, ur, anti, ver, inter, mit, ent, auf, ab, an, er, vor, wie?-?der, durch, ein, der, des, dem, her, ge-?gen, hin, zer, recht, sam-?men, un-?ter, aus, rück, da, nach, zwi-?schen, hin-?ten, hin-?ter, weg, ü-?ber, miss, dar, wei-?ter, los, lang, so, lieb, schief, scharf, statt, tief, wahr, weich, weis, wett, wohl, zwangs, fehl, fest, frei, gleich, kalt, kund, kurz, gut, nie-?der, wor?, mei-?net, dei-?net, sei-?net, uns-?ret, eu-?ret, ih-?ret";
		"stems_list" := "gangen, fähr, brochen, kannt, ra-?de(?:s-?te?)?[rsnm]?, höf, ständ, bun-?de-?n(?:e[nmrs]?)?, müt, schwenden, tüm, stöckig(?:e[srnm]?)?, nü-?t-?z, tei-?li-?g(?:e-?r(?:in(?:-?nen)?)?)?, sichts, nann-?t(?:e[rsnm]?)?, las-?se-?n(?:(?:e-?r)?e[rsnm]?)?, (?:[lg]eb-?nis(-?se[ns]?)?), heut, [Bb]lend, gin-?n, nom-?me-?n(?:e[rnsm]?)?, harm";
		"suffixes_list" := "[kh]ei-?t(?:s|en)?, li-?ch(?:(?:e-?r)(?:e[srn]?)?)?, nis(?:sen?)?, w(?:ie|o|ann|as|e[rnm]), los(?:(?:es)?e[snmr]?)?, bar(?:(?:st)?e[rnsm]?)?, sam(?:(?:st)e[rsnm]?)?, hin, her, so, sch(?:a|ä)f-?t(?:(?:s\|?|e-?[rn]?)(?:in-?(?:nen)?))?, un-?te-?r(?:(?:st)?e?[smnr]?), seits, chens?"; // use non caputuring groups! (?:)
		//"title_text" := "new prefixes";
	#EndSubSection(session)
	#BeginSubSection(analyzer)
		"ebe(-?)n" => "e-be$1n";  // bug in phpSyllable: eben is not hyphenated!?
		"oder" => "o-der"; 	// same ...
		"^([Vv]i)a$" => "$1-a";

		// probably, phpSyllable doesn't separate VCV at the beginning
		// because it doesn't want to separate just 1 vowel (would be ugly in a text)
		// so, it never separates the first vowel in that case
		// => therefore, correct that "bug" (feature;-) here in a more general way
		"([aeiouAEIOU]|ä|ö|ü|Ä|Ö|Ü)([bcdfghjklmnprstvwxz])([aeiouAEIOU]|ä|ö|ü|Ä|Ö|Ü)" => "$1-$2$3";

		// hm ... must say that phpSyllable doesn't do a very reliable job ...
		// Ausweichthema for example: separation "Ausweich-thema" is NOT recognized ...
		// only possibility to patch this would be in the dictionary of phpSyllable
		// (which - if I'm right - is based on TEX)

		"([Uu]n)z-([aeiou])" => "$1+z$2"; // phpSyllable does that wrong ...
		"\|ge$" => "-ge"; 	// correct ge- prefix (recognized as word)

		"r\|t\'s" => "rt's";	// pressiert's (cleaning up some chaos produced by linguistical analyzer ...)
		"([Ww]eh)\|r" => "$1-r";

		// ending es
		"\|es$" => "-es";

		////////////////////////// new approach for affixes ge-, be-, -er- //////////////////////////////
		///////////// mark all er as affix and filter out "false positive" at the end //////////////////
		// -er-
		"([Ee]r)-" => "$1+";
		"([Ee])-r" => "$1r+"; // Ka-me-rad-schaft, Re-fe-rat ... Steno considers all this as affix (which, linguistically speaking, is completely wrong ...
		"-([bcdfghjklmnprstvwxyzBCDFGHJKLMNPRSTVWXYZ])er(\+|#)" => "$1-er$2"; // Schil-der+ung: reorganize syllabical structure ...
		"(Ü|ü)b-er\+" => "$1-ber+"; // recorrect über
		"(U|u)nt-er\+" => "$1n-ter+"; // recorrect unter
		//"erst" => "er+st"; // äusserst (eh l'horreur continue ...)
		"er(?!\+)" => "er+"; // generalization of preceeding rule (because also valid for other cases: Pflegern

		// be-
		"^([Bb]e)-" => "$1+";
		"(\|[Bb]e)-" => "$1+";

		// ge-
		"^([Gg]e)-" => "$1+";
		"(\|[Gg]e)-" => "$1+";

		////////////////////////////////////// end new approach ///////////////////////////////////////

		// don't separate prepositions or shortings at beginning
		"([Ff]ür)\|" => "$1+";
		"([Ii]n-?ter)\|" => "$1+";
		
		// diejenige, derjenige, desjenigen etc.
		"([Dd](?:ie|er|es|as|em|en))-?(je-?ni-?ge)" => "$1+$2";

		// correct wrong separations
		"([Dd])e-?nen" => "$1en+en";
		"([Dd])e(-?|\|)re([rn])" => "$1er+e$3";
		"([Mm]i-?ne)\|(ral)" => "$1-$2";
		"([Dd]er)\|(ben)" => "$1-$2";
		"([Ss]au)\|(be)\+(r)" => "$1-$2-$3";
		"([Mm]an)\|(gel)" => "$1-$2";

		// additional separations
		"([Nn]acht)-?(tisch)" => "$1|$2";
		"([Ww]ei-?ter)\+" => "$1|";
		"([Ss]er-?vier)-" => "$1|$2";	// Serviertochter
		"-lied" => "|lied"; 	// Beresinalied

		// aus-
		"([Aa]us)-g" => "$1+g"; // could produce wrong results ...

		// in general: don't separate -[brt]en (..)
		"\|ren" => "-ren";
		"\|ten" => "-ten";  // why is "ten" recognized as a word (in german)?!?
		"\|ben" => "-ben";

		// separate repetier-
		"([Rr]e)-(pe-tier)-" => "$1+$2|"; // Repetierpistole, Repetierstunde
		
		// separate "Kutte(n)-"
		"(Kut-?ten)-" => "$1|"; // beginning
		"-(kut-?ten?)" => "|$1";  // end (works also for "Kutter" which is correct)

		// recognize more auf-
		"([Aa]uf)-(kl|n)" => "$1+$2";

		// don't separate -tümlich
		"\|(tüm[-#]?li-?ch)" => "-$1";

		// ein-
		"([Ee]in)-?(tö-?ni-?g)" => "$1+$2";

		// er-
		"([Ee]r)-?(lau-?b)" => "$1+$2";
		"([Ee]r)-?(staun)" => "$1+$2";
		"([Ee]r)-?(le-?di-?g)" => "$1+$2"; 
		"([Ee]r)-?(in-?ne-?r)" => "$1+$2"; 
		
		// allesamt
		"([Aa]l-?le)\|(samt)" => "$1+$2"; 

		"([Gg]ib)\|t" => "$1t"; // what a mess ...

		"^([Nn])eu\|e" => "$1eu-e";

		"([Ii])n-ter-" => "$1n-ter+";

		"\|dun(-?)g(s|en)?$" => "-dun$1g$2"; // Neugründung

		"([Bb]e)-?(ja-?h)" => "$1+$2";

		"([Hh])e-?r-?aus-?" => "$1er+aus+";
		"da-ma(-?)l" => "da+ma$1l";
		"un(-?|\||\+)te(-?)r" => "un-te$2r"; 
		"(\+|\|)([bd])e([nrsm]?)$" => "-$2e$3";
		"([WwNn])ie\|de(-?)r\+" => "$1ie-de$2r|";
		"([WwNn])ie\|de(-?)r" => "$1ie-de$2r";
		"([Nn])ie\|ma" => "$1ie-ma";
		"([Hh]er)\+(ren)" => "$1-$2";
		"([Ww]in-?ter)\+(thur)" => "$1|$2";
		"([Tt]rotz)-(dem)" => "$1+$2";
		"Lei-?b-?und-?gut" => "Leib|und|gut";
		"([Gg]e)-?(sel-?l)" => "$1+$2";
		"([Ww]ich)\|(ti-?ger)" => "$1-$2";
		"(wir)\|(ren)" => "$1-$2";
		"(wir)\|(ren)\|(der)?" => "$1-$2-$3";
		"(wor)\+(ren)" => "$1-$2";
		"([Mm]it)\+(ta-?g)" => "$1-$2";
		"([Oo]h)\|(ren)" => "$1-$2";
		"([Bb]al-?dri-?an)-?(?!\|)" => "$1|"; // word unknown by hunspell
		"([Aa])u\|g" => "$1u-g";
		"([Aa]u)\|(tor)" => "$1-$2";
		"([Ww]en)\|(n)" => "$1$2";  // this linguistical analyzer really does strange things (with "wenn's")
		"([Ee]in)-?(tö-?nig)" => "$1+$2";
		"([Ss]pan)\|(nun(?:-|\|)?g)" => "$1-$2";
		"([Kk]om-?bi)\|(na-?ti-?o-?n)" => "$1-$2";
		
		"\+lie-g" => "|lie-g"; // daniederliegen
		"([Ss])ie\|ben" => "$1ie-ben";
		// more general: don't separate bens?$
		"\|(bens?)$" => "-$1";

		"zäh\|lun-gen$" => "zäh-lun-gen";
		"([Mm])it\|tag" => "$1it-tag";
		"([Vv])iel\|leicht" => "$1iel-leicht";
		"^([Pp])ro\|" => "$1ro-";
		"e\|ren$" => "e-ren";	// näheren
		"(\+|\|)ge(-?)n(e[nrs]?)?$" => "-ge$2n$3";
		"\|([kh])ei\|t(.?.?)$" => "=$1ei-t$2"; 
		"^[Ee]r(\|)" => "{ER}"; // prefix or infix er
		"(\|)er(\|)" => "{ER}"; // infix er
		"[Aa]n\+?de(-|\|)?r(en?)?" => "an-de$1r$2";
		"([Gg]e)-?(räu-?sch)" => "$1+$2";
		"([Rr]at)-?(lo-?s)" => "$1#$2";

		// mark prefixes that have not been recognized
		"^([Vv])er-ant-" => "$1er+ant+";
		"\|ver-ant-" => "|ver+ant+";
		"([Ee]nt)-(fer-?n)" => "$1+$2";
 

		"in-dem" => "in+dem";
		"zu-dem" => "zu+dem";
		"^([Gg]e)[-+]?(gen)\|" => "$1-$2+";
		"^(Ü|ü)(-?)ber-" => "$1$2ber+"; 
		"([Bb]e)-?(rei-?t)" => "$1+$2";
		"([Uu]r)-?(teil)" => "|$1+teil"; 	// isn't recognized because 2nd word starts with vowel
		"([Jj]e)\|?(de)" => "$1-$2";
		"([Bb]e)-(son-de)" => "$1+$2";
		"([Ee]r)-(f[auie])" => "$1+$2";  // c'est osé ...
		"([Ee]r)-(kl(?:[aeiou]|ä))" => "$1+$2";
		"([Gg]e)-(n(?:u|ü))" => "$1+$2";
		"([Gg]e)-?(litz-?t)" => "$1+$2"; // Helvetism
		"([Gg]e)-?(f(?:a|ä)ng)" => "$1+$2";
		"([Gg]e)-?(dach-?t)" => "$1+$2";
		"([Gg]e)-?(fühl)" => "$1+$2";
		"([Gg]e)-?(sin-?nung)" => "$1+$2";
		"([Gg]e)-?(nos-?s)" => "$1+$2";
		"([Gg]e)-?(wöh-?n)" => "$1+$2";
		"([Gg]e)-?(win-?n)" => "$1+$2";
		"([Gg]e)-?(stal-?t)" => "$1+$2";
		"([Gg]e)-?(ta-?n)" => "$1+$2";
		"([Aa]n)-?(ge)-?(bie-?d)" => "$1+$2+$3";
		"([Gg]e)-?(moch-?t)" => "$1+$2"; 
		"([GgBb]e)-?(wuss-?t)" => "$1+$2";
		"([Gg]e)-?(r(?:u|o)-?c-?h)" => "$1+$2";
		"([Gg]e)-?(wis-?s)" => "$1+$2";
		"([Gg]e)-?(setz)" => "$1+$2";
		"([Gg]e)-?(sand-?t)" => "$1+$2";
		"([Gg]e)-(dicht)" => "$1+$2"; 	// Gedichtlein isn't recognized ...
		"([Gg]e)-(schlitz-?t)" => "$1+$2";
		"([Gg]e)-?(frei-?t)" => "$1+$2";
		"([Gg]e)-?(sich)" => "$1+$2"; 
		"([Gg]e)-(spr)" => "$1+$2";
		"([Gg]e)-(sun)" => "$1+$2";

		"([Ee])r-folg" => "$1r+folg";
		"([Ee]r)-?(hö-?h)" => "$1+$2";

		"ungs-an" => "ungs|an"; // terrible "hacks" ... :-)
		"\|an-" => "|an+";

		"([Ww])ar\|um" => "$1a-rum";
		"([Bb])e-?que(-?)m" => "$1e+que$2m";
		"([Pp])fle-?ge\|r" => "$1fle-ge-r"; // Pflege-Rinnen (Computers are stupid ... :)
		"([Aa])-?me-?ri-?ka\|ni" => "$1-me-ri-ka-ni";	// Amerika-Nische (Computers are stupid ... :)
		//"([Kk])i(-?)lo\|" => "$1i$2lo+"; // Kilometer: shorting [et] ...
		"([Gg]e-?ne)\|(ral)" => "$1-$2";
		"#seits" => "|seits";

		// prefix in-
		"^([Ii])n-(?!ter)" => "$1n+";
		"^([Ii]n)\+(ne)" => "$1-$2";

		// trying to recognize more ge-/be- prefixes: rule: ends with -en(..) or -t(..)
		"\+([bg])e-(.*)-(.*)(en(?:(?:-?s-?t|e-?r)?e[nrsm]?))?" => "+$1e+$2-$3$4";
		"^([bg])e-(.*)-(.*)(en(?:(?:-?s-?t|e-?r)?e[nrsm]?))?" => "$1e+$2-$3$4";
		//"\+([bg])e-(.*)-(.*)(-?t(?:(?:es-?t|e-?r)?e[nrsm]?))?" => "+$1e+$2-$3$4";
		"\+([bg])e-(.*)(t(?:(?:es-?t|e-?r)?e[nrsm]?))?" => "+$1e+$2$3$4"; // test (replaces line before)
		"^([bg])e-(.*)-(.*)(-?t(?:(?:es-?t|e-?r)?e[nrsm]?))?" => "$1e+$2-$3$4";

		// same for ver-
		"\+([Vv])er-(.*)-(.*)(en(?:(?:-?s-?t|e-?r)?e[nrsm]?))?" => "+$1er+$2-$3$4";
		"^([Vv])er-(.*)-(.*)(en(?:(?:-?s-?t|e-?r)?e[nrsm]?))?" => "$1er+$2-$3$4";
		"\+([Vv])er-(.*)-(.*)(-?t(?:(?:es-?t|e-?r)?e[nrsm]?))?" => "+$1er+$2-$3$4";
		"^([Vv])er-(.*)-(.*)(-?t(?:(?:es-?t|e-?r)?e[nrsm]?))?" => "$1er+$2-$3$4";

		// be- + #er(in)(nen) // be- + ung
		"([Bb]e)-(.*)-(.*?)(e-?r)([sn]|in(?:-?nen)?)?$" => "$1+$2-$3$4$5";
		"([Bb]e)-(.*-)(.*)(un-?g(?:s|en)?)" => "$1+$2$3$4";	

		// recorrect be-/ge- before gerundium
		"([bg]e)\+(.*)(n-?d)(e[rnsm]?)$" => "$1-$2$3$4";
		"([bg]e)\+(.*)(n-?d)(e[rnsm]?)\|" => "$1-$2$3$4|";

		// and correct the correction ...
		"([Bb]e)-?(geis-?ter)" => "$1+$2";
		"([Bb]e)-?(am-?t)" => "$1+$2";
		"([Bb]e)-?(tr(?:u|o|ü)-?g)" => "$1+$2";
		"^([Bb]e)-?(gin-?n)" => "$1+$2";
		"([Bb]e)-?(rech)" => "$1+$2";

		// an-
		"([Aa]n)-(.*)-(lich)" => "$1+$2#lich";
		"([Aa]n)-?(läs-?s)" => "$1+$2"; 

		// auf- / ver- / zu-
		"^([Aa]uf|[Vv]er|[Zz]u)-(.*)(ung)(en)?$" => "$1+$2$3$4";
		"\+(auf|ver|zu)-(.*)(ung)(en)?$" => "+$1+$2$3$4";
		"^([Aa]uf)-(zu)-" => "$1+$2+";
		"([Zz]u)-?(k(?:u|ünf))" => "$1+$2";

		// die- ist most of the times not a separate word (a part from diejenigen, dieselben)
		"([Dd])ie\|(?!(je|se))" => "$1ie-";

		// meinet, deinet, seinetwegen etc. => consider it as two words
		"\+(we-?gen)$" => "|$1"; 
 
		// zeit-
		"([Zz]eit)-?(wei-?l)" => "$1|$2";

		// -lich
		"(?<!#)-?(lich(?:-|#)?kei-?t)" => "#$1";

		// -bar(ensr)
		"\|(ba-?r(?:(?:e-?r)?e[rsnm]?)?)" => "-$1";

		// in vs inner
		"([Ii]n)\+(ner)" => "$1-$2";

		"([Gg]e)-?(stan-?d)" => "$1+$2"; 

		// ent-
		"([Ee]nt)-?(setz)" => "$1+$2";
		"([Ee]nt)-?(b|sch)" => "$1+$2";

		// un-
		"([Uu]n)-(z)(?!e)" => "$1+$2";
		"([Uu]n)-(b)" => "$1+$2";
		"([Uu]n)-?(nach-?)" => "$1+$2";
		"^([Uu]n)-(er|ver|ge|be|an)-" => "$1+$2+";

		"([Zz]u#sam)\|(men)-?(ge)\|" => "$1-$2|$3";

		"([Bb]e\+?)(auf)-" => "$1$2+";

		"([Ss]on-?n)-?(t(a|ä)g)" => "$1|$2";

		// not recognized words
		"([Ll]ein)-?(t(?:ü|u)-?ch)" => "$1|$2";
		"([Ee]r)-?(qui-?ck)" => "$1+$2";
		"([Kk]ur)\|(zer)\+h" => "$1-$2|h";

		"([Hh]arm)\|l" => "$1#l";
		
		// who the hell invented this Aufstrich-stuff ... Stolze or Schrey (or both must have been
		// slightly drunk (or high) when they had the idea ... it's nice for short words and in the 
		// end of words ... but try to write something like "sentimental" or "Sentimentalität" ...
		// you probably have to glue some additional paper on top in order to get enough space ... 
		// anyway: I'm opting her for an etymological (romanistic) separation of this word:
		// senti|mental and Senti|mentalität (and if a purist thinks this is not correct then come
		// up with a better solution - or tace! :)
		"([Ss]en-?ti)-?(men-?t)" => "$1|$2";
		
		// recorrections
		"([Gg]e[+-]?)(be)[+-](t)" => "$1$2-$3";
		"([Gg]e)-(bet)" => "$1+$2";
		"([Ww]o)#(chen)" => "$1-$2";
		"([Ff]rei)\+(tag)" => "$1-$2";
		"([Ss]ams)\|(tag)" => "$1-$2";
		
		"([Mm]u-?se)\|(um)" => "$1-$2";
		"([Ss]ei)\|(den)[+-]?(en)" => "$1-$2-$3";
		"([Zz]er)\+(ren)" => "$1-$2";
		"([Tt]he-ma)\|(tisch)" => "$1-$2";
		"([Uu]-ni)\|(for-?m)" => "$1-$2";
		"([Zz]wei)\|(fels)" => "$1-$2"; // suppose it is never "zwei" + "Fels" (Dreifels exists;-)
		"([Ss]ei)\|(den)" => "$1-$2";
		"([Nn]eu)\|(fund)\|(l)" => "$1-$2|$3"; // Neu-Fund will be written separately
		"Zu\+ge" => "Zu-ge";
		"([Kk]lös-ter)\|(li-?ch)" => "$1#$2";
		"\|(run-gen)" => "-run-gen"; // very strange results that have to be corrected ... ;-)
		"([Aa]n)\+(gel)" => "$1-$2";
		"([Ee]i)\|(ni)" => "$1-$2";
		"([Ww]en)\|(de)" => "$1-$2";
		"([Uu]n)\+(se-?r)" => "$1-$2";
		"([Mm]uss)\|(test)" => "$1-$2";

		// final ge-
		"([Gg]e)-?(fun-?de-?n)" => "$1+$2";
		"([Gg]e)\+(ge)\+" => "$1+$2-"; 	// avoid 2x ge-
		"([Aa]uf(?:-|\+)?(?:ge\+)?ge)\+(be)" => "$1-$2"; 
		"([Gg]e)\+(ben)" => "$1-$2";

		/////////////////////////////////////// new approach prefixes ///////////////////////
		// filter out "false positives" for affixes
		
		// prefix be+
		"([Bb]e)\+(te(?:n|st|t(?:en?)?|nd(?:en?)?))" => "$1-$2";
		"([Bb]e)\+(b(?:en|e?st|e?t(?:en?)?|nd(?:en?)?))" => "$1-$2";
		"([Bb]e)\+(sens?)" => "$1-$2";
		"([Bb]e)\+(ne)" => "$1-$2";
		"([Bb]e)\+(x)" => "$1$2";
		

		// prefix ge+
		"([Gg]e)\+(he)" => "$1-$2";
		"([Gg]e)\+(gen)" => "$1-$2";
		"([Gg]e)\+(be(?:-|\+)?n(?:d?(?:st)?e[mrsn]?)?)" => "$1-$2";
		"([Gg]e)\+(cko)" => "$1-$2";
		"([Gg]e)\+(le(?:-|\+)?n(?:d?e[mrsn]?)?)" => "$1-$2"; // eingelen (if it exists ... ;-)
		"([Gg]e)\+(l-?t(?:e[mrsn]?)?)" => "$1-$2";
		"([Gg]e)\+(ne?[sn]?)" => "$1-$2";
		
		
		// affix er+ 
		"^([Uu]n)?([GgBb]er)\+n" => "$2$1-n";
		"^([Ee])r\+(s-?t)" => "$1r$2";
		"^([WwDdHhPp]?[Ee]r)\+$" => "$1";
		"([BbPpSsWw]|[Zz]w)er\+g" => "$1erg";
		"([Ee]r)\+(ker)" => "$1-$2";
		"r\+$" => "r";
		"([TtGg]er)\+m" => "$1-m";
		"([Zz]er)\+(be-?r\+)" => "$1-$2";	// Zerberus
		"([Zz]e-?r)\+(e-?mo-?n)" => "$1-$2";	// Zeremonie
		"([Zz]er)\+(ti-?fi)" => "$1-$2";	// Zertifikat, zertifizieren
		"([Kk]on-?zer)\+(t)" => "$1$2";		// Konzert (syllables are not handled very cleanly ...)
		"(Zer)\+(matt)" => "$1-$2";
		"(ie-?r)\+" => "$1";
		"(er)\+(i-?e)" => "$1$2";
		"([Bb]er)\+(e-?si-?na)" => "$1$2";
		"([Mm]er)\+k" => "$1k";
		"([Ee]r)\+(ns)" => "$1$2"; 	// ernst
		"([Zz]u)\+(er)\+(st)" => "$1+$2$3"; 
		"([Pp]er)\+(l)" => "$1$2"; 	// Perle
		"([Ee]r)\+(le)(?![dsbghmprtwz])" => "$1$2"; 	// Erle
		"([Ll]er)\+n" => "$1n";
		
 

	#EndSubSection(analyzer)
#EndSection(header)
