#BeginSection(rules)
	#BeginSubSection(global,#>stage0)
		// global replacements in the whole text
		//"(?<!\[)=" => "[#=#]\"; // in packer before (doesn't work because of inline option tags => choose another symbol for suffix boundary!)
		"&hellip;" => "..."; // ellipsis
		"…" => "...";
		"–" => "[~~]"; // blocks calculation in layouted mode
 		" &ndash; " => " [~~] "; // Gedankenstrich
		"&ndash;" => "="; // blocks calculation in layouted mode
		"&rs?aquo;" => "«"; 
		"&ls?aquo;" => "»";
		"›" => "»";
		"‹" => "«";
		"ß" => "ss";
		"&szlig;" => "ss";
	#EndSubSection(global,#>stage0)
	#BeginSubSection(helvetizer) // restructure parser: word functions before parser not possible
		//"ß" => "ss";			// anymore => transfer helvetizer to global section (stage1)
	#EndSubSection(helvetizer,#>stage2)
	#BeginSubSection(corrector,#>stage2)
		// some words are erroneously separated by LING
		// e.g.: wie|der, sie|ben ...
		// correct that by remerging them here in stage2 (where words can be treated entirely before stage3)
		// this is a little bit more elegant than before ... ;-)
		// (best thing would be a LING module that does everything perfectly - but this is the next best option;-)
		//"([Ww])ie\|der" => "$1ie-der"; 
		//"([Ss])ie\|ben" => "$1ie-ben";
		//"([Ww])er\|de" => "$1er-de";
		//"([Ww])er\|den" => "$1er-den";
		//"\|(de[snrm]?)" => "-$1"; // all the above+ in one formula
		//"zäh\|lun-gen$" => "zäh-lun-gen";
		//"\|de([nm])" => "-de$1"; // there's a hole bunch of that stuff ... :-/ 
		//"([Mm])it\|tag" => "$1it-tag";
		//"([Vv])iel\|leicht" => "$1iel-leicht";
		//"^([Pp])ro\|" => "$1ro-";
		//"\|er(?=($|\|))" => "-er";
		//"e\|ren$" => "e-ren";	// näheren
		//"(\+|\|)ge(-?)n(e[nrs]?)?$" => "-ge$2n$3";
		//"\|([kh])ei\|t(.?.?)$" => "=$1ei-t$2"; 
		//"(?<!#)li(-?)ch" => "#li$1ch";
		//"^[Ee]r(\|)" => "{ER}"; // prefix or infix er
		//"(\|)er(\|)" => "{ER}"; // infix er
		//"[Vv]or\|r" => "{VOR}|[AR]";
	#EndSubSection(corrector,#>stage3)
	#BeginSubSection(packer,#>stage3)
		// some shorthand tokens use special chars (like -#+=/ etc.) in their definition
		// this can lead to confusions in the transcriptor: e.g. - might be the character - 
		// (which has to be drawn as such) or a part of a token definition (like [0N-]
		// in order to avoid that, "packer" bundles those characters adding brackets []
		// later the transcriptor converts them back into normal characters
		"(?<!\[)=" => "[=]\";
	#EndSubSection(packer)
	#BeginSubSection(trickster)
		"([Dd])ahinter" => "{DA}[H][N][&TVR]";
		//"Athen" => "[0N-][A][T][H][E][N]";
		"([Dd])urchaus" => "{DURCH}{AUS}";
		"([Jj])edem" => "$1e[D]{EM}";
		"([Gg])eradem" => "$1era[D]{EM}";
		"[Dd]asein" => "{DA}s[EI]n";
		"^([Oo])dem" => "[0N-]$1[D]em";
		"^([Ee])rheiter" => "{ER}h[EI]t{ER}";
		"^([Bb])eb(en|s?t)" => "$1Eb$2";
		"([Hh])ohn(.+)" => "$1ohn|$2";
		"([Pp])astete" => "$1ast[E]te";
		"^([Ff])röhlich" => "$1rö[H]lich";
		"^([Rr])ohh?eit" => "$1o[H]{HEIT}";
		"^([Uu])ngetüm" => "$1nge[T]ü[M]";
		"^([Mm])isser" => "$1iss{ER}";
		"([Dd])iskret" => "$1iskr[E][T]";
		"([Uu])nbeirrt" => "{UN}{BE}irrt";
		"([Rr])echtz" => "$1e[CH][&T][Z]";
		"([Hh])aftbar" => "$1[A]ftbar";
		"([Ww])eltall" => "$1elt{ALL}";
		"([Jj])enseits" => "$1en[S]eits";
		"([Zz])entr" => "$1[E]nt[R]";
		"([Zz])ent" => "$1[E]nt";
		"Variete" => "var[#N][&I][E]te";
		"Arie" => "[0N-][A]r[#N][&I][-E]";
		"([Ss])een" => "$1e[#W][&E]en";
		"pfent" => "pf[E]nt[&E]";
		"[fF]alsch" => "fAlsch";
		"([MmLl])e[eh]r" => "$1[E]r";
		"gebe" => "Gebe";
		"\[qQ\]uai" => "qu[&A]i";
		"\[mM\]eter" => "m[E][T]er";
		"û" => "ü";
		"é" => "e";
		"bete" => "b[E]te";
		"Hals" => "H[A]ls";
		"^besten$" => "best{EN}";
		"[aA]usspr" => "{AUS}spr";
		"ausst" => "{AUS}st";
		"[Mm]ante" => "m[A]nte";
		"okument" => "okumEnt";
		"beizu" => "{BEI}{ZU}";
		"[Bb]eiz" => { "B[EI]z", "[Bb]eizeit" };
		"[Ss]erviet" => "servIEt";
		"schin" => "[SCH]in";
		"[Aa]uster" => "[AU]ster";
		"mitinhab" => "mit{IN}hab";
		"([Bb])esser" => "$1Esser";
		"([Bb])enzin" => "$1Enzin";
		"([Zz])uch" => "z[U][CH]";
		"([Zz])uck" => "z[U][CK]";
		"([Gg])eld" => "$1[E]ld";
		"[Ww]ieso" => "{WI}|[0N-][SS]";
		"([Zz]u)dem" => "{Z}{EM}";
		"([Ii]n)dem" => "{IN}{EM}";
		"([Vv]or)dem" => "{VOR}{EM}";
		"([tr])los$" => "$1[L]os";
		"([aeiouäöü])ther$" => "$1t[H]er";

		// the following come from the old $dictionary_table
		// "(ab)use" trickster as temporary replacement for dictionary/database
		// priority 1 = create good rules
		// priority 2 = feed the database (but it should be as small as possible ... hence priority 1)

		//"^Lebenspartner$" => "LEBE[NS]|PA[VR][&TN][#N][VR]"; 
                "^Athen$" => "[0N-][A][T][H][E][N]";
                "^Athens$" => "[0N-][A][T][H][E][NS]";
                "^Zuge$" => "ZUG[-E]";
                "^Anton$" => "[0N-][A][N][&T][&E][O][N]";
                "^eins$" => "[0D-][EI][NS]";
                "^Familie$" => "FAMIL[#N][&I][-E]";
                "^Familien$" => "FAMIL[#N][&I][EN]";          
             	"^[Uu]ngern$" => "[#NS][&U][G][E][VR]N";
                "^[Ss]ofort$" => "[0N-][SS][FORT]";
                "^[Ww]odurch$" => "[WO][DURCH]";
                "^[Ww]ofür$" => "[WO][F]";
                "^[Ww]ogegen$" => "[WO][GEGEN]";
                "^[Ss]eitdem$" => "[0N-][S][HEIT][&E][EM]";
                "^[Ww]ozu$" => "[WO][Z]";
                "^[Ww]o$" => "[WO]";
                "^[Ee]r$" => "[0N-][E][VR]";
                "^[Ee]twas$" => "[0N-][#W][T][WAS]";
                "^[Ee]twa$" => "[0N-][#W][T][W][A][&A]";
                "^[Ww]ir$" => "[W]";
                "^[Uu]nion$" => "[0N-][U][N][ION]";
                "^[Dd]enen$" => "[0N-][EN][O][&E][0N-][EN]";
                "^[Ww]as$" => "[WAS]";
                "^[Gg]egend$" => "[G][E][G][E][ND]";
                "^[Uu]mso$" => "[0N-][U][M][0N-][#N][SS]";
                "^[Kk]arriere$" => "[K][A][RR][&I][E][VR][-E]";
                "^[Bb]este$" => "[B][E][ST][-E]";
                "^[Oo]der$" => "[0N-][O][D][#N][VR]";
                "^[Ss]omit$" => "[0N-][#N][SS][#N][M]";
                "^((Ü|ü)ber)?[Aa]ll$" => "$1[ALL]";
                "^[Aa]llein$" => "[ALL][EI][N]";
                "^[Aa]lleine$" => "[ALL][EI][N][-E]";
                "^[Ii]hn$" => "[0D-][I][N]";
                "^[Ii]hm$" => "[0D-][I][M]";
                "^[Ss]o$" => "[0N-][SS]";
                "^[Ss]ogar$" => "[0N-][#N][SS][G][A][VR]";
                "^[Aa]lso$" => "[0N-][A][L][SS]";
                "^[Bb]eret$" => "[B][E][VR][E][T]"; // béret doesn't work as key ...
                "^[Ee]benso$" => "[0N-][E][B][E][N][SS]";
                "^[Ss]ogleich$" => "[0N-][SS][G@L3][EI][^CH]";
                //"sozusagen" => "{so}zsagen";
                //"soweit" => "{so}w{heit}";
                //"solange" => "{so}lange";
                //"worauf" => "{wor}{auf}";
                //"wonach" => "{wo}nach";
                //"wohin" => "{wo}hn";
                "^[Dd]araus$" => "[DA@R][AUS]";
                "^[Dd]arin$" => "[DA@R][IN]";
                "^(Ü|ü)beraus$" => "[0N-][#WS][&U][AUS]";
                "^Schaft$" => "[SCH][A][F][&T]";
                "^[Bb]eim$" => "[B][EI][M]";
                "^[Dd]abei$" => "[DA][BEI]";
                "^[Ss]albei$" => "[0N-][S][A][L][B][-EI]";
                "^[Dd]essen$" => "[D][E][SS][EN]";
                "^[Ee]s$" => "[0N-][#N][-E]";      
                "^[Pp]forte$" => "[PF][O][R][&T][&E][-E]";
                "^[Dd]afür$" => "[DA]F";
                "^[Dd]agegen$" => "[DA][GEGEN]";
                "^[Dd]ahin$" => "[DA]HN";
                "^[Ii]nsofern$" => "[IN][SS][F][E][VR][N]";
                "^[Ii]ns$" => "[0D-]I[NS]";
                "^[Ss]ich$" => "[SICH]";
                "^[Dd]aselbst$" => "[DA][SELB][ST]";
                "^[Bb]evorzugen$" => "[B][VOR][Z]UG[EN]";
                "^[Zz]ug$" => "ZUG";
                "^[Dd]a$" => "[DA]";
                "^Wien$" => "[W][&I][E][N]";
                "^[Hh]ier$" => "[H][I][VR]";
                "^[Bb]eissen$" => "[B][EI][SS][EN]";
                "^[Bb]ellen$" => "[B][E][LL][EN]";
                "^[Zz]u$" => "[Z]";
	#EndSubSection(trickster,=>decapitalizer,!>filter)
	#BeginSubSection(decapitalizer)
		"([A-Z])" => "strtolower()";
	#EndSubSection(decapitalizer)
	#BeginSubSection(filter)
		"«" => "\[#Q#]";
		"»" => "[#Q#][#5]\";
	#EndSubSection(filter)
	#BeginSubSection(shortener) 
		"un-?ter" => "{UNTER}";
		"^er+" => "{ER}";
		
		"[#-]?[hk]?ei-?t" => "{HEIT}";
		"#li-?ch" => "{H}";
		"zu\+" => "{ZU}";
		"ge\+" => "{GE}";
		"(^|\|)wo(\||$)" => "$1{WO}$2";
		"wil$" => "WIL";
		"los(igkeit)?$" => "Los$1";
		"^[Uu]nbeirr" => "{UN}{BE}irr";
		"ei-en" => "[EI][&E]{EN}";
		"i-e([mn])$" => { "[&I]-e$1", "schien" };
		"ietät" => "[&I]{HEIT}";
		"t(u|ü)mlich" => "{TUM}{LICH}";
		"^[Bb]erück" => { "{BE}{RÜCK}", "[Bb]erück[et]" };
		"[Uu]nbeein" => "{UN}{BE}[EI]N";
		"h?eit-?li-?ch" => "{HEIT}{LICH}";
		"h?ei-?tig" => "{HEIT}ig";
		"ei-?tens" => "{HEIT}ens";
		"[kh]?eits" => "{HEIT}s";
		"iet$" => "[I]T";
		"solch" => "{SOLCH}";
		"^und$" => "{UND}";
		"usw\." => "{USW\.}";
		"viel-?leicht" => "{VILLEICHT}";
		"von" => { "{VON}", "Yvonne" };
		"^wa-?r(st|en)?$" => "{WAR}$1";
		"^wär(e?st|e|en|et|t)?$" => "{WÄR}$1";
		"wel-?ch" => "{WELCH}";
		"wenn" => "{WENN}";
		"^wer-?d" => "{WERD}";
		"^wie$" => "{WI}";
		"wird" => "{WIRD}";
		"vor(?!})" => "{VOR}";
		"fort" => "{FORT}";
		"eiht" => "eit";
		"[Pp]lanet" => "[P@L][A][N][E][T]";
		"etektiv" => "[E]Tektiv";
		"[Zz]u-?sam-?men" => "{ZUSAMMEN}";
		"nieder" => "nied{ER}";
		"f(o|ö)rder" => "f$1rd{ER}";
		"^unange" => "{UN}an{GE}";
		"^unt([^e])" => "{UN}t$1";
		"^(dar|wor|her|hin|hier)?auf" => "$1{AUF}";
		"(?<!sc)haft(e|en|es)?" => "{HAFT}$1";
		"ge-?gen" => "{GEGEN}";
		"zum" => "Zum";
		"geheim" => "{GE}heim";
		"etz" => "ez";
		"^woher" => "{WO}her";
		"ndwo$" => "nd{WO}";
		"trotzdem" => "trotz{DEM}";
		"(s|m)ehr" => "$1Er";
		"^beid(e[n|r|s]?)" => "[B]eid$1";
		"(?<!f)all(e[n|m|s]?)$" => "{ALL}$1";
		"^al-?l" => "{ALL}";
		"mal(s)" => "MAL$1";
		"^[Aa]ls$" => "{ALS}";
		"^zurückzu" => "{ZURÜCK}{ZU}";
		"zurück" => { "{ZURÜCK}", "[Vv]orzurück*" };
		"(\[^a-z\])all" => "{$1ALL}";
		"^auch$" => "{AUCH}";
		"^aussen" => "au[SS]en";
		"^ausser" => "au[SS]er";
		"^auss([aeiou])" => "{AUS}s$1";
		"bei(nahe|zeit(en)?)" => "{BEI}$1";
		"bein" => "[B][EI][N]";
		"^darf" => "[D]arf";
		"^dar" => "{DA@R}";
		"dast(.+)" => "{DA}st$1";
		"dasselb" => "{DASS}{SELB}";
		"dass?(?!t)" => "{DASS}";
		"^dem" => "{DEM}";
		"(?<!n)(nach|zu)?dem$" => { "$1{DEM}", "Odem" };
		"^denn" => "de[NN]";
		"[Dd]en-?k" => "de[NK]"; 
		"^den$" => "{DEN}";
		"^den-" => "{DEN}";
		"^de-nen" => "{DEN}[O][&E]{EN}"; // probably the only case where {EN} can follow {DEN} => add &E here directly
		//"\|den-" => "{DEN}";
		"^des(?![p-])" => "{DES}";
		"^die-?s(e[rsnm]?)?" => "{DIS}$1";
		"dies$" => { "{DIS}", ".*[Pp]aradies" };
		"^die$" => "{DI}";
		"durch" => "{DURCH}";
		"fürch" => "Fürch";
		"für(?!st)" => "{FÜR}";
		"ge-?habt" => "{GEHABT}";
		"(?<![Cc])ha-?b" => "{HAB}";
		"^[Hh]at(-t)?" => "{HAT}";
		"^chin" => "[CH]in";
		"^hinzu" => "{HIN}{ZU}";
		"^in$" => "{IN}";
		"^ist$" => "{IST}";
		"mitt" => "m1i2t3t4";
		"mit(?!(t|-t))" => { "{M}", "Eremit" };
		"m1i2t3t4" => "mitt";
		"^nicht" => "{NICHT}";
		"^sie$" => "{SI}";
		"^[Ss]ind$" => "{SIND}";
		"(?<!^)lich(s?t?e?[mn]?|ere?[mn]?|keit(en)?|es)?$" => { "{LICH}$1", "Pflicht(en)?" };
		//"^(.*?)(k?ei-?t)(et?(re?)?[nms]?)?" => "$1{HEIT}$3";
		"([hk]eit)(et?(re?)?[nms]?)?$" => "{HEIT}$2";
		"(eit)(et?(re?)?[nms]?)?$" => "{HEIT}$2";
		"([ie]?tät)(en)?$" => "{HEIT}$2";
		"bei(?!l)" => "{BEI}";
		"geh" => "Geh";
		"^([Mm])iss" => "$1i[SS]";
		"([Hh])inter" => "HN[&TVR]";
		"^([Hh])ing$" => "$1I[NG]";
		"^hin(?![dz])" => "{HIN}";
		"tret" => "trEt";
		"^gebe" => "Gebe";
		"^gern" => "Gern";
		"^erd" => "[0N-]Erd";
		"^angab" => "aNgab";
		"heraus" => "her{AUS}";
		"rosen" => "roseN";
		"^zur$" => "[Z]ur";
		"^uns(er.*)?$" => "u[NS]$1";
		"(^|\|)({?des}?)?inter" => "$1$2{INTER}";
		"^({?des}?)?[Ii]n(?!-?n)" => { "$1{IN}", "[Ii]ndien" };
		"damit" => "{DA}{MIT}";
		"davon" => "{DA}{VON}";
		"dazu" => "{DA}{ZU}";
		"da-?[Mm][Aa][Ll][Ss]" => "{DA}mals";
		"ü-?ber" => "{ÜBER}";
		"dieselb" => "{DI}{SELB}";
		
		"^der" => "{DER}";
		"(?<!w)e-?r(e[mns]?)?$" => "{-ER}$1";
		"(^|\|)(((un)?(ver|be|über))|(gegen|neben|rück|fehl|ur|nach|vor|voll))?[ae]nt([^i])" => "$1$2{ANT}$7";
		"^unent" => "{UN}{ANT}";
		"^aufent" => "{AUF}{ANT}";
		"^(ein|auf|bei|an|vor|ab)?zuer" => "$1{ZU}{ER}";
		"^[Zz]uver" => "{ZU}{VER}";
		"^(ein|auf|bei|an|vor|ab|aus|durch|dar|hervor|mit|vorher|nieder|zusammen)zu(?![mrc])" => "$1{ZU}";
		"^[Zz]u(?![mrc])" => { "$1{ZU}", "Zuoz" };
		"^([Zz])ur([aeiouäö])" => "{ZU}r$2";
		"^([Nn])achzu" => "$1ach{ZU}";
		"^[Gg]ea([bcdfghjklmnpqrstvx])" => "{GE}a$1";
		"^[Bb]eur" => "{BE}{UR}";
		"^[Bb]eun" => "{BE}{UN}";
		"^[Rr]ückver" => "{RÜCK}{VER}";
		"^[Rr]ücker" => "{RÜCK}{ER}";
		"^[Rr]ück" => { "{RÜCK}", "[Rr]ücke" };
		"^[Mm]itver" => "{M}{VER}";
		"^([Ss]elb(st)?|[Mm]iss|[Kk]riminal|[Ee]in)?ver" => "$1{VER}";
		"selb" => "{SELB}";
		"(^|\|)[Aa]nti[kc]on" => "$1{ANTI}{C}";
		"(^|\|)[Zz]uver" => "$1{Z}{VER}";
		"[Ww]ie?-?der" => "{WIDER}"; // from stage2
		"(?<!^)([AEIOUaeiouäöü\]+[bcdfghjklmnpqrstvwxyz]*)e-?t(e?|e(n|s)?)$" => { "$1{ET}$2", "[Rr]aket" };
		"erer([se]?[nm]?)$" => "{ER}{ER}$1";
		"rr" => "[RR]";
		"([Bb])ech" => "$1Ech";
		"(w|qu)er(?!d)" => "$1Er";
		"erei(en)?$" => "{ER}ei$1";
		"\[RR\]" => "rr";
		"qu" => "q";
		"(?<!sc)([Hh])all" => "[$1]a[LL]";
		"(?<![Aa])e([ao])" => "[#W][&E]$1";
		"ei-?([aeou])" => "[EI][&E]$1";
		"(?<!i)er(?=(t(e[nmrs]?)?)?$)" => "{ER}";
		
		"eu([aeou]|lich)" => "[EU][&E]$1";
		"ei([aeou]|lich)" => "[EI][&E]$1";
		"^([Aa])n([bfghklmnprswz][aeiouäöü])" => { "$1[N]$2", ".*[Aa]nker.*" };
		"sch(a|ä)f-?t(en|e)?$" => "{SCHAFT}$2";
		"t(u|ü)m(ers?|in|innen|s)?$" => "{TUM}$2";
		"^(ein|an|au[fs]|zu|ab|nieder|auseinander)ge([bcdfghjklmnpqrstvwxyz]*[AEIOUÄÖÜaeiouäöü]+)" => "$1{GE}$2";
		"^(herein|an|un|gegen|ab|auf)?ge([bcdfghjklmnpqrstvwxyz]+[AEIOUÄÖÜaeiouäöü]+)" => "$1{GE}$2";
		"(^|\|)be(un|ur)" => "$1{BE}$2";
		"^beu" => "b[EU]";
		"^(an)?be(?!(tte?n?s?$)|i|r-?n)" => "$1{BE}";
		"^anti" => "{ANTI}";
		"einander" => "einand{ER}";
		"^(un)?aus(?!-?[st])" => "$1{AUS}";
		"sei-?n" => "{SEIN}";
		"anten$" => "[A]nten";
		"(^|\|)(in|un)?[k|c]on([^n])" => "$1$2{CON}$3";
		"^(ur|an|un|zu|selb|selbst)?ver(?!((se?n?s?$)|(sion(en)?$)))" => "$1{VER}";
		"i-?[o|ö]-?nn?" => "{ION}";
		"(^|\|)(un)?er(!n)" => "$1$2{ER}";
		"(^|\|)(un)?zer" => "$1$1{ZER}";
		"(^|\|)rück(?=!ens?$)" => "$1{RÜCK}";
		"^([Aa])llerun" => "{ALL}{ER}|{UN}";
		"(^|\|)({?ver}?)?un(?!(te|iv))" => "$1$2{UN}";
		"(^|\|)({?ver}?)?ur" => { "$1$2{UR}", "Uri" };
		"eien" => "[EI][&E]{EN}";
		"^([Ss]ch|[Zz])ien$" => "$1[I]n";
		"(?<=pb)ien$" => "[&I]{EN}";
		"(?<!(^[Ww])|i)en$" => { "{EN}", "Eugen", "[Hh]omogen" };
		"(?<!^[Ww])em$" => "{EM}";
		"je" => "[J][E]";
		"iet" => "[I]t";
		"([^c])(haft)$" => "$1{HAFT}";
		"{ANT}{LICH}" => "en{TLICH}";
		"{ET}t" => "e[TT]";
	#EndSubSection(shortener,#>stage4)
	#BeginSubSection(normalizer,#>stage4)
		
		"{EN}(\||\\)" => "EN$1"; // correct endings: if they are inside words they are not applied
		"{EM}(\||\\)" => "EM$1";

		"ç" => "c";
		"[Aa]eo" => "äo";
		//"-\]" => "=]";
		//"\[-" => "[=";
		"=(i|au|eu|äu|ei)" => "|[-]\[0D-]$1";
		//"-(a|e|o|u)" => "|[-]\[0N-]$1"; // that's a weired rule ... it IS a weired rule and has to be disabled!
		"(?<!\|)\[-\]" => "|[-]\";
		//"=\]" => "-]";
		//"\[=" => "[-";
		"'(i|au|eu|äu|ei)" => "|[']\[0D-]$1";
		"'(a|e|o|u)" => "|[']\[0N-]$1";
		"'" => "|[']\";
		"th(?!of$)" => "t";
		"th(?!er)" => "t";
		"th(?!in)" => "t";
		"th(?!aft)" => "t";
		"aa" => "a";
		"ah(-?)(?=[lmnrstz])" => "a$1";
		"äh-?(?=[lmnrstz])" => "ä";
		"uh(?=[lmnrstz])" => "u";
		"o[oh](-)?([flmnrst])" => "o$1$2";
		"ö[oh](-)?([flmnrst])" => "ö$1$2";
		"ieh([tmn])" => "i$1";
		"e([eh])(-)?([flmnrst])" => "e$2$3";
		"äh([nrl])" => "ä$1";
		"öh-(?={LICH})" => "ö[H]"; // conserve h
		"öh-?(?![aeiouäöüAEIOU])" => "ö";
		"ih(-)?([r|n])" => "i$1$2";
		"äht" => "ät";
		"t-?z" => "z"; // conserve syllable?
		"ph" => "f";
		"ß" => "ss";
		"üh(-)?([lr])" => "ü$1$2";
		"uhr" => "ur";
		"ie" => "i";
		"ühr" => "ür";
		"\(" => "";
		"\)" => "";
		""" => "";
		"zz" => "z";
	#EndSubSection(normalizer)
	#BeginSubSection(bundler)
		"([aeiouäöüAEIOUÄÖÜ]\]?)ssch((\[|{)?[aeiouäöüAEIOUÄÖÜ])" => "$1[SS][CH]$2";
		"nd-?l" => "[ND@L3]";
		"schl" => "[SCHL]";
		"schm" => "[SCHM]";
		"schw" => "[SCHW]";
		"schr" => "[SCHR]";
		"(?<!n)ndr" => "[ND@R]";
		"sch" => "[SCH]";
		"(?<!m)mpfr" => "[MPFR]";
		"(?<!m)mpfl" => "[MPFL]";
		"(?<!m)mpf" => "[MPF]";
		"s-?t[\|-]?r" => "[STR]";
		"(?<!n)nkr" => "[NKR]";
		"(?<!n)nk-?l" => "[NKL]";
		"(?<!s)st-?l" => "[STL]";
		"(?<!s)sp-?l" => "[SPL]";
		"spr" => "[SPR]";
		"pfl" => "[PFL]";
		"pfr" => "[PFR]";
		"ch[-\|]?r" => "[CHR]";
		"chl" => "[CHL]";
		"pf" => "[PF]";
		"(ck|kk)" => "[CK]";
		"s-?s" => "[SS]";
		"n-?n" => "[NN]";
		"s-?t" => "[ST]";
		"^eins" => "[EI][N]s";
		"sp" => "[SP]";
		"n-?s" => "[NS]";
		"bl" => "[BL]";
		"cl" => "[CL]";
		"dl" => "[DL]";
		"fl" => "[FL]";
		"ngl" => "[NG@L3]";
		"^[Aa]n(-)?g(?!r)" => "AN-G"; // angestrengt: an is not recognized as a word
		"n-?g(?!r)" => "[NG]";
		"gl" => "[GL]";
		"kl" => "[KL]";
		"l-?l" => "[LL]";
		"ml" => "[ML]";
		"nl" => "[NL]";
		"pl" => "[PL]";
		"r-?l" => "[RL]";
		"sl" => "[SL]";
		"tl" => "[TL]";
		"vl" => "[VL]";
		"wl" => "[WL]";
		"xl" => "[XL]";
		"yl" => "[YL]";
		"zl" => "[ZL]";
		"br" => "[BR]";
		"cr" => "[CR]";
		"d[-\|]?r" => "[DR]";
		"fr" => "[FR]";
		"gr" => "[GR]";
		"kr" => "[KR]";
		"lr" => "[LR]";
		"mr" => "[MR]";
		"n[-\|]?r" => "[NR]"; // n+r even if two separate words!
		"pr" => "[PR]";
		"r-?r" => "[RR]";
		"sr" => "[SR]";
		"t-?t" => "[TT]";
		"tr" => "[TR]";
		"vr" => "[#VR]"; // use special name vor v+r, since [VR] can be confused with "vocal r"
		"wr" => "[WR]";
		"xr" => "[XR]";
		"yr" => "[YR]";
		"zr" => "[ZR]";
		"f-?f" => "[FF]";
		"m-?m" => "[MM]";
		"p-?p" => "[PP]";
		"ch" => "[CH]";
		"n-?d" => "[ND]";
		"n-?k" => { "[NK]", "[Aa]n-?kunft" };
		"zw" => "[ZW]";
		"au" => "[AU]";
		"(Ä|ä)u" => "[EU]";
		"[Ee]u" => "[EU]";
		"ei" => "[EI]";
		"ai" => "[EI]";
	#EndSubSection(bundler,=:std)
	#BeginSubSection(relancer1)	
		// relancer reconverts everything except shortings {..} and bundled tokens [..] to lower case
		"^(.*?)$" => "strtolower()";	// all to low
		//"({[a-zäöü&\/#@\+-]*?})" => "strtoupper()"; 	// {..} to upper again (this is easier...)
		//"(\[[a-zäöü\/#@\+-].*?\])" => "strtoupper()";
		"({.*?})" => "strtoupper()"; 	// {..} to upper again (this is easier...)
		"(\[.*?\])" => "strtoupper()";
	#EndSubSection(relancer1)
	#BeginSubSection(transcriptor)
		////////////////////////////////////////////////////////
		// 1st step: transform all single (lower case) tokens //
		// depending on context: insert directly printable    //
		// tokens wherever necessary
		////////////////////////////////////////////////////////

		// initial groups
		"^o" => "[0N-][O]";
		//"^r" => "[AR]"; // is done later
		"^äo" => "[0N-][Ä][&E][O]";
		"^ag" => "[0N-][A][G]";

		// vowel combinations
		"o-?a" => "[&O]A";
		"ä-?i" => "[Ä][&E][I]";
		"o-?e" => "[&O][E]";
		"i-?o$" => "[&I][&O]";

		// Aufstrich-t				
		"([bcdfghjklmnpqrvwxyz])(-)?t" => "$1$2[&T]";
		"({HIN})-?t" => "$1[&T]";
		"\[(CH|SCH)\]-?t" => "[$1][&T]";
		"\[(BB|DD|FF|GG|CK|LL|RR|MM|NN|PP|RR|SS|PF)\]-?t" => "[$1][&T]";

		
		//"\[&T\]e$" => "[&T][&E][-E]"; // hopefully not necessary any more ...
		"\[&T\]er" => "[&T][VR]";
		"\[&T\]{EN}$" => "[&T][&E][EN]";
		"\[&T\]{EM}$" => "[&T][&E][EM]";
		"\[EI\]$" => "[#W][-EI]";
		"\[&T\]\{HEIT\}" => "[&T][&E]{HEIT}";
		"\[EU\]({?)E" => "[EU][&E]$1E";
		"\[&T\]\{LICH\}" => "[&T-1][H]";
		"\[&T\]u\[NG\]" => "[TUNG]";
		"T}er" => "T}[VR]";
		"\[&T\]\i-?g" => "[&T-1][G]";
		"\[&T\]{ET}" => "[&T][&E][ET3/4]";
		"\[&T\]es" => "[&TES]";
		"\[&T\]e" => "[&T][&E][-E]";
		"\[&T\]a" => "[&T][&E]A";
		"\[&T\]\[?o\]?$" => "[&T&O]";
		"\[&T\]o$" => "[&T][&E]O";
		"\[&T\]u([aeiouäöü])" => "[A][&T&U]$1";
		"\[&T\]u" => "[&T][&E]U";
		"\[&T\]\[?i\]?$" => "[&T&I]";
		"\[&T\]i" => "[&T][&E]I";
		"erer$" => "[VR][#N][VR]";
		"eres$" => "[VR][E][S]";
		"([aeiouäöü])r" => "$1[VR]";
		//"([AEIOUÄÖÜ])R(?![D?}\]])" => "$1[VR]";
		//"{DU\[VR\]CH}" => "{DURCH}"; // du bricolage ...
		"(\[^@\])r" => "$1[AR]";
		"}r" => "}[AR]";
		"^s" => "[0n-][S]";
		"^n" => "[0n-][N]";
		"u([aeiouäöü])" => "[#NS][&U]$1";
		"oi" => "[&O][I]";
		"^a($|\|)" => "[0N-][A][&A]$1";
		"a($|\|)" => "[A][&A]$1";
		"{ET}e$" => "[ET][&E][-E]";
		"{HEIT}\[ET\]" => "{HEIT}[&E][ET]";
		"\[ET3\/4\]e$" => "[ET3/4][&E][-E]";
		"{HEIT}e" => "{HEIT}[&E][-E]"; 
		"e$" => "[-E]";
		"i($|\|)" => "[#N][&I]$1";
		"o($|\|)" => "[#N][&O]$1";
		"u$" => "[#NS][&U]";
		"ä$" => "[#WS][&A]";
		"ö$" => "[#W][&O]";
		"ü$" => "[#WS][&U]";
		"(?<!\])\[#(N|NS|WS|W|WS)\]" => "[0N-][#3][#$1]"; // can't start with distance only => add dummy token
		"\[EU\]$" => "[EU][&E]";
		"\[AU\]$" => "[AU][&E]";
		"^a" => "[0N-][A]";
		"^e" => "[0N-][E]";
		"^i\[(S?CH|ZW?)" => "[0N-][I][$1";
		"^iz" => "[0N-][I][Z]";
		"^i" => "[0D-][I]";
		"^o" => "[0N-][O]";
		"^u" => "[0N-][U]";
		"^ö" => "[0N-][#WD]";
		"^ä" => "[0N-][#WS]";
		"^ü" => "[0N-][#WDS]";
		"^\[EU\]\[CH\]" => "[0N-][EU][CH]";
		"^\[EI\]\[CH\]" => "[0N-][EI][CH]";
		"^\[AU\]\[CH\]" => "[0N-][AU][CH]";
		"^\[AU\]" => "[0D-][AU]";
		"^\[EU\]" => "[0D-][EU]";
		"^\[EI\](?!-?\[(CH|SCHW?|ZW?)\])" => "[0D-][EI]";
		"^\[EI\](?=-?\[(CH|SCHW?|ZW?)\])" => "[0N-][EI]";
		"öo" => "[#W][&O][O]";
		"^a" => "[0N-]A";
		"a" => "A";
		"e" => "E";
		"i" => "I";
		"o" => "O";
		"u" => "U";
		"ä" => "Ä";
		"ö" => "Ö";
		"ü" => "Ü";
		"\[AU\]-?({?E)" => "[AU][&E]$1";
		"b" => "B";
		"c" => "C";
		"d" => "D";
		"f" => "F";
		"g" => "G";
		"h" => "H";
		"j" => "J";
		"k" => "K";
		"l" => "L";
		"m" => "M";
		"n" => "N";
		"p" => "P";
		"q" => "Q";
		"(^|\+|\|])r" => "$1[AR]";
		"r" => "[VR]";
		"s" => "S";
		"t" => "T";
		"v" => "V";
		"w" => "W";
		"x" => "X";
		"y" => "Y";
		"z" => "Z";

		
	#EndSubSection(transcriptor)
	#BeginSubSection(separator)
		// separates two words in one
		// there must be a possibility to disable this function manually (i.e. via input form)!

		"\[&T\]\|(\[?(M)\]?)" => "[&T]\\$1"; // write separatedly (2 words)
		"\[&T\](\[?(M)\]?)" => "[&T-1]$1";
		//"E\|([ABCDFGHIJKLMNPQRSTVWXZ])" => "[-E]\\$1"; // separate (2 words)
		//"(\[&T\]\[VR\]-?)\[&T\]\[&E\]" => "$1[T]"; // can't do that for Winterthur (if not recognized as two words!)

	#EndSubSection(separator)
	#BeginSubSection(rewriter)
		// at this point, all characters are upper case
		// some token combinations need to be rewritten
		// that's done in this part (was first part of
		// transcriptor

		///////////////////////////////////////////////////////
		// 2nd step: rewrite upper case tokens if necessary  //
		///////////////////////////////////////////////////////

		
		//"\[(CH|LL)\]T" => "[$1][&T]";
		"{VOR}(\||\+)?\[AR\]" => "[VORAR]";
		"^{ER}\[AR\]" => "[0N-][#N][VR+AR]"; 
		"{ER}\[AR\]" => "[#N][VR+AR]"; 
		"{ER}T" => "{ER}[&T]";
		"\[NK\]T" => "[NK][&T]";
		"\[ND\]T" => "[ND][&T]";
		"\[NG\]T" => "[NG][&T]";
		"\[#VR\]" => "[V@R6]";
		"\[GR\]" => "[G@R]";
		"\[CHR\]" => "[CH@R]";
		"\[KR\]" => "[K@R]";
		"\[TR\]]" => "[T@R]";
		"\[NKR\]" => "[NK@R]";
		"\[SCHR\]" => "[SCH@R]";
		"\[STR\]" => "[ST@R]";
		"\[LL\]" => "[L@L]";
		"\[BL\]" => "[B@L]";
		"\[ML\]" => "[M@L]";
		"\[FL\]" => "[F@L]";
		"\[PL\]" => "[P@L]";
		"\[PFL\]" => "[PF@L]";
		"\[VL\]" => "[V@L]";
		"\[WL\]" => "[W@L]";
		"(?<=([bcdfghjklmnpqrsvwxyz])|(\[CH\]))\[TL\]" => "[&T@L3]";
		"\[TL\]" => "[T@L3]";
		"([bcdfghjklmnpqrvwxyzs])\[T" => "$1][&T][";
		"\[TT\]r" => "[TT@R]";
		"\[TR\]" => "[T@R]";
		"\[DR\]" => "[D@R]";
		"\[CK\]l" => "[CK@L]";
		"\[NKL\]" => "[NK@L3]";
		"\[GNL\]" => "[NG@L3]";
		"\[NR\]" => "[N@R6]";
		"\[NL\]" => "[N@L]";
		"\[KL\]" => "[K@L3]";
		"\[ZL\]" => "[Z@L3]";
		"\[SCHL\]" => "[SCH@L3]";
		"\[CHL\]" => "[CH@L3]";
		"\[BR\]" => "[B@R6]";
		"\[SPL\]" => "[SP@L]";
		"\[FR\]" => "[F@R6]";
		"\[LR\]" => "[L@R6]";
		"\[MR\]" => "[M@R6]";
		"\[SPR\]" => "[SP@R6]";
		"\[PR\]" => "[P@R6]";
		"\[PFR\]" => "[PF@R6]";
		"\[WR\]" => "[WR@R6]";
		"\[RL\]" => "[VR@L]";
		"\[GL\]" => "[G@L3]";
		"\[SR\]" => "[S][AR]";
		"\[DL\]" => "[D@L3]";
		"\[STL\]" => "[ST@L3]";
		"\[SL\]" => "s[@L]";

		"(\[VR@L\])\[?I\]?(\[?N\]?)" => "$1$2";
		"^\[EI\]$" => "[0D-][EI][&E]";
		"&T]{EN}" => "&T][&E][EN]";
		"\[EU\]\[-E\]" => "[EU][&E][-E]";
		"\[EU\]\[&E\]E\[VR\]U\[NG\]" => "[EU][&E][VR]U[NG]";
		"\[VR\]{AUS}" => "[VR]{-AUS}";
		"\[VR\]\|?\[VR\]" => "[VR+AR]";
		"^{HEIT}" => "[0N-]{HEIT}";
		"I-?U" => "[&I]U";
		"I-?E" => "[&I]E";
		"I-?A" => "[&I]A";
		"I-?O([^N])" => "[&I]O$1";
		"I-?I" => "[&I]I";
		"O-?U" => "[&O]U";
		"\[EU\]-?E" => "[EU][&E]";
		"E-?\[-E\]" => "[#N][-E]";
		"\[E\]$" => "[-E]";
		"E-?{EN}" => "E[&E]{EN}";
		"\[EI\]-?{HEIT}" => "[EI][&E]{HEIT}";
		"\[AU\]-?I" => "[AU][&E]I";
		"(I|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[SCH\]" => "$1$2[^SCH]";
		"(I|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[SCHW\]" => "$1$2[^SCHW]";
		"(I|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[SCHM\]" => "$1$2[^SCHM]";
		"(I|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[ZW\]" => "$1$2[^ZW]";
		"(I|\[EI\]|\[AU\]|\[EU\])(-|\|?)Z" => "$1$2[^Z]";
		"(I|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[CH\]" => "$1$2[^CH]";
		//"\[&T\]\[?B\]?" => "[&TB]"; // hopefully not necessary any more
		"\[&T\]\[?B\]?" => "[&T-1][B]";
		"\[&T\]\[?L\]?(OS)" => "{&T-L}$1";
		"\[&T\]\[NG\]" => "[&TNG]";
		"\[&T\]\[NS\]" => "[&TNS]";
		"\[&T\]\[?ST\]?" => "[&TST]";
		"\[&T\]\[?CH\]?" => "[&T^CH]";
		"\[&T\]\[?C\]?" => "[&TC]";
		"\[&T\]\[?D\]?" => "[&TD]";
		"\[&T\]\[?G\]?" => "[&TG]";
		//"\[&T\]\[?H\]?" => "[&TH]";
		"\[&T\]\[?J\]?" => "[&TJ]";
		"\[&T\]\[?ALL\]?" => "[&TALL]";
		"\[&T\]\[?M\]?" => "[&TM]";
		"\[&T\]\[?W\]?" => "[&TW]";
		"\[&T\]\[?X\]?" => "[&TX]";
		"\[&T\]\[?Y\]?" => "[&TY]";
		//"\[&T\]\[?&E\]?" => "[&T&E]"; // hopefully not necessary any more
		"\[&T&E\]E" => "[&T&E][-E]";
		"\[&T\]{HAFT}" => "[&THAFT]";
		"{HEIT}{LICH}" => "[&EITH]";
		"\[&T\]{SCHAFT}" => "[&TSCHAFT]";
		"{HEIT}{SCHAFT}" => "[&EITSCHAFT]";
		"\[&T\]{ION}" => "[&TION]";
		"\[&T\](\[?[AEIOU]\]?)" => "[&T][&E]$1"; 	//"[&T&E]$1";
		"{&TALL}" => "[&TALL]";
		"\[&T\]\[?N\]?" => "[&TN]";
		"\[&T\]\[?VR\]?" => "[&TVR]";
		"\[&T\]\[?R\]?" => "[&TAR5]";
		"\[&TL\]" => "[&T@L3]";
		"\[&T\]\[L\]" => "[&T@L3]";
		"{&T-L}" => "[&TL]";
		//"\[&T\]\[SCH\]" => "[&T^SCH]";
		//"\[&T\]\[?S\]?" => "[&TS]";
		"\[&T\]\[?U\]?" => "[&TU]";
		//"\[&T\]\[?SCH\]?" => "[&T^SCH]";
		"\[&T\]\[?Z\]?" => "[&T^Z]";
		"\[&T\]\[F@L\]" => "[&TF@L]";
		"\[&T\]F" => "[&TF]";
		"\[&T\]\[?K\]?" => "[&TK]";
		"\[&T\]\[?P\]?" => "[&TP]";
		"\[&T\]\[?Q\]?" => "[&TQ]";
		"\[&T\]\[?V\]?" => "[&TV]";
		"\[&T\]\[?NK\]?" => "[&TNK]";
		"\[&T\]\[?PF\]?" => "[&TPF]";
		"\[&T\]\[?SP\]?" => "[&TSP]";
		"\[&T\]\[?SCHW\]?" => "[&TSCHW]";
		"\[&T\]\[?ZW\]?" => "[&TZW]";
		"\[&T\]Ä" => "[&T&E]Ä";
		"\[&T\]Ü" => "[&T&E]Ü";
		"\[&T\]\[#W\]\[-E\]" => "[&T&E][#W][-E]";
		"{HEIT}\[?B\]?" => "[&EITB]";
		"{HEIT}\[?L\]?" => "[&EITL]";
		"{HEIT}\[NG\]" => "[&EITNG]";
		"{HEIT}\[NS\]" => "[&EITNS]";
		"{HEIT}\[?ST\]?" => "[&EITST]";
		"{HEIT}\[?SCH\]?" => "[&EITSCH]";
		"{HEIT}\[?CH\]?" => "[&EITCH]";
		"{HEIT}\[?C\]?" => "[&EITC]";
		"{HEIT}\[?D\]?" => "[&EITD]";
		"{HEIT}\[?G\]?" => "[&EITG]";
		"{HEIT}\[?H\]?" => "[&EITH]";
		"{HEIT}\[?J\]?" => "[&EITJ]";
		"{HEIT}\[?ALL\]?" => "[&EITALL]";
		"{HEIT}\[?M\]?" => "[&EITM]";
		"{HEIT}\[?W\]?" => "[&EITW]";
		"{HEIT}\[?X\]?" => "[&EITX]";
		"{HEIT}\[?Y\]?" => "[&EITY]";
		//"{HEIT}\[?&E\]?" => "[&EIT&E]";
		"{HEIT}\[?N\]?" => "[&EITN]";
		"{HEIT}\[?VR\]?" => "[&EITVR]";
		"{HEIT}\[?S\]?" => "[&EITS]";
		//"{HEIT}\[?U\]?" => "[&EITU]";
		"{HEIT}\[?O\]?" => "[&EITO]";
		"{HEIT}\[?Z\]?" => "[&EITZ]";
		"{HEIT}\[?F\]?" => "[&EITF]";
		"{HEIT}\[?K\]?" => "[&EITK]";
		"{HEIT}\[?P\]?" => "[&EITP]";
		"{HEIT}\[?Q\]?" => "[&EITQ]";
		"{HEIT}\[?V\]?" => "[&EITV]";
		"{HEIT}\[?NK\]?" => "[&EITNK]";
		"{HEIT}\[?PF\]?" => "[&EITPF]";
		"{HEIT}\[?SP\]?" => "[&EITSP]";
		"{HEIT}\[?SCHW\]?" => "[&EITSCHW]";
		"{HEIT}\[?ZW\]?" => "[&EITZW]";
		"{HEIT}IG" => "{HEIT-1}[G]";
		"{TUM}" => "[A][&TM]";
		"\[TLICH\]T" => "[TLICH][&T]";
		//"\[TLICH\]" => "[&TH]";
		"\[&T\](\[-E[MN]?\])" => "[&T][&E]$1";
		"\[&EITNG\]\[SP\]" => "[&EITNG][S][P]";
		"\[AU\]\[-E\]" => "[AU][&E][-E]";
		"\[EI\]{ER}" => "[EI][&E]{ER}";
		"\[AU\]U" => "[AU][&E]U";
		"\[O\]U" => "[&O]U";
		"{HEIT}U\[NG\]" => "{HEIT-1}[#NS][NG]"; 
		"\[EU\]-?{LICH}" => "[EU][&E]{LICH}"; 
	#EndSubSection(rewriter)
	#BeginSubSection(substituter)
		// trickier ones
		"\[&T\]{ER}" => "[&T][VR]";  // hopefully better this way
		"\[&T\]{ALL}" => "{&TALL}";
		//"{TUM}\[VR\]" => "{TUM}{VR}";	//??
		//"{TUM}{VR}" => "{TUM}[VR]"; //??
		"R}t" => "R}[&T]";
		"^\{ANT\}" => "[0N-][#N]{ANT}";
		"{HEIT}{ET}" => "{HEIT}[&E][ET3/4]";
		"{ET}(e[^s]|{EN}|{EM})" => "{ET}[&E]$1";
		"\[EI\]t" => "[EI]T";

		//"{VOR}r" => "[VOR+AR]";
		//"{ER}r" => "[VR+AR]";
		"{DEM}n" => "[^DEM]N";
		"{DE(M|N)}j" => "[^^DE$1]J";
		"{DE(M|N)}\[j\]" => "[^^DE$1][J]";
		"{DE(M|N)}g" => "[^^DE$1]G";
		"{DE(M|N)}{G" => "[^^DE$1]{G";
		"{DE(M|N)}{GE}" => "[^^DE$1]{GE}";
		"{DE(M|N)}z" => "[^^DE$1]Z";
		"{DE(M|N)}{ZU}" => "[^^DE$1]{ZU}";
		"o{HEIT}" => "[&O]{HEIT}";
		"\[AU\]{HEIT}" => "[AU][&E]{HEIT}";
		"{SCHAFT}ler(n|in(nen)?)?$" => "{SCHAFT}[&L]{-ER}$1";
		"{TUM}er(s|in|innen)?$" => "{TUM}[VR]$1";
		"{HEIT}({EN}|{EM})" => "{HEIT}[&E]$1";
		"{HEIT}er" => "{HEIT}[VR]";
		"{HEIT}el" => "{HEIT}[&E][-E]L";
		"{HEIT}e$" => "{HEIT}[&E][-E]";
		"{HEIT}es" => "{&EITES}";
		"{HEIT}e\[NS\]" => "[&EITNS]";
		"{HEIT}ig" => "[&EITG]";
		"{HEIT}u\[NG\]" => "[A][&EITNG]";
		"{HEIT}e" => "{HEIT}[&E]e";

		"^\{ER\}" => "[0N-][#N][VR]";
		//"\[&T\]{ER}" => "[&TVR]"; // even 2x ...
		// trivial ones
		"{DASS?}" => "[0N-][#NS][S]";
		"{HEIT}{ER}" => "[&EITVR]";
		"{ER}" => "[E][VR]";
		"{BE}" => "[B]";
		"{GE}" => "[G]";
		"{UND}" => "[#NS][&U]";
		"{DI}" => "[D]";
		"{MIT}" => "[M]";
		"{VON}" => "[V]";
		"{FÜR}" => "[F]";
		"{LICH}" => "[H]";
		"{ALS}" => "[L]";
		"{CON}" => "[C]";
		"{ES}" => "[0N-][#N][-E]";
		"{WENN}" => "[NN]";
		"{WIR}" => "[W]";
		"{ZU}" => "[Z]";
		"{DER}" => "[VR]";
		"{NICHT}" => "[NICHT]";
		"{HEIT}ig" => "[#W][TIG]";
		"\|{VER}" => "[EN][AR]";
		"^{VER}" => "$1[0N-][EN][AR]";
		"{VER}" => "[EN][AR]";
		"{DEM}" => "[0N-][EM]";
		"{DEN}" => "[0N-][EN]";
		"{SI}" => "[0N-][#N][S][/I]";
		"{UN}" => "[#NS][&U]";
		"{IN}" => "[IN]";
		"{WAR}" => "[0U-][#0S][&A]";
		"{WÄR}" => "[0U-][#WS][&A]";
		"{ET}" => "[ET]";
		"{HAT}" => "[HAT]";
		"{DA}" => "[DA]";
		"{DES}" => "[0N-][S]";
		"{SIND}" => "[SIND]";
		//"{DIS}" => "[0N-][#0][I][S]";
		"{ZER}" => "[Z@R]";
		"{ANTI}" => "[0N-][ANTI]";
		"^{UNTER}" => "[0N-][N@R6]";
		"{UNTER}" => "[N@R6]";
		"^{ÜBER}" => "[0N-][#WS][&U]";
		"{ÜBER}" => "[#WS][&U]";
		"{WI}" => "[W][/I]";
		"{WIDER}" => "[W@R6]";
		"{SOLCH}" => "[SOLCH]";
		"{WELCH}" => "[CH]";
		"{HEIT}{HIN}" => "[&EITH][#0][N]";
		"{HIN}" => "[H][#0][N]";
		"\[&T\]{EN}$" => "[&T][&E][EN]";
		"\[&T\]{EM}$" => "[&T][&E][EM]";
		"\[&T\]\[#N\]\[VR\]$" => "[&T][VR]";
		"{-ER}" => "[VR]";
		"{USW}" => "[A][&U][SS]";
		"{USF}" => "[A][&U][SS][FORT]";
		"{GEHABT}" => "[G][&T]";
		"{HAB}T" => "[HAB][&T]";
		"{HAB}" => "[HAB]";
		"{ZUSAMMEN}" => "[Z][A][S]";
		"{-ER}" => "[VR]";
		//"{AN}" => "[0N-][A][N]";
	#EndSubSection(substituter)
	#BeginSubSection(separator)
		// separator decides wether or not a word should be written separatedly
		"\[&EITS\](\|)\[?T\]?" => "[&EITS][#5]]\\T";
	#EndSubSection(separator)
	#BeginSubSection(relancer2)	
		// relancer reconverts everything except shortings {..} and bundled tokens [..] to lower case
		"^(.*?)$" => "strtolower()";	// all to low
		//"({[a-zäöü&\/#@\+-]*?})" => "strtoupper()"; 	// {..} to upper again (this is easier...)
		//"(\[[a-zäöü\/#@\+-].*?\])" => "strtoupper()";
		//"({.*?})" => "strtoupper()"; 	// {..} to upper again (this is easier...)
		//"(\[.*?\])" => "strtoupper()";
		"\|" => "";  // filter out all | from linguistical analysis (not needed any more, spacer needs them removed for correct spacing)
		"-\]" => "#=#=#]";	// the same goes for - (this one is trickier to get rid off ...)
		"\[-" => "[#=#=#";	// first combination of - with brackets must be rewritten
		"-(?![0-9])" => "";	// - can now be deleted (filter out [T-1] for example ...)
		"#=#=#" => "-";		// this still might have interferences (watch out if that occurs)
		"\[#=#\]" => "[=]";
		"\+" => "";  // eliminate morphem boundaries before spacer
	#EndSubSection(relancer2)
	#BeginSubSection(spacer)
		
		// at this point all tokens are lower case 
		// single tokens can be inside [] or not
		// multiple tokens are inside []
		// all abbreviations have been transformed to single or multiple tokens (by preceeding subsituter)
			
		// apparently, there are still some accolades (not substituted by substituter because the represent a token of their own => replace accolades by brackets
		"{" => "[";
		"}" => "]";		

		// make sure single tokens ARE inside brackets [] (no confusion between f and ff!)
		"(\[.*?\])" => "strtoupper()";
		"(?<!\[)([a-z]|ä|ö|ü)" => "[$1]";
		"(\[.*?\])" => "strtolower()";	
		
		
		// spacer rules (generated with regex_helper.php

// case: aa
"(\[(0n-|l@l|b@l|m@l|f@l|p@l|pf@l|v@l|sp@l|w@l|b@r6|sp@r6|m@r6|p@r6|pf@r6|n@r6|n@l|l@r6|rr|ff|mm|nn|pp|pf|sp|ant|&e|ss|un|schaft|&a|&u|&o|&i|all|hab|haft|auf|aus|des|bei|selb|wo|fort|[blmnpvwfxy])\])(\[(a|u|o|i|au|#n|#ns)\])?(\[(d@r|nd@r|t@r|st@r|l@l|b@l|f@l|p@l|pf@l|v@l|w@l|t@l3|d@l3|nd@l3|st@l3|k@l3|b@r6|f@r6|p@r6|pf@r6|v@r6|w@r6|da@r|n@r6|n@l|vr@l|l@r6|tt@r|pf|st|rr|nd|vr|ff|pp|tt|all|hab|haft|auf|aus|des|bei|wo|selb|da|vor|inter|ion|[bdcfwlxptvqhns])\])" => "$1[#3]$3$5";
// case: ab
"(\[(0n-|l@l|b@l|m@l|f@l|p@l|pf@l|v@l|sp@l|w@l|b@r6|sp@r6|m@r6|p@r6|pf@r6|n@r6|n@l|l@r6|rr|ff|mm|nn|pp|pf|sp|ant|&e|ss|un|schaft|&a|&u|&o|&i|all|hab|haft|auf|aus|des|bei|selb|wo|fort|[blmnpvwfxy])\])(\[(a|u|o|i|au|#n|#ns)\])?(\[(g@r|k@r|ch@r|nk@r|sch@r|g@l3|m@l|sp@l|ng@l3|nk@l3|k@l3|z@l3|sch@l3|ch@l3|sp@r6|m@r6|z@r|z@l3|ck@l|&a|&u|&i|&e|&o|-e|ng|sch|nk|schm|mm|nn|ss|ch|mpf|sp|ns|zw|schw|ck|gegen|hat|vr|durch|solch|[jzgmyk])\])" => "$1[#0]$3$5";
// case: ba
"(\[(vr@l|d@r|nd@r|t@r|g@r|k@r|ch@r|nk@r|sch@r|st@r|l@l|g@l3|t@l3|ng@l3|d@l3|nd@l3|st@l3|nk@l3|k@l3|z@l3|sch@l3|f@r6|ch@l3|v@r6|w@r6|z@r|z@l3|da@r|ck@l|l@r6|tt@r|mpf|schm|zw|tt|nd|st|in|ng|ns|nk|ur|sch|schw|gegen|hat|da|vr|ar|vor|inter|rück|ion|durch|ch|\^ch|ck|solch|[gkjcdstqzh])\])(\[(a|u|o|i|au|#n|#ns)\])?(\[(d@r|nd@r|t@r|st@r|l@l|b@l|f@l|p@l|pf@l|v@l|w@l|t@l3|d@l3|nd@l3|st@l3|k@l3|b@r6|f@r6|p@r6|pf@r6|v@r6|w@r6|da@r|n@r6|n@l|vr@l|l@r6|tt@r|pf|st|rr|nd|vr|ff|pp|tt|all|hab|haft|auf|aus|des|bei|wo|selb|da|vor|inter|ion|[bdcfwlxptvqhns])\])" => "$1[#3]$3$5";
// case: bb
"(\[(vr@l|d@r|nd@r|t@r|g@r|k@r|ch@r|nk@r|sch@r|st@r|l@l|g@l3|t@l3|ng@l3|d@l3|nd@l3|st@l3|nk@l3|k@l3|z@l3|sch@l3|f@r6|ch@l3|v@r6|w@r6|z@r|z@l3|da@r|ck@l|l@r6|tt@r|mpf|schm|zw|tt|nd|st|in|ng|ns|nk|ur|sch|schw|gegen|hat|da|vr|ar|vor|inter|rück|ion|durch|ch|\^ch|ck|solch|[gkjcdstqzh])\])(\[(a|u|o|i|au|#n|#ns)\])?(\[(g@r|k@r|ch@r|nk@r|sch@r|g@l3|m@l|sp@l|ng@l3|nk@l3|k@l3|z@l3|sch@l3|ch@l3|sp@r6|m@r6|z@r|z@l3|ck@l|&a|&u|&i|&e|&o|-e|ng|sch|nk|schm|mm|nn|ss|ch|mpf|sp|ns|zw|schw|ck|gegen|hat|vr|durch|solch|[jzgmyk])\])" => "$1[#3]$3$5";

		// additional space for i, au
		//"\[(i|au)\](?!\[#)" => "[$1][#3]";
		"\[&e\]\[#3\]\[o\]" => "[&E][O]";   // test: recorrect certain distances
		"\[vr\]\[#3\]\[-e\]" => "[VR][#3-][-E]"; // just test if negative spacing is possible
		"\[#6\](\[?i\]?\[?n\]?)" => "$1";

		"^(.*?)$" => "strtoupper()";	// all to upper

	#EndSubSection(spacer,=:prt)
#EndSection(rules)
