#BeginSection(rules)
	#BeginSubSection(global,#>stage0)
		// global replacements in the whole text
		//"(?<!\[)=" => "[#=#]\"; // in packer before (doesn't work because of inline option tags => choose another symbol for suffix boundary!)
		"&hellip;" => "..."; // ellipsis
		"…" => "...";
		"–" => "[~~]"; // blocks calculation in layouted mode
 		" &ndash; " => " [~~] "; // Gedankenstrich
		"&ndash;" => "="; // blocks calculation in layouted mode
		"&rs?aquo;" => "«"; 
		"&ls?aquo;" => "»";
		"›" => "»";
		"‹" => "«";
		"ß" => "ss";
		"&szlig;" => "ss";
		"«" => """; //"|[#Q#][#5]]\\|"; // originally in filter but can't be done in stage3!
		"»" => """; //"|[#5][#Q#]|";	
	#EndSubSection(global,#>stage1)
	#BeginSubSection(corrector,#>stage2)
		// some words are erroneously separated by LING
		// e.g.: Au|gen, wie|der, sie|ben ...
		// correct that by remerging them here in stage2 (where words can be treated entirely before stage3)
	#EndSubSection(corrector,#>stage3)
	#BeginSubSection(splitter1,#>stage3)
		// check if word contains more then 1 upper case
		// mark it with #£# to have a branch condition
		"(?<!#acronym#)([A-Z]|Ä|Ö|Ü)([A-Z]|Ä|Ö|Ü)" => "#acronym#$1$2";
	#EndSubSection(splitter1,!>acronymator,=>packer)
	#BeginSubSection(acronymator)
		// filter marker #acronym# out again
		"#acronym#" => "";
		//"([A-Z]|Ä|Ö|Ü)" => "strtolower()";
		// only transform upper case of potential 2nd word (suppose acronym is 1st word ...)
		"(=(?:[A-Z]|Ä|Ö|Ü))" => "strtolower()";
		"(?<!\|)=" => "|=\\"; // mark word as 2 words
		"(?<!\[)=" => "[=]";	// necessary because of packer
		// now only transform upper case words (from acronym)
		"(?<!\[)([A-Z]|Ä|Ö|Ü)" => "[$1]";
		"\[A\]" => "[#NS][&A]";
		"\[E\]" => "[E][&E]";
		"\[I\]" => "[#N][&I]";
		"\[O\]" => "[#N][&O]";
		"\[U\]" => "[#NS][&U]";
		"\[Ä\]" => "[#WS][&A]";
		"\[Ö\]" => "[E][&O]";
		"\[Ü\]" => "[#WS][&U]";
		//"^\[E\]" => "[0N-][E]";  // not sure if that should be done here
		"^(\[[ns]\])" => "[0N-]$1"; // idem
		//"([a-z])" => "strtoupper()";  // leave other tokens as untreated (will be processed normally)
	#EndSubSection(acronymater)
	#BeginSubSection(packer)
		// filter out all markes from acronymator
		// some shorthand tokens use special chars (like -#+=/ etc.) in their definition
		// this can lead to confusions in the transcriptor: e.g. - might be the character - 
		// (which has to be drawn as such) or a part of a token definition (like [0N-]
		// in order to avoid that, "packer" bundles those characters adding brackets []
		// later the transcriptor converts them back into normal characters
		"(?<!\[)=" => "[=]\";
	#EndSubSection(packer)
	#BeginSubSection(decapitalizer)
		"([A-Z])" => "strtolower()";
	#EndSubSection(decapitalizer)
	#BeginSubSection(shortener)

		"^wa-?r(st|en|et)?$" => { "{WAR}$1", "[Ww]a-?rum" };
		"^wä-?r(e?st|e|en|et|t)?$" => "{WÄR}$1";
		
		"(i-)?tä-?t" => "{HEIT}";
		"ge-?gen" => "{GEGEN}";
		
		"zu(\+|-)rück(\+|-)" => "{ZURÜCK}+";
		"^zu(\+|-)rück$" => "{ZURÜCK}+";
		
		"^in-ter\+" => "{INTER}+";
		"(\+)in-ter\+" => "$1{INTER}+";

		"(\+)dem$" => "$1{DEM}";
		"^dem$" => "{DEM}";
		"(\+)den$" => "$1{DEN}";
		"^den$" => "{DEN}";
		
		"^aus$" => "{AUS}";
		"aus(\+|#)" => "{AUS}$1";
		"#aus$" => "#{AUS}";

		"ur\+" => "{UR}+";

		"#li-?ch" => "{LICH}";
		"-li-?ch((-?st)?e[rnsm]?)?$" => "{LICH}$1";

		"ent\+" => "{ANT}+";

		"un-?te-?r" => "{UNTER}";
		"{UNTER}-" => "{UNTER}+";

		"un\+" => "{UN}+"; 

		"^wie?-?der$" => "{WIDER}";
		"wie?-?der(\+|#|{)" => "{WIDER}$1";
		"(#|\+)wie?-?der" => "$1{WIDER}";

		"^in$" => "{IN}";
		"^in(\+|#)" => "{IN}$1";
		"(\+|#)in(\+|#)" => "$1{IN}$2";
		"(\+|#)in$" => "$1{IN}";

		"^sich$" => "{SICH}";

		"^als$" => "{ALS}"; 
		
		"((?:-)(?:.*?))(e-?r)(e?[rnms]?)?$" => "$1{-ER}$3"; // use - to detect preceeding syllable

		"^es$" => "{ES}";

		"zu(\+|-|\|)sam-men" => "{ZUSAMMEN}"; 

		"ver(\+)" => "{VER}$1";
		"ver(-)" => { "{VER}$1", "Ver-?si-?on" }; // can produce wrong results

		"^all$" => "{ALL}";
		"\+all$" => "+{ALL}";

		"^wie([+#])" => "{WI}$1";
		"([+#])wie$" => "+{WI}";

		"^so(\+)" => "{SO}$1";
		"([#-])so$" => "$1{SO}";
		"^so$" => "{SO}";
		
		"un-?ter" => "{UNTER}";
		"^er\+" => "{ER}";
		"a-?ber" => "a-b{-ER}"; // frequent word, so include it as a rule
		
		"(\+)sel-?b" => "$1{SELB}";
		"^sel-?b" => "{SELB}";

		"ant\+" => "{ANT}+";
		"ant-" => "{ANT}";

		"an\+" => "{AN}+";

		"((?:.*?))en$" => "$1{EN}";
		"((?:.*?))em$" => "$1{EM}";

		"^was$" => "{WAS}";
		"(\||#)was$" => "$1{WAS}";
		
		"[#-]?[hk]?ei-?t" => "{HEIT}";
		
		"#li-?ch" => "{H}";
		
		"zu(\+|#)" => "{ZU}$1";
		"zu$" => "{ZU}";
		
		"^auf$" => "{AUF}";
		"auf\+" => "{AUF}+";
		"(\+|\|)auf$" => "$1{AUF}";

		"ge\+" => "{GE}";
		"(^|\|)wo(\||#|$)" => "$1{WO}$2";
		"wil$" => "WIL";
		"los(igkeit)?$" => "Los$1";
		"ei-?en" => "[EI][&E]{EN}";
		"ei-?{EN}" => "[EI][&E]{EN}";
		
		"i-e([mn])$" => { "[&I]-e$1", "schien" };
		"ietät" => "[&I]{HEIT}";
		"t(u|ü)mlich" => "{TUM}{LICH}";
		"^[Bb]erück" => { "{BE}{RÜCK}", "[Bb]erück[et]" };
		"h?eit-?li-?ch" => "{HEIT}{LICH}";
		"h?ei-?tig" => "{HEIT}ig";
		"ei-?tens" => "{HEIT}ens";
		"[kh]?eits" => "{HEIT}s";
		"iet$" => "[I]T";
		"solch" => "{SOLCH}";
		"^und$" => "{UND}";
		"usw\." => "{USW\.}";
		"viel-?leicht" => "{VILLEICHT}";
		"^von$" => "{VON}";
		"wel-?ch" => "{WELCH}";
		"wenn" => "{WENN}";
		"^wer-?d" => "{WERD}";
		"^wie$" => "{WI}";
		"wird" => "{WIRD}";
		"vor(?!})" => "{VOR}";
		"fort" => "{FORT}";
		"eiht" => "eit";
		"(?<!sc)haft(e|en|es)?" => "{HAFT}$1";
		"ge-?gen" => "{GEGEN}";
		"ndwo$" => "nd{WO}";
		"(?<!f)all(e[n|m|s]?)$" => "{ALL}$1";
		"^al-?l" => "{ALL}";
		"(\[^a-z\])all" => "{$1ALL}";
		"^auch$" => "{AUCH}";
		
		"bei(\+)" => "{BEI}$1";
		"^bei$" => "{BEI}";
		"(\+|#)bei$" => "$1{BEI}";
		
		"^dar\+" => "{DA@R}";
		"dass?(?!t)" => "{DASS}";
		"^dem" => "{DEM}";
		"^denn" => "de[NN]";
		"^den$" => "{DEN}";
		"^den-(?!k)" => "{DEN}";
		"^de-nen" => "{DEN}[O][&E]{EN}"; // probably the only case where {EN} can follow {DEN} => add &E here directly
		//"\|den-" => "{DEN}";
		"^des(?![p-])" => "{DES}";
		"^die-?s(e[rsnm]?)?" => "{DIS}$1";
		"dies$" => { "{DIS}", ".*[Pp]aradies" };
		"^die$" => "{DI}";
		"durch" => "{DURCH}";
		"fürch" => "Fürch";
		"für(?!st)" => "{FÜR}";
		"ge-?habt" => "{GEHABT}";
		"(?<![Cc])ha-?b" => "{HAB}";
		"^[Hh]at(-t)?" => "{HAT}";
		"^chin" => "[CH]in";
		"^hinzu" => "{HIN}{ZU}";
		"^in$" => "{IN}";
		"^ist$" => "{IST}";
		"mitt" => "m1i2t3t4";
		"mit(?!(t|-t))" => { "{M}", "Eremit" };
		"m1i2t3t4" => "mitt";
		"^nicht" => "{NICHT}";
		"^sie$" => "{SI}";
		"^[Ss]ind$" => "{SIND}";
		"([hk]eit)(et?(re?)?[nms]?)?$" => "{HEIT}$2";
		"(eit)(et?(re?)?[nms]?)?$" => "{HEIT}$2";
		"([ie]?tät)(en)?$" => "{HEIT}$2";
		"([Hh])inter" => "HN[&TVR]";
		"^([Hh])ing$" => "$1I[NG]";
		"^hin(?![dz])" => "{HIN}";
		^zur$" => "[Z]ur";
		"^uns(er.*)?$" => "u[NS]$1";
		"(^|\|)({?des}?)?inter" => "$1$2{INTER}";
		"(Ü|ü)-?ber" => "{ÜBER}";
		
		"^der" => "{DER}";
		
		
		"(^|\|)[Aa]nti[kc]on" => "$1{ANTI}{C}";
		"(^|\|)[Zz]uver" => "$1{Z}{VER}";
		//"((?:^(?:.*?)\+|\||\\)(?:.*?(?:[aeiou]|ä|ö|ü).*?))(e-?t)(e[nrsm])?" => "{ET}";
		"(-(?:(?:.*?))|{HEIT})(e-?t)(e[nrsm])?" => "$1{ET}$3";

		"erer([se]?[nm]?)$" => "{ER}{ER}$1";
		"erei(en)?$" => "{ER}ei$1";
		"\[RR\]" => "rr";
		"qu" => "q";
		"(?<!sc)([Hh])all" => "[$1]a[LL]";
		"(?<![Aa])e([ao])" => "[#W][&E]$1";
		"ei-?([aeou])" => "[EI][&E]$1";
		
		"eu([aeou]|lich)" => "[EU][&E]$1";
		"ei([aeou]|lich)" => "[EI][&E]$1";
		"^([Aa])n([bfghklmnprswz][aeiouäöü])" => { "$1[N]$2", ".*[Aa]nker.*" };
		"#sch(a|ä)f-?t" => "#{SCHAFT}";
		"^sch(a|ä)fts$" => "{SCHAFT}"; // hm ...
				

		"t(u|ü)m(ers?|in|innen|s)?$" => "{TUM}$2";
		"^(ein|an|au[fs]|zu|ab|nieder|auseinander)ge([bcdfghjklmnpqrstvwxyz]*[AEIOUÄÖÜaeiouäöü]+)" => "$1{GE}$2";
		"^(herein|an|un|gegen|ab|auf)?ge([bcdfghjklmnpqrstvwxyz]+[AEIOUÄÖÜaeiouäöü]+)" => "$1{GE}$2";
		"(^|\|)be(un|ur)" => "$1{BE}$2";
		"^beu" => "b[EU]";
		//"^(an)?be(?!(tte?n?s?$)|i|r-?n)" => "$1{BE}";

		"be\+" => "{BE}+";

		"^anti" => "{ANTI}";
		"sei-?n" => "{SEIN}";
		"anten$" => "[A]nten";
		"(^|\|)(in|un)?[k|c]on([^n])" => "$1$2{CON}$3";
		"i-?[o|ö]-?nn?" => "{ION}";
		"(^|\|)(un)?er(!n)" => "$1$2{ER}";
		"(^|\|)(un)?zer" => "$1$1{ZER}";
		"(^|\|)rück(?=!ens?$)" => "$1{RÜCK}";
		"eien" => "[EI][&E]{EN}";
		"^([Ss]ch|[Zz])ien$" => "$1[I]n";
		"(?<=pb)ien$" => "[&I]{EN}";
		"je" => "[J][E]";
		"iet" => "[I]t";
		"([^c])(haft)$" => "$1{HAFT}";
		"{ANT}{LICH}" => "en{TLICH}";
		"{ET}t" => "e[TT]";
		
		"da\+" => "{DA}+";
		"^da$" => "{DA}";
		"#da$" => "{DA}";

		"-(.*?)em$" => "-$1{EM}";
		"-(.*?)en$" => "-$1{EN}";


		//"\+(?!\])" => "-";	// reduce + and # to simple - (syllable) in order to simplify following rules
		//"(?<!\[)#" => "-";	// not a good idea ...
		"}-{" => "}{"; 	// it's safe to eliminate - between }{ (and easier for following rules)

	#EndSubSection(shortener)
	#BeginSubSection(normalizer)
		"û" => "ü";
		"é" => "e";
		"{EN}(\||\\)" => "EN$1"; // correct endings: if they are inside words they are not applied
		"{EM}(\||\\)" => "EM$1";

		"ç" => "c";
		"[Aa]eo" => "äo";
		//"-\]" => "=]";
		//"\[-" => "[=";
		"=(i|au|eu|äu|ei)" => "|[-]\[0D-]$1";
		//"-(a|e|o|u)" => "|[-]\[0N-]$1"; // that's a weired rule ... it IS a weired rule and has to be disabled!
		"(?<!\|)\[-\]" => "|[-]\";
		//"=\]" => "-]";
		//"\[=" => "[-";
		"'(i|au|eu|äu|ei)" => "|[']\[0D-]$1";
		"'(a|e|o|u)" => "|[']\[0N-]$1";
		"(?!<\|\[)'" => "|[']\";			// temporarily disabled
		"th(?!of$)" => "t";
		"th(?!er)" => "t";
		"th(?!in)" => "t";
		"th(?!aft)" => "t";
		"aa" => "a";
		"ah(-?)(?=[lmnrstz])" => "a$1";
		"äh-?(?=[lmnrstz])" => "ä";
		"uh(?=[lmnrstz])" => "u";
		"o[oh](-)?([flmnrst])" => "o$1$2";
		"ö[oh](-)?([flmnrst])" => "ö$1$2";
		"ieh([tmn])" => "i$1";
		"e([eh])(-)?([flmnrst])" => "e$2$3";
		"äh([nrl])" => "ä$1";
		"öh-(?={LICH})" => "ö[H]"; // conserve h
		"öh-?(?![aeiouäöüAEIOU])" => "ö";
		"ih(-)?([rnm])" => "i$1$2";
		"äht" => "ät";
		"t-?z" => "z"; // conserve syllable?
		"ph" => "f";
		"ß" => "ss";
		"üh(-)?([lr])" => "ü$1$2";
		"([aeiou]|ä|ö|ü)h(#|-|\+)(bar|sam|ling|sal|nis)" => "$1$2$3";  // h entfällt vor ungekürzten Nachsilben 

		"uhr" => "ur";
		
		"ie" => { "i", "fa-?mi-?li-?en?" }; // list with exceptions
		"ie" => "i-e"; // separation (2 syllables)

		"ühr" => "ür";
		"\(" => "";
		"\)" => "";
		//"\"" => "";
		"zz" => "z";
		"ih#" => "i#";

	#EndSubSection(normalizer,#>stage4)
	#BeginSubSection(bundler,#>stage4)
		"([aeiouäöüAEIOUÄÖÜ]\]?)ssch((\[|{)?[aeiouäöüAEIOUÄÖÜ])" => "$1[SS][CH]$2";
		"m-?m-?l" => "[MML]";
		"p-?p-?l" => "[PPL]";
		"n-?n-?l" => "[NNL]";
		"n-?k\|-?r" => "[NKR]";
		"ns-?r" => "[NSR]";
		"ng-?r" => "[NGR]";
		"n-?k-?l" => "[NKL]";
		"ns-?l" => "[NSL]";
		"ng-?l" => "[NGL]";
		"r-?r-?l" => "[RRL]";
		"n-?[-\|+]?l" => "[NDL]";
		"n-?d[-\|+]?r" => "[NDR]";


		"nd-?l" => "[ND@L3]";
		"sch-?l" => "[SCHL]";
		"schm" => "[SCHM]";
		"schw" => "[SCHW]";
		"sch-?r" => "[SCHR]";
		"(?<!n)ndr" => "[ND@R]";
		"sch" => "[SCH]";
		"(?<!m)m-?p-?f-?r" => "[MPFR]"; // everything goes ha ha ... :)
		"(?<!m)m-?p-?f-?l" => "[MPFL]";
		"(?<!m)m-?p-?f" => "[MPF]";
		"s-?t[\|-]?r" => "[STR]";
		"(?<!n)nkr" => "[NKR]";
		"(?<!n)nk-?l" => "[NKL]";
		"(?<!s)st-?l" => "[STL]";
		"(?<!s)sp-?l" => "[SPL]";
		"sp-?r" => "[SPR]";
		"pf-?l" => "[PFL]";
		"pf-?r" => "[PFR]";
		"ch[-\|]?r" => "[CHR]";
		"ch-?l" => "[CHL]";
		"p-?f" => "[PF]";
		"(ck|kk)" => "[CK]";
		"s-?s" => "[SS]";
		"n-?n" => "[NN]";
		"s-?t" => "[ST]";
		"^eins" => "[EI][N]s";
		"h[-\|+]?r" => "[HR]";
		"sp" => "[SP]";
		"(?<!#)n-?s" => "[NS]";
		"b-?l" => "[BL]";
		"c-?l" => "[CL]";
		"d-?l" => "[DL]";
		"f-?l" => "[FL]";
		"ngl" => "[NG@L3]";
		//"^[Aa]n(-)?g(?!r)" => "AN-G"; // angestrengt: an is not recognized as a word => doesn't work: angst
		"n-?g(?!r)" => "[NG]";
		"g-?l" => "[GL]";
		"k-?l" => "[KL]";
		"l-?l" => "[LL]";
		"m-?l" => "[ML]";
		"n-?l" => "[NL]";
		"pl" => "[PL]";
		"r-?l" => "[RL]";
		"s-?l" => "[SL]";
		"t-?l" => "[TL]";
		"v-?l" => "[VL]";
		"w-?l" => "[WL]";
		"x-?l" => "[XL]";
		"y-?l" => "[YL]";
		"z-?l" => "[ZL]";
		"b[-\|+]?r" => "[BR]";
		"c-?r" => "[CR]";
		"d[-\|]?r" => "[DR]";
		"f(-?|\+|\|)r" => "[FR]";
		"g-?r" => "[GR]";
		"k-?r" => "[KR]";
		"l[-\|]?r" => "[LR]";
		"m[-\|+]?r" => "[MR]";
		"{AN}\+?r" => "a[NR]"; // dissolve prefix
		"n[-\|+]?r" => "[NR]"; // n+r even if two separate words or morphems!
		"p-?r" => "[PR]";
		"r-?r" => "[RR]";
		"s-?r" => "[SR]";
		"t-?t" => "[TT]";
		"t-?r" => "[TR]";
		"v-?r" => "[#VR]"; // use special name vor v+r, since [VR] can be confused with "vocal r"
		"w-?r" => "[WR]";
		"x-?r" => "[XR]";
		"y-?r" => "[YR]";
		"z-?r" => "[ZR]";
		"f-?f" => "[FF]";
		"m-?m" => "[MM]";
		"p-?p" => "[PP]";
		"ch" => "[CH]";
		"n-?d" => "[ND]";
		"n-?k" => { "[NK]", "[Aa]n-?kunft" };
		"zw" => "[ZW]";
		"au" => "[AU]";
		"(Ä|ä)u" => "[EU]";
		"[Ee]u" => "[EU]";
		"ei" => "[EI]";
		"ai" => "[EI]";
	#EndSubSection(bundler,=:std)
	#BeginSubSection(relancer1)	
		// relancer reconverts everything except shortings {..} and bundled tokens [..] to lower case
		"^(.*?)$" => "strtolower()";	// all to low
		//"({[a-zäöü&\/#@\+-]*?})" => "strtoupper()"; 	// {..} to upper again (this is easier...)
		//"(\[[a-zäöü\/#@\+-].*?\])" => "strtoupper()";
		"({.*?})" => "strtoupper()"; 	// {..} to upper again (this is easier...)
		"(\[.*?\])" => "strtoupper()";
	#EndSubSection(relancer1)
	#BeginSubSection(transcriptor)
		////////////////////////////////////////////////////////
		// 1st step: transform all single (lower case) tokens //
		// depending on context: insert directly printable    //
		// tokens wherever necessary
		////////////////////////////////////////////////////////

		"{HEIT}{ET}" => "{HEIT}[ET3/4]";
		"i^" => "[&I]";
		"i(\||\\)" => "[&I]$1";

		// initial groups
		"^o" => "[0N-][O]";
		//"^r" => "[AR]"; // is done later
		"^äo" => "[0N-][Ä][&E][O]";
		"^ag" => "[0N-][A][G]";

		// vowel combinations
		"o-?a" => "[&O]A";
		"ä-?i" => "[Ä][&E][I]";
		"o-?e" => "[&O][E]";
		"i-?o$" => "[&I][&O]";

		// Aufstrich-t				
		"([bcdfghjklmnpqrvwxyz])(-)?t" => "$1$2[&T]";
		"({HIN})-?t" => "$1[&T]";
		"\[(CH|SCH)\]-?t" => "[$1][&T]";
		"\[(BB|DD|FF|GG|CK|LL|RR|MM|NN|NK|PP|RR|SS|PF)\]-?t" => "[$1][&T]";
		"([bcdfghjklmnpqrvwxyz])(-?)\[TL\]" => "$1$2[&T@L3]";
		"([bcdfghjklmnpqrvwxyz])(-?)\[TR\]" => "$1$2[&T@R]";

		// heit + l/r
		"{HEIT}-?l" => "[&EIT@L3]";
		"{HEIT}-?r" => "[&EIT@R]";



		//"\[&T\]e$" => "[&T][&E][-E]"; // hopefully not necessary any more ...
		"\[&T\]er" => "[&T][VR]";
		"\[&T\]{EN}$" => "[&T][&E][EN]";
		"\[&T\]{EM}$" => "[&T][&E][EM]";
		"\[EI\]$" => "[#W][-EI]";
		"\[&T\]\{HEIT\}" => "[&T][&E]{HEIT}";
		"\[EU\]({?)E" => "[EU][&E]$1E";
		"\[&T\]\{LICH\}" => "[&T-1][H]";
		"\[&T\]u\[NG\]" => "[TUNG]";
		"T}er" => "T}[VR]";
		"\[&T\]\i-?g" => "[&T-1][G]";
		"\[&T\]{ET}" => "[&T][&E][ET3/4]";
		"\[&T\]es" => "[&TES]";
		"\[&T\]e" => "[&T][&E][-E]";
		"\[&T\]a" => "[&T][&E]A";
		"\[&T\]\[?o\]?$" => "[&T&O]";
		"\[&T\]o$" => "[&T][&E]O";
		"\[&T\]u([aeiouäöü])" => "[A][&T&U]$1";
		//"\[&T\]" => "[&T][&E]U";
		"\[&T\]\[?i\]?$" => "[&T&I]";
		"\[&T\]i" => "[&T][&E]I";
		"erer$" => "[VR][#N][VR]";
		"eres$" => "[VR][E][S]";
		"([aeiouäöü])r" => "$1[VR]";
		//"([AEIOUÄÖÜ])R(?![D?}\]])" => "$1[VR]";
		//"{DU\[VR\]CH}" => "{DURCH}"; // du bricolage ...
		"(\[^@\])r" => "$1[AR]";
		"}r" => "}[AR]";
		"^s" => "[0n-][S]";
		"^n" => "[0n-][N]";
		"u([aeiouäöü])" => "[#NS][&U]$1";
		"oi" => "[&O][I]";
		"^a($|\|)" => "[0N-][A][&A]$1";
		"a($|\|)" => "[A][&A]$1";
		"{ET}e$" => "[ET][&E][-E]";
		"{HEIT}\[ET3\/4\]" => "{HEIT}[&E][ET3/4]";
		"\[ET3\/4\]e$" => "[ET3/4][&E][-E]";
		"{HEIT}e" => "{HEIT}[&E][-E]"; 

		"^e$" => "[0N-][E][&E]";
		"e$" => "$1[-E]";
		
		"i($|\|)" => "[#N][&I]$1";
		"o($|\|)" => "[#N][&O]$1";
		"u$" => "[#NS][&U]";
		"ä$" => "[#WS][&A]";
		"ö$" => "[#W][&O]";
		"ü$" => "[#WS][&U]";
		"^(?<!\])\[#(N|NS|WS|W|WS)\]" => "[0N-][#3][#$1]"; // can't start with distance only => add dummy token
		"\[EU\]$" => "[EU][&E]";
		"\[AU\]$" => "[AU][&E]";
		"^i\[(S?CH|ZW?)" => "[0N-][I][$1";
		"^iz" => "[0N-][I][Z]";
		"öo" => "[#W][&O][O]";
		"a" => "A";
		"e" => "E";
		"i" => "I";
		"o" => "O";
		"u" => "U";
		"ä" => "Ä";
		"ö" => "Ö";
		"ü" => "Ü";
		"\[AU\]-?({?E)" => "[AU][&E]$1";
		"b" => "B";
		"c" => "C";
		"d" => "D";
		"f" => "F";
		"g" => "G";
		"h" => "H";
		"j" => "J";
		"k" => "K";
		"l" => "L";
		"m" => "M";
		"n" => "N";
		"p" => "P";
		"q" => "Q";
		"(^|\+|\|])r" => "$1[AR]";
		"\|r" => "[AR]";
		"\|r" => "[AR]";
		"r" => "[VR]";
		"s" => "S";
		"t" => "T";
		"v" => "V";
		"w" => "W";
		"x" => "X";
		"y" => "Y";
		"z" => "Z";

		
	#EndSubSection(transcriptor)
	#BeginSubSection(completor)
		// logically speaking the completor is part of the transcriptor
		// i.e. it defines how tokens have to be written
		// but in order to be more systematic and structured we separate this part
		// specific function of completor: adds dummy tokens at beginning and end of a word
		// for tokens that need this "completion" (e.g. n, s at beginning; vowels at the end etc.
		
		"(?<![&-AEIOU])\[?([AEIOU])\]?$" => "[$1][&$1]";
		//"(?<![&-AEIOU])\[?([AU])\]?(\||\!|\?|\.|\:)" => "[A][&$1]$2"; // punctuators are present if they are inside a word!
		//"(?<![&-AEIOU])\[?([E])\]?(\||\!|\?|\.|\:)" => "[E][&$1]$2"; // punctuators are present if they are inside a word!
		//"(?<![&-AEIOU])\[?([IO])\]?(\||\!|\?|\.|\:)" => "[#N][&$1]$2"; // punctuators are present if they are inside a word!

		"^([NS])" => "[0N-][$1]";
		"^\[([NS])\]" => "[0N-][$1]";
		"(?<!&)([AEIOU]){HEIT}" => "[&$1]{HEIT}";
		"^([{\[]&?EIT)" => "[0N-]$1"
		"^(\[#(?:NS?|WS?)\])" => "[0N-]$1";
		"\\Ö" => "[0N-][Ö]"; 

		"^([AEOU]|Ä|Ö|Ü)" => "[0N-][$1]";
		"^(I)" => "[0D-][$1]";
		
		//"\|([AEIOU]|Ä|Ö|Ü)" => "|[0N-][$1]";
		
		//"^E" => "[0N-][E]";
		//"^I" => "[0D-][I]";
		//"^O" => "[0N-][O]";
		//"^U" => "[0N-][U]";
		//"^Ö" => "[0N-][#WD]";
		//"^Ä" => "[0N-][#WS]";
		//"^Ü" => "[0N-][#WDS]";
		"^\[EU\]\[CH\]" => "[0N-][EU][CH]";
		"^\[EI\]\[CH\]" => "[0N-][EI][CH]";
		"^\[AU\]\[CH\]" => "[0N-][AU][CH]";
		"^\[AU\]" => "[0D-][AU]";
		"^\[EU\]" => "[0D-][EU]";
		"^\[EI\](?!-?\[(CH|SCHW?|ZW?)\])" => "[0D-][EI]";
		"^\[EI\](?=-?\[(CH|SCHW?|ZW?)\])" => "[0N-][EI]";
		
	#EndSection(completor)
	#BeginSubSection(separator)
		// separates two words in one
		// there must be a possibility to disable this function manually (i.e. via input form)!

		//"(EITS\])\|" => "$1\\";
		"\[&T\]\|(\[?(M)\]?)" => "[&T]\\$1"; // write separatedly (2 words)
		"\[&T\]\|" => "[&T]\\"; // write separatedly (2 words)
		"{HEIT}\|" => "{HEIT}\\"; // write separatedly (2 words)


		"\[&T\](\[?(M)\]?)" => "[&T-1]$1";
		//"E\|([ABCDFGHIJKLMNPQRSTVWXZ])" => "[-E]\\$1"; // separate (2 words)
		//"(\[&T\]\[VR\]-?)\[&T\]\[&E\]" => "$1[T]"; // can't do that for Winterthur (if not recognized as two words!)
		"\\{ÜBER}" => "\\[0N-]{ÜBER}"; // needs dummy token if separated

	#EndSubSection(separator)
	#BeginSubSection(rewriter)
		// at this point, all characters are upper case
		// some token combinations need to be rewritten
		// that's done in this part (was first part of
		// transcriptor

		///////////////////////////////////////////////////////
		// 2nd step: rewrite upper case tokens if necessary  //
		///////////////////////////////////////////////////////

		// correct position for &T
		// 1- und 2-stufige Zeichen: [&T-1]
		"\[&T\]([\#\-\+])?([BCDFGHJKLMPTVWXY]|\[(?:ST|NK|NG|NS|MPF|PP|TT|CK|FF)\])" => "[&T-1]$1$2";
		
		//"\[(CH|LL)\]T" => "[$1][&T]";
		"{VOR}(\||\+)?\[AR\]" => "[VORAR]";
		"^{ER}\[AR\]" => "[0N-][#N][VR+AR]"; 
		"{ER}\[AR\]" => "[#N][VR+AR]"; 
		"{ER}T" => "{ER}[&T]";
		"\[NK\]T" => "[NK][&T]";
		"\[ND\]T" => "[ND][&T]";
		"\[NG\]T" => "[NG][&T]";
		"\[#VR\]" => "[V@R6]";
		"\[GR\]" => "[G@R]";
		"\[XR\]" => "[X@R]";
		"\[MPFR\]" => "[MPF][@R]";
		"\[MMR\]" => "[MM][@R]";
		"\[NNR\]" => "[NN][@R]";
		"\[PPR\]" => "[PP][@R]";
		"\[NKR\]" => "[NK@R]";
		"\[NDR\]" => "[ND@R]";
		"\[HR\]" => "[H@R]";
		
		
		"\[NGR\]" => "[NG@R]";
		"\[NSR\]" => "[NS@R]";
		"\[NKL\]" => "[NK@L3]";
		"\[NGL\]" => "[NG@L3]";
		"\[NSL\]" => "[NS@L3]";
		"\[RRL\]" => "[RR@L]";
		"\[NDL\]" => "[ND@L3]";
		

		"\[CHR\]" => "[CH@R]";
		"\[KR\]" => "[K@R]";
		"\[TR\]]" => "[T@R]";
		"\[SCHR\]" => "[SCH@R]";
		"\[STR\]" => "[ST@R]";
		"\[LL\]" => "[L@L]";
		"\[BL\]" => "[B@L]";
		"\[XL\]" => "[X][@L]";
		"\[MPFL\]" => "[MPF][@R]";
		"\[MML\]" => "[MM][@L]";
		"\[NNL\]" => "[NN][@L]";
		"\[PPL\]" => "[PP][@L]";


		"\[ML\]" => "[M@L]";
		"\[FL\]" => "[F@L]";
		"\[PL\]" => "[P@L]";
		"\[PFL\]" => "[PF@L]";
		"\[VL\]" => "[V@L]";
		"\[WL\]" => "[W@L]";
		"(?<=([bcdfghjklmnpqrsvwxyz])|(\[CH\]))\[TL\]" => "[&T@L3]";
		"\[TL\]" => "[T@L3]";
		"([bcdfghjklmnpqrvwxyzs])\[T" => "$1][&T][";
		"\[TT\]r" => "[TT@R]";
		"\[TR\]" => "[T@R]";
		"\[DR\]" => "[D@R]";
		"\[CR\]" => "[C@R]";
		"\[CK\]l" => "[CK@L]";
		"\[GNL\]" => "[NG@L3]";
		"\[NR\]" => "[N@R6]";
		"\[NL\]" => "[N@L]";
		"\[KL\]" => "[K@L3]";
		"\[ZL\]" => "[Z@L3]";
		"\[SCHL\]" => "[SCH@L3]";
		"\[CHL\]" => "[CH@L3]";
		"\[BR\]" => "[B@R6]";
		"\[SPL\]" => "[SP@L]";
		"\[FR\]" => "[F@R6]";
		"\[LR\]" => "[L@R6]";
		"\[MR\]" => "[M@R6]";
		"\[SPR\]" => "[SP@R6]";
		"\[PR\]" => "[P@R6]";
		"\[PFR\]" => "[PF@R6]";
		"\[WR\]" => "[W@R6]";
		"\[RL\]" => "[VR@L]";
		"\[GL\]" => "[G@L3]";
		"\[SR\]" => "[S][AR]";
		"\[DL\]" => "[D@L3]";
		"\[CL\]" => "[C@L3]";
		"\[STL\]" => "[ST@L3]";
		"\[SL\]" => "s[@L]";

		"(\[VR@L\])\[?I\]?(\[?N\]?)" => "$1$2";
		"^\[EI\]$" => "[0D-][EI][&E]";
		"&T]{EN}" => "&T][&E][EN]";
		"\[EU\]\[-E\]" => "[EU][&E][-E]";
		"\[EU\]\[&E\]E\[VR\]U\[NG\]" => "[EU][&E][VR]U[NG]";
		"\[VR\]{AUS}" => "[VR]{-AUS}";
		"\[VR\]\|?\[VR\]" => "[VR+AR]";
		"^{HEIT}" => "[0N-]{HEIT}";
		"I-?U" => "[&I]U";
		"I-?E" => "[&I]E";
		"I-?A" => "[&I]A";
		"I-?O([^N])" => "[&I]O$1";
		"I-?I" => "[&I]I";
		"O-?U" => "[&O]U";
		"\[EU\]-?E" => "[EU][&E]";
		"E-?\[-E\]" => "[#N][-E]";
		"\[E\]$" => "[-E]";
		"E-?{EN}" => "E[&E]{EN}";
		"\[EI\]-?{HEIT}" => "[EI][&E]{HEIT}";
		"\[AU\]-?I" => "[AU][&E]I";
		"(I|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[SCH\]" => "$1$2[^SCH]";
		"(I|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[SCHW\]" => "$1$2[^SCHW]";
		"(I|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[SCHM\]" => "$1$2[^SCHM]";
		"(I|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[ZW\]" => "$1$2[^ZW]";
		"(I|\[EI\]|\[AU\]|\[EU\])(-|\|?)Z" => "$1$2[^Z]";
		"(I|\[EI\]|\[AU\]|\[EU\])(-|\|?)\[CH\]" => "$1$2[^CH]";
		//"\[&T\]\[?B\]?" => "[&TB]"; // hopefully not necessary any more
		"\[&T\]\[?B\]?" => "[&T-1][B]";
		"\[&T\]\[?L\]?(OS)" => "{&T-L}$1";
		"\[&T\]\[NG\]" => "[&TNG]";
		"\[&T\]\[NS\]" => "[&TNS]";
		"\[&T\]\[?ST\]?" => "[&TST]";
		"\[&T\]\[?CH\]?" => "[&T^CH]";
		"\[&T\]\[?C\]?" => "[&TC]";
		"\[&T\]\[?D\]?" => "[&TD]";
		"\[&T\]\[?G\]?" => "[&TG]";
		//"\[&T\]\[?H\]?" => "[&TH]";
		"\[&T\]\[?J\]?" => "[&TJ]";
		"\[&T\]\[?ALL\]?" => "[&TALL]";
		"\[&T\]\[?M\]?" => "[&TM]";
		"\[&T\]\[?W\]?" => "[&TW]";
		"\[&T\]\[?X\]?" => "[&TX]";
		"\[&T\]\[?Y\]?" => "[&TY]";
		//"\[&T\]\[?&E\]?" => "[&T&E]"; // hopefully not necessary any more
		"\[&T&E\]E" => "[&T&E][-E]";
		"\[&T\]{HAFT}" => "[&THAFT]";
		"{HEIT}{LICH}" => "[&EITH]";
		"\[&T\]{SCHAFT}" => "[&TSCHAFT]";
		"{HEIT}{SCHAFT}" => "[&EITSCHAFT]";
		"\[&T\]{ION}" => "[&TION]";
		"\[&T\](\[?[AEIOU]\]?)" => "[&T][&E]$1"; 	//"[&T&E]$1";
		"{&TALL}" => "[&TALL]";
		"\[&T\]\[?N\]?" => "[&TN]";
		"\[&T\]\[?VR\]?" => "[&TVR]";
		"\[&T\]\[?R\]?" => "[&TAR5]";
		"\[&TL\]" => "[&T@L3]";
		"\[&T\]\[L\]" => "[&T@L3]";
		"{&T-L}" => "[&TL]";
		//"\[&T\]\[SCH\]" => "[&T^SCH]";
		//"\[&T\]\[?S\]?" => "[&TS]";
		"\[&T\]\[?U\]?" => "[&TU]";
		//"\[&T\]\[?SCH\]?" => "[&T^SCH]";
		"\[&T\]\[?Z\]?" => "[&T^Z]";
		"\[&T\]\[F@L\]" => "[&TF@L]";
		"\[&T\]F" => "[&TF]";
		"\[&T\]\[?K\]?" => "[&TK]";
		"\[&T\]\[?P\]?" => "[&TP]";
		"\[&T\]\[?Q\]?" => "[&TQ]";
		"\[&T\]\[?V\]?" => "[&TV]";
		"\[&T\]\[?NK\]?" => "[&TNK]";
		"\[&T\]\[?PF\]?" => "[&TPF]";
		"\[&T\]\[?SP\]?" => "[&TSP]";
		"\[&T\]\[?SCHW\]?" => "[&TSCHW]";
		"\[&T\]\[?ZW\]?" => "[&TZW]";
		"\[&T\]Ä" => "[&T&E]Ä";
		"\[&T\]Ü" => "[&T&E]Ü";
		"\[&T\]\[#W\]\[-E\]" => "[&T&E][#W][-E]";
		"{HEIT}\[?B\]?" => "[&EITB]";
		"{HEIT}\[?L\]?" => "[&EITL]";
		"{HEIT}\[NG\]" => "[&EITNG]";
		"{HEIT}\[NS\]" => "[&EITNS]";
		"{HEIT}\[?ST\]?" => "[&EITST]";
		"{HEIT}\[?SCH\]?" => "[&EITSCH]";
		"{HEIT}\[?CH\]?" => "[&EITCH]";
		"{HEIT}\[?C\]?" => "[&EITC]";
		"{HEIT}\[?D\]?" => "[&EITD]";
		"{HEIT}\[?G\]?" => "[&EITG]";
		"{HEIT}\[?H\]?" => "[&EITH]";
		"{HEIT}\[?J\]?" => "[&EITJ]";
		"{HEIT}\[?ALL\]?" => "[&EITALL]";
		"{HEIT}\[?M\]?" => "[&EITM]";
		"{HEIT}\[?W\]?" => "[&EITW]";
		"{HEIT}\[?X\]?" => "[&EITX]";
		"{HEIT}\[?Y\]?" => "[&EITY]";
		//"{HEIT}\[?&E\]?" => "[&EIT&E]";
		"{HEIT}\[?N\]?" => "[&EITN]";
		"{HEIT}\[?VR\]?" => "[&EITVR]";
		"{HEIT}\[?S\]?" => "[&EITS]";
		//"{HEIT}\[?U\]?" => "[&EITU]";
		"{HEIT}\[?O\]?" => "[&EITO]";
		"{HEIT}\[?Z\]?" => "[&EITZ]";
		"{HEIT}\[?F\]?" => "[&EITF]";
		"{HEIT}\[?K\]?" => "[&EITK]";
		"{HEIT}\[?P\]?" => "[&EITP]";
		"{HEIT}\[?Q\]?" => "[&EITQ]";
		"{HEIT}\[?V\]?" => "[&EITV]";
		"{HEIT}\[?NK\]?" => "[&EITNK]";
		"{HEIT}\[?PF\]?" => "[&EITPF]";
		"{HEIT}\[?SP\]?" => "[&EITSP]";
		"{HEIT}\[?SCHW\]?" => "[&EITSCHW]";
		"{HEIT}\[?ZW\]?" => "[&EITZW]";
		"{HEIT}IG" => "{HEIT-1}[G]";
		"{TUM}" => "[A][&TM]";
		"\[TLICH\]T" => "[TLICH][&T]";
		//"\[TLICH\]" => "[&TH]";
		"\[&T\](\[-E[MN]?\])" => "[&T][&E]$1";
		"\[&EITNG\]\[SP\]" => "[&EITNG][S][P]";
		"\[AU\]\[-E\]" => "[AU][&E][-E]";
		"\[EI\]{ER}" => "[EI][&E]{ER}";
		"\[AU\]U" => "[AU][&E]U";
		"\[O\]U" => "[&O]U";
		"{HEIT}U\[NG\]" => "{HEIT-1}[#NS][NG]"; 
		"\[EU\]-?{LICH}" => "[EU][&E]{LICH}"; 
	#EndSubSection(rewriter)
	#BeginSubSection(substituter)

		"^{AN}" => "[0N-]AN";
		"{AN}" => "AN";
		
		"{WI}(-)?(.?)" => "[W][/I]\\$2";

		"^{SO}" => "[0n-][SS]";
		"(\||\\){SO}" => "$1[0n-][SS]";
		"{SO}$" => "[SS]";
		
		"}{DEM}" => "}[EM]";

		// trickier ones
		"\[&T\]{ER}" => "[&T][VR]";  // hopefully better this way
		"\[&T\]{ALL}" => "{&TALL}";
		//"{TUM}\[VR\]" => "{TUM}{VR}";	//??
		//"{TUM}{VR}" => "{TUM}[VR]"; //??
		"R}t" => "R}[&T]";
		"^\{ANT\}" => "[0N-][#N]{ANT}";
		"{HEIT}{ET}" => "{HEIT}[&E][ET3/4]";
		"{ET}(e[^s]|{EN}|{EM})" => "{ET}[&E]$1";
		"\[EI\]t" => "[EI]T";

		//"{VOR}r" => "[VOR+AR]";
		//"{ER}r" => "[VR+AR]";
		"{DES}" => "[0N-][S]";
		"^{DE(M|N)}$" => "[DE$1]";
		"{DEM}(-?)N" => "[^DEM]$1N";
		"{DE(M|N)}j" => "[^^DE$1]J";
		"{DE(M|N)}\[j\]" => "[^^DE$1][J]";
		"{DE(M|N)}g" => "[^^DE$1]G";
		"{DE(M|N)}{G" => "[^^DE$1]{G";
		"{DE(M|N)}{GE}" => "[^^DE$1]{GE}";
		"{DE(M|N)}z" => "[^^DE$1]Z";
		"{DE(M|N)}{ZU}" => "[^^DE$1]{ZU}";
		"{DE(M|N)}" => "[E$1]";
		

		"o{HEIT}" => "[&O]{HEIT}";
		"\[AU\]{HEIT}" => "[AU][&E]{HEIT}";
		"{SCHAFT}ler(n|in(nen)?)?$" => "{SCHAFT}[&L]{-ER}$1";
		"{TUM}er(s|in|innen)?$" => "{TUM}[VR]$1";
		"{HEIT}({EN}|{EM})" => "{HEIT}[&E]$1";
		"{HEIT}er" => "{HEIT}[VR]";
		"{HEIT}el" => "{HEIT}[&E][-E]L";
		"{HEIT}e$" => "{HEIT}[&E][-E]";
		"{HEIT}es" => "{&EITES}";
		"{HEIT}e\[NS\]" => "[&EITNS]";
		"{HEIT}ig" => "[&EITG]";
		"{HEIT}u\[NG\]" => "[A][&EITNG]";
		"{HEIT}e" => "{HEIT}[&E]e";

		"^\{ER\}" => "[0N-][#N][VR]";
		//"\[&T\]{ER}" => "[&TVR]"; // even 2x ...
		// trivial ones
		"{DASS?}" => "[0N-][#NS][S]";
		"{HEIT}{ER}" => "[&EITVR]";
		"{ER}" => "[E][VR]";
		"{BE}" => "[B]";
		"{GE}" => "[G]";
		"{UND}" => "[#NS][&U]";
		"{DI}" => "[D]";
		"{MIT}" => "[M]";
		"{VON}" => "[V]";
		"{FÜR}" => "[F]";
		"{LICH}" => "[H]";
		"{ALS}" => "[L]";
		"{CON}" => "[C]";
		"{ES}" => "[0N-][#N][-E]";
		"{WENN}" => "[NN]";
		"{WIR}" => "[W]";
		"{ZU}" => "[Z]";
		"{DER}" => "[VR]";
		"{NICHT}" => "[NICHT]";
		"{HEIT}ig" => "[#W][TIG]";
		"\|{VER}" => "[EN][AR]";
		"^{VER}" => "$1[0N-][EN][AR]";
		"{VER}" => "[EN][AR]";
		"{DEM}" => "[0N-][EM]";
		"{DEN}" => "[0N-][EN]";
		"{SI}" => "[0N-][#N][S][/I]";
		"{UN}" => "[#NS][&U]";
		"{IN}" => "[IN]";
		"{WAR}" => "[0U-][#0S][&A]";
		"{WÄR}" => "[0U-][#WS][&A]";
		"{ET}" => "[ET]";
		"{HAT}" => "[HAT]";
		"{DA}" => "[DA]";
		"{DES}" => "[0N-][S]";
		"{SIND}" => "[SIND]";
		//"{DIS}" => "[0N-][#0][I][S]";
		"{ZER}" => "[Z@R]";
		"{ANTI}" => "[0N-][ANTI]";
		"^{UNTER}" => "[0N-][N@R6]";
		"{UNTER}" => "[N@R6]";
		"^{ÜBER}" => "[0N-][#WS][&U]";
		"{ÜBER}" => "[#WS][&U]";
		"{WI}" => "[W][/I]";
		"{WIDER}" => "[W@R6]";
		"{SOLCH}" => "[SOLCH]";
		"{WELCH}" => "[CH]";
		"{HEIT}{HIN}" => "[&EITH][#0][N]";
		"{HIN}" => "[H][#0][N]";
		"\[&T\]{EN}$" => "[&T][&E][EN]";
		"\[&T\]{EM}$" => "[&T][&E][EM]";
		"\[&T\]\[#N\]\[VR\]$" => "[&T][VR]";
		"{USW}" => "[A][&U][SS]";
		"{USF}" => "[A][&U][SS][FORT]";
		"{GEHABT}" => "[G][&T]";
		"{HAB}T" => "[HAB][&T]";
		"{HAB}" => "[HAB]";
		"{ZUSAMMEN}" => "[Z][A][S]";
		"{-ER}" => "[VR]";
		"^{INTER}" => "[INTER]";
		"{INTER}" => "[I][INTER]";
		"^{ZURÜCK}" => "[ZURÜCK]";
		"{ZURÜCK}" => "[I][ZURÜCK]";
		"{E(N|M)}\|" => "[E][$1]";   // dissolve ending in composed words
		"{E(N|M)}" => "[E$1]";
		 

		//"{AN}" => "[0N-][A][N]";
	#EndSubSection(substituter)
	#BeginSubSection(separator)
		// separator decides wether or not a word should be written separatedly
		"\[&EITS\](\|)\[?T\]?" => "[&EITS][#5]]\\T";
	#EndSubSection(separator)
	#BeginSubSection(relancer2)	
		// relancer reconverts everything except shortings {..} and bundled tokens [..] to lower case
		"^(.*?)$" => "strtolower()";	// all to low
		//"({[a-zäöü&\/#@\+-]*?})" => "strtoupper()"; 	// {..} to upper again (this is easier...)
		//"(\[[a-zäöü\/#@\+-].*?\])" => "strtoupper()";
		//"({.*?})" => "strtoupper()"; 	// {..} to upper again (this is easier...)
		//"(\[.*?\])" => "strtoupper()";
		"\|" => "";  // filter out all | from linguistical analysis (not needed any more, spacer needs them removed for correct spacing)
		"-\]" => "#=#=#]";	// the same goes for - (this one is trickier to get rid off ...)
		"\[-" => "[#=#=#";	// first combination of - with brackets must be rewritten
		"-(?![0-9])" => "";	// - can now be deleted (filter out [T-1] for example ...)
		"#=#=#" => "-";		// this still might have interferences (watch out if that occurs)
		"\[#=#\]" => "[=]";
		"\+" => "";  // eliminate morphem boundaries before spacer
	#EndSubSection(relancer2)
	#BeginSubSection(spacer)
		
		// at this point all tokens are lower case 
		// single tokens can be inside [] or not
		// multiple tokens are inside []
		// all abbreviations have been transformed to single or multiple tokens (by preceeding subsituter)
			
		// apparently, there are still some accolades (not substituted by substituter because the represent a token of their own => replace accolades by brackets
		"{" => "[";
		"}" => "]";		

		// make sure single tokens ARE inside brackets [] (no confusion between f and ff!)
		"(\[.*?\])" => "strtoupper()";
		"(?<!\[)([a-z]|ä|ö|ü)" => "[$1]";
		"(\[.*?\])" => "strtolower()";	
		
		
		// spacer rules (generated with regex_helper.php

// case: aa
"(\[(0n-|l@l|b@l|m@l|f@l|p@l|pf@l|v@l|sp@l|w@l|b@r6|sp@r6|m@r6|p@r6|pf@r6|n@r6|n@l|l@r6|rr|ff|mm|nn|pp|pf|sp|ant|&e|ss|un|schaft|&a|&u|&o|&i|all|hab|haft|auf|aus|des|bei|selb|wo|fort|[blmnpvwfxy])\])(\[(a|u|o|i|au|#n|#ns)\])?(\[(d@r|nd@r|t@r|st@r|l@l|b@l|f@l|p@l|pf@l|v@l|w@l|t@l3|d@l3|nd@l3|st@l3|k@l3|b@r6|f@r6|p@r6|pf@r6|v@r6|w@r6|da@r|n@r6|n@l|vr@l|l@r6|tt@r|pf|st|rr|nd|vr|ff|pp|tt|all|hab|haft|auf|aus|des|bei|wo|selb|da|vor|inter|ion|[bdcfwlxptvqhns])\])" => "$1[#3]$3$5";
// case: ab
"(\[(0n-|l@l|b@l|m@l|f@l|p@l|pf@l|v@l|sp@l|w@l|b@r6|sp@r6|m@r6|p@r6|pf@r6|n@r6|n@l|l@r6|rr|ff|mm|nn|pp|pf|sp|ant|&e|ss|un|schaft|&a|&u|&o|&i|all|hab|haft|auf|aus|des|bei|selb|wo|fort|[blmnpvwfxy])\])(\[(a|u|o|i|au|#n|#ns)\])?(\[(g@r|k@r|ch@r|nk@r|sch@r|g@l3|m@l|sp@l|ng@l3|nk@l3|k@l3|z@l3|sch@l3|ch@l3|sp@r6|m@r6|z@r|z@l3|ck@l|&a|&u|&i|&e|&o|-e|ng|sch|nk|schm|mm|nn|ss|ch|mpf|sp|ns|zw|schw|ck|gegen|hat|vr|durch|solch|[jzgmyk])\])" => "$1[#0]$3$5";
// case: ba
"(\[(vr@l|d@r|nd@r|t@r|g@r|k@r|ch@r|nk@r|sch@r|st@r|l@l|g@l3|t@l3|ng@l3|d@l3|nd@l3|st@l3|nk@l3|k@l3|z@l3|sch@l3|f@r6|ch@l3|v@r6|w@r6|z@r|z@l3|da@r|ck@l|l@r6|tt@r|mpf|schm|zw|tt|nd|st|in|ng|ns|nk|ur|sch|schw|gegen|hat|da|vr|ar|vor|inter|rück|ion|durch|ch|\^ch|ck|solch|[gkjcdstqzh])\])(\[(a|u|o|i|au|#n|#ns)\])?(\[(d@r|nd@r|t@r|st@r|l@l|b@l|f@l|p@l|pf@l|v@l|w@l|t@l3|d@l3|nd@l3|st@l3|k@l3|b@r6|f@r6|p@r6|pf@r6|v@r6|w@r6|da@r|n@r6|n@l|vr@l|l@r6|tt@r|pf|st|rr|nd|vr|ff|pp|tt|all|hab|haft|auf|aus|des|bei|wo|selb|da|vor|inter|ion|[bdcfwlxptvqhns])\])" => "$1[#3]$3$5";
// case: bb
"(\[(vr@l|d@r|nd@r|t@r|g@r|k@r|ch@r|nk@r|sch@r|st@r|l@l|g@l3|t@l3|ng@l3|d@l3|nd@l3|st@l3|nk@l3|k@l3|z@l3|sch@l3|f@r6|ch@l3|v@r6|w@r6|z@r|z@l3|da@r|ck@l|l@r6|tt@r|mpf|schm|zw|tt|nd|st|in|ng|ns|nk|ur|sch|schw|gegen|hat|da|vr|ar|vor|inter|rück|ion|durch|ch|\^ch|ck|solch|[gkjcdstqzh])\])(\[(a|u|o|i|au|#n|#ns)\])?(\[(g@r|k@r|ch@r|nk@r|sch@r|g@l3|m@l|sp@l|ng@l3|nk@l3|k@l3|z@l3|sch@l3|ch@l3|sp@r6|m@r6|z@r|z@l3|ck@l|&a|&u|&i|&e|&o|-e|ng|sch|nk|schm|mm|nn|ss|ch|mpf|sp|ns|zw|schw|ck|gegen|hat|vr|durch|solch|[jzgmyk])\])" => "$1[#3]$3$5";

		// additional space for i, au
		//"\[(i|au)\](?!\[#)" => "[$1][#3]";
		"\[&e\]\[#3\]\[o\]" => "[&E][O]";   // test: recorrect certain distances
		"\[vr\]\[#3\]\[-e\]" => "[VR][#3-][-E]"; // just test if negative spacing is possible
		"\[#6\](\[?i\]?\[?n\]?)" => "$1";

		"^(.*?)$" => "strtoupper()";	// all to upper

	#EndSubSection(spacer,=:prt)
#EndSection(rules)
