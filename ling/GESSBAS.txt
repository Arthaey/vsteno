#BeginSection(header)
	// 
	// GESSBAS - Generic Shorthand Font (Model) in Stolze-Schrey for VSTENO 
	// Set of rules interpreted and processed by VSTENO (www.vsteno.ch) 
	// (c) 2019 - Marcel Maci (m.maci@gmx.ch)
 	//
	// This program* is free software: you can redistribute it and/or modify it under	
	// the terms of the GNU General Public License as published by the Free Software
 	// Foundation, either version 3 of the License, or (at your option) any later
 	// version.
	//
 	// This program is distributed in the hope that it will be useful, but WITHOUT
	// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
	// FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
	// details.
	// 
 	// You should have received a copy of the GNU General Public License along with
	// this program. If not, see <http://www.gnu.org/licenses/>.
 	//
	// * As explained in the documentation of VSTENO, shorthand models are considered
	// as interpreted code (and thus code licensed under the same terms as the main 
	// program).
	//
	// Model naming:
	// GE = General, SS = Stolze-Schrey, BAS = basic system (Grundsystem)
	//
	#BeginSubSection(session)
		// only font variables		
		// engine parameters
		"token_distance_wide" := "18";
		// spacer groups
		// L/R: left, right
		// M/N/P/K: minus, normal, plus (more or less space needed), circle (special space rules)
		// A/B/C/D/E: vertical delta of connection (A = baseline, B = 1/2 line, C = 1 line, D = 2 lines, E = 3 lines
		// main groups: (to reduce number of groups)
		// LK = LKA, LKB, LKC
		// LN = LNA, LNB, LNC
		// LP = LPA, LPB
		// RK = RKA, RKB, RKC
		// RN = RNA, RNB, RNC (low; high = RND and RNE are not regrouped!)
		// RP = RPA, RPB, RPC (idem)
		"spacer_token_combinations" := "
			C1:[LK,RK],
			C2:[LK,RN],		// RN = RNA / RNB / RNC
			C3:[LK,RND],
			C4:[LK,RNE],
			C5:[LK,RP],		// RP = RPA / RPB / RPC
			C6:[LK,RPD],
			C7:[LK,RPE],
			C8:[LMA,RK],
			C9:[LMA,RN],		// RN = RNA / RNB / RNC
			C10:[LMA,RND],
			C11:[LMA,RNE],
			C12:[LMA,RP],		// RP = RPA / RPB / RPC
			C13:[LMA,RPD],
			C14:[LMA,RPE],
			C15:[LN,RK],
			C16:[LN,RN],		// RN = RNA / RNB / RNC
			C17:[LN,RND],
			C18:[LN,RNE],
			C19:[LN,RP],		// RP = RPA / RPB / RPC
			C20:[LN,RPD],
			C21:[LN,RPE],
			C22:[LP,RK],
			C23:[LP,RN],		// RN = RNA / RNB / RNC
			C24:[LP,RND],
			C25:[LP,RNE],
			C26:[LP,RP],		// RP = RPA / RPB / RPC
			C27:[LP,RPD],
			C28:[LP,RPE]";
		"spacer_vowel_groups" := "
			V1:[A,E1,O,U],		// e1 = narrow e in english
			V2:[I,AU]";
		"spacer_rules_list" := "
			R1:[C1,V1,D1,?],
			R2:[C1,V2,D2,],
			R3:[C2,V1,D3,?],
			R4:[C2,V2,D4,],
			R5:[C3,V1,D5,?],
			R6:[C3,V2,D6,],
			R7:[C4,V1,D7,?],
			R8:[C4,V2,D8,],
			R9:[C5,V1,D9,?],
			R10:[C5,V2,D10,],
			R11:[C6,V1,D11,?],
			R12:[C6,V2,D12,],
			R13:[C7,V1,D13,?],
			R14:[C7,V2,D14,],
			R15:[C8,V1,D15,?],
			R16:[C8,V2,D16,],
			R17:[C9,V1,D17,?],
			R18:[C9,V2,D18,],
			R19:[C10,V1,D19,?],
			R20:[C10,V2,D20,],
			R21:[C11,V1,D21,?],
			R22:[C11,V2,D22,],
			R23:[C12,V1,D23,?],
			R24:[C12,V2,D24,],
			R25:[C13,V1,D25,?],
			R26:[C13,V2,D26,],
			R27:[C14,V1,D27,?],
			R28:[C14,V2,D28,],
			R29:[C15,V1,D29,?],
			R30:[C15,V2,D30,],
			R31:[C16,V1,D31,?],
			R32:[C16,V2,D32,],
			R33:[C17,V1,D33,?],
			R34:[C17,V2,D34,],
			R35:[C18,V1,D35,?],
			R36:[C18,V2,D36,],
			R37:[C19,V1,D37,?],
			R38:[C19,V2,D38,],
			R39:[C20,V1,D39,?],
			R40:[C20,V2,D40,],
			R41:[C21,V1,D41,?],
			R42:[C21,V2,D42,],
			R43:[C22,V1,D43,?],
			R44:[C22,V2,D44,],
			R45:[C23,V1,D45,?],
			R46:[C23,V2,D46,],
			R47:[C24,V1,D47,?],
			R48:[C24,V2,D48,],
			R49:[C25,V1,D49,?],
			R50:[C25,V2,D50,],
			R51:[C26,V1,D51,?],
			R52:[C26,V2,D52,],
			R53:[C27,V1,D53,?],
			R54:[C27,V2,D54,],
			R55:[C28,V1,D55,?],
			R56:[C28,V2,D56,]";
		"font_exportable_yesno" := "yes";
		"font_importable_yesno" := "no";
		"model_se_revision" := "0";
	#EndSubSection(session)
	#BeginSubSection(analyzer)
		// not needed for font
	#EndSubSection(analyzer)
#EndSection(header)
#BeginSection(font)
	#BeginSubSection(base)
		// This is the merged "superfont" containing all tokens and definitions necessary for german, spanish, french and english in Stolze-Schrey
		// This font was generated using font_diff.php tool
		// English (ENSSBAS) - as the last font developped - was taken as a base
		// The generated diffs for french (FRSSBAS), spanish (SPSSBAS) and german (DESSBAS) - a total of 15 pages - were printed out, analyzed
		// (in order to know whether and how discovered diffs should or have to be integrated) and finally added or discarded

		// diacritics
		"@#._." => {  /*hfile*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.0,  1,  1.0,  0,  0,  0.5, /**/ 2.5,  -2.5,  0.5,  0,  1.0,  0,  1,  0.5, /**/ 5,  0,  0.5,  0,  1.0,  0,  0, }
		"@#/" => {  /*h*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.0,  1,  1.0,  0,  0,  0, /**/ -5,  -4,  0.0,  0,  1.0,  0,  1,  0.0  }
		"@#_" => {  /*h*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.0,  1,  1.0,  0,  0,  0, /**/ 5,  0,  0.0,  0,  1.0,  0,  1,  0.0  }
		"@#." => {  /*h*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0.5,  0,  0.5,  1,  1.0,  0,  0,  0.5, /**/ 0,  0.5,  0.5,  0,  1.0,  0,  1,  0.5, /**/ -0.5,  0,  0.5,  1,  1.0,  0,  0,  0.5, /**/ 0.5,  -0.5,  0.5,  0,  1.0,  0,  1,  0.5, /**/ 0.5,  0,  0.5,  0,  1.0,  0,  1,  0.5  }
		"@#/." => {  /*h:diacritics:pointhigh*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0.5,  0,  0.5,  1,  1.0,  0,  0,  0.5, /**/ 0,  0.5,  0.5,  0,  1.0,  0,  1,  0.5, /**/ -0.5,  0,  0.5,  1,  1.0,  0,  0,  0.5, /**/ 0.5,  -0.5,  0.5,  0,  1.0,  0,  1,  0.5, /**/ 0.5,  0,  0.5,  0,  1.0,  0,  1,  0.5  }	
		"@#/_" => {  /*h*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.0,  1,  1.0,  0,  0,  0, /**/ 5,  0,  0.0,  0,  1.0,  0,  1,  0.0  }
		"@#O" => {  /*h*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*data*/ 0,  0,  0.5,  0,  1.0,  0,  1,  0.5, /**/ 1.25,  1.25,  0.5,  1,  1.0,  0,  0,  0.5, /**/ 0,  2.5,  0.5,  0,  1.0,  0,  1,  0.5, /**/ -1.25,  1.25,  0.5,  0,  1.0,  0,  1,  0.5, /**/ 0,  0,  0.5,  0,  1.0,  0,  1,  0.5  }
		"#D#" => { /*diacriticsdummytoken*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", /*data*/ /*diacritics*/ -2.5,  20,  0,  "@#._.",  0,  0,  0,  0, /*diacritics*/ -2.5,  20,  0,  "@#/_",  0,  0,  0,  0, /*diacritics*/ 0,  15,  0,  "@#O",  0,  0,  0,  0 }
		
		
		// numbers
		"0" => { /*spanisch*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 1, 0, 0, 1, 5, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 17.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 17.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 2.5, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 1, 0, 1, 1, 0, 0, 0,  /**/ 6, 2.5, 0, 0, 1, 5, 1, 0 }
		"1" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 11, 0, 0, 1, 5, 0, 0,  /**/ 7, 19, 0, 0, 1, 0, 0, 0,  /**/ 7, 1, 0, 0, 1, 0, 0, 0 }
		"2" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 0, 1, 5, 0, 0.5,  /**/ 1.25, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5.75, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 15, 0.5, 0, 1, 0, 0, 0,  /**/ 0, 1, 0, 0, 1, 0, 0, 0.5,  /**/ 7, 1, 0, 0, 1, 0, 0, 0 }
		"3" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 0, 1, 5, 0, 0.5,  /**/ 1.25, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5.75, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 15, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 7, 7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 1, 0, 1, 1, 0, 0, 0,  /**/ 0, 5, 0, 0, 1, 0, 1, 0 }
		"4" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 19, 0, 0, 1, 5, 0, 0,  /**/ 0, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 7, 11, 0, 0, 1, 0, 0, 0,  /**/ 5.5, 19, 0, 0, 1, 5, 0, 0,  /**/ 5.5, 1, 0, 0, 1, 0, 0, 0 }
		"5" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 7, 19, 0, 0, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0,  /**/ 0, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 6, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 4, 0.5, 0, 1, 0, 0, 0 }
		"6" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 7, 19, 0, 0, 1, 5, 0, 0.5,  /**/ 1, 11, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.5, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 10, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0, 5, 0.5, 0, 1, 0, 1, 0 }
		"7" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 0, 1, 5, 0, 0,  /**/ 7, 19, 0, 0, 1, 0, 0, 0,  /**/ 3, 1, 0, 0, 1, 0, 0, 0,  /**/ 3.5, 11, 0, 0, 1, 5, 0, 0,  /**/ 6.5, 11, 0, 0, 1, 0, 0, 0 }
		"8" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 11, 0, 0, 1, 5, 0, 0.5,  /**/ 7, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 11, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 6, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 6, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 11, 0, 1, 1, 0, 0, 0 }
		"9" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 7, 14, 0, 0, 1, 5, 0, 0.5,  /**/ 3.5, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 6, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 1, 0.5, 0, 1, 0, 0, 0 }

		// abbreviations
		"IST" => { /*header*/ 1, 0.5, 0, 0.5, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0.5, 9.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 1, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 10.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0.5, 9.5, 0.5, 0, 3, 0, 1, 0 }
		"ES" => { /*header*/ 1, 0.5, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 2, 5, 0, 0, 1, 0, 1, 0 }
		"EST" => { /*spanisch*/ 1, 0.5, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, "LPB:LP", /*data*/ 0.5, 5.25, 0, 1, 1, 0, 0, 0,  /**/ 0, -0.05, 0, 0, 1, 0, 1, 0, /*diacritics*/ -10,  10,  0,  "@#/_",  0,  0,  0,  0 }
		"NO" => { /*header*/ 1, 0.5, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 6, -5, 0, 0, 1, 0, 1, 0 }
		"WAS" => { /*header*/ 5, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 1.5, 8.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 5, 10, 0.5, 98, 1.5, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 1.5, 8.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 6, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0.5, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 4.25, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 8, 2, 0.5, 0, 1, 0, 1, 0 }
		"AUCH" => { /*header*/ 5, 1, -1, 0.5, 0.5, 0.5, 0, 0, 0, 0, "", "", 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 4.2, 10, 0.7, 2, 2.5, 0, 0, 0.6,  /**/ 7.8, 5.6, 0.8, 0, 3, 0, 0, 0.5,  /**/ 6.9, -5.2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5.5, -8, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 4, -10, 0.5, 0, 1, 0, 0, 0 }
		"TIG" => { /*header*/ 7.5, 0.5, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 18.75, 0.5, 1, 1.5, 0, 0, 0,  /**/ 6, 20, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 7.5, 18, 0.5, 0, 3, 0, 0, 0,  /**/ 7.5, 10, 0, 0, 1, 0, 1, 0,  /**/ 7.5, 12.5, 0, 4, 1, 0, 0, 0 }
		"NICHT" => { /*header*/ 15, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 6.5, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 7.75, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 11, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 12.5, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 14, 1, 0.5, 0, 1, 0, 1, 0 }
		"ALL" => { /*header*/ 3, 0.5, 0, 0.5, 0.75, 0.75, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 7, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 3, 2, 0.5, 0, 1, 0, 1, 0 }
		"WERD" => { /*header*/ 1.25, 0.5, 0, 0.5, 0, 2, 0, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNB:LN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 1.25, 0, 0.5, 0, 1.2, 0, 1, 0 }
		"IN" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0,"", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0, "LNA:LN:RNB:RN", /*data*/ 0, 3, 0, 1, 1, 0, 0, 0,  /**/ 3, 4, 0, 0, 1, 0, 0, 0,  /**/ 2, 0, 0, 0, 1, 0, 0, 0,  /**/ 5, 1, 0, 0, 1, 0, 1, 0 }
		"LES" => { /*spanish*/ 2.5, 0.5, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPA:RP", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 1.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 1.75, 0, 0.5, 0, 1.2, 0, 2, 0,  /**/ 2.5, 1, 0.5, 0, 1.2, 0, 1, 0 }
		"SEIN" => { /*header*/ 20, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNB:LN:RNB:RN", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0.5,  /**/ 2, 3.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 8, 5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 15, 3.5, 0.5, 0, 2.25, 0, 0, 0.5,  /**/ 19, 1, 0.5, 0, 2.5, 0, 0, 0,  /**/ 20, 0, 0, 0, 1, 0, 1, 0 }
		"GEGEN" => { /*header*/ 8, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNC:RN", /*data*/ 0.5, 7.5, 0.5, 1, 1, 0, 0, 0,  /**/ 1.5, 10, 0.5, 2, 1, 0, 0, 0.5,  /**/ 4, 8, 0.5, 0, 1, 0, 0, 0,  /**/ 4, 4.5, 0, 0, 1, 0, 0, 0.5,  /**/ 6.25, 5.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 8, 3, 0, 0, 1, 0, 0, 0,  /**/ 8, 0, 0, 0, 1, 0, 1, 0 }
		"HAB" => { /*header*/ 4, 0.5, 0, 0, 1.5, 1.5, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 1, 0.5, 0, 1, 0, 1, 0 }
		"HAT" => { /*header*/ 4.5, 0.5, 0, 0.5, 1, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNB:LN:RNC:RN", /*data*/ 0, 8.75, 0.5, 1, 1.5, 0, 0, 0,  /**/ 1, 10, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 3.5, 7.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3.5, 1.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 0, 2, 0.5, 0, 1, 0, 1, 0 }
		"DA" => { /*header*/ 0, 0.5, 0, 0, 0, 2.25, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"SIND" => { /*header*/ 2.5, 0.5, 0, 0.5, 1, 2.5, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, "", "", "", 0, "LPA:LP:RPB:RP", /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 7.75, 6.2, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ -0.14, 0.5, 0.5, 0, 1, 0, 0, 0 }
		"VOR" => { /*header*/ 5, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RNC:RN", /*data*/ 0, 10, 0, 1, 1, 0, 0, 0.5,  /**/ 0, 6.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.25, 5.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 1, 3, 0, 0, 0.5,  /**/ 5, 2.5, 0.7, 0, 3, 0, 0, 0.7,  /**/ 2.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"VORAR" => { /*header*/ 5, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0.5, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RNC:RN", /*data*/ 0, 10, 0, 1, 1, 0, 0, 0.5,  /**/ 0, 6.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.25, 5.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 5, 0.5, 1, 3, 0, 0, 0.5,  /**/ 8, 2.5, 0.7, 0, 3, 0, 0, 0.7,  /**/ 5.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 3, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 5.5, 5, 0.5, 0, 1, 0, 0, 0,  /**/ 8, 7.5, 0.5, 0, 1, 0, 0, 0,  /**/ 5.5, 10, 0.5, 0, 1, 0, 0, 0,  /**/ 3, 7.5, 0.5, 0, 1, 0, 0, 0,  /**/ 5.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"ANT" => { /*header*/ 26, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 4, 4.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 7, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 11.5, 4.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 17.75, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 22, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 26, 1, 0.5, 0, 1, 0, 1, 0 }
		"RÜCK" => { /*header*/ 8, 0.5, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK:RKA:RK", /*data*/ 2.5, 0, 0.5, 1, 1, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 1, 0 }
		"UR" => { /*header*/ 5, 0.5, 0, 0, 0, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RNC:RN", /*data*/ -2, 10, 0, 1, 3, 0, 0, 0.5,  /**/ 3, 5, 0.5, 0, 1, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"ANTI" => { /*header*/ 25, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 4, 4.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 8, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 11, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 18, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 22, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 22.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 23.5, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 24.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 23.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 22.5, 1, 0.5, 0, 1, 0, 1, 0 }
		"ZURÜCK" => { /*header*/ 5, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK", /*data*/ -2, -4, 0.5, 1, 1, 0, 0, 0.5,  /**/ 1.5, -3, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4.25, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 2, 0, 0, 0.5,  /**/ 1, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 1, 1, 0.5, 0, 2, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 0, 0.5, 1, 1, 0, 1, 0 }
		"INTER" => { /*header*/ 5, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK", /*data*/ -2, -4, 0.5, 1, 1, 0, 0, 0.5,  /**/ 1.5, -3, 0.5, 2, 1, 0, 0, 0.5,  /**/ 4, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 0, 0.5, 1, 1, 0, 1, 0 }
		"ION" => { /*header*/ 25, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 4, 4.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 8, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 11, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 18, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 22, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 25, 2, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ 18,  5,  0,  "@#/_",  0,  0,  0,  0 }
		"ON" => { /*header:french*/ 25, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 4, 4.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 8, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 11, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 18, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 22, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 25, 2, 0.5, 0, 1, 0, 1, 0 }
		"HAFT" => { /*header*/ 4, 0.5, 0, 0, 4, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 2, 0.5, 0, 1, 0, 1, 0 }
		"SCHAFT" => { /*header*/ 20, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 1.5, 0, 0, 0.5,  /**/ 0.75, 3, 0.5, 0, 3, 0, 0, 0.5,  /**/ 19.25, 2.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 20, 0, 0.5, 0, 1, 0, 1, 0 }
		"TALL" => { /*header*/ 3, 0.5, 0, 0.5, 0.75, 0.75, 0, 0, 0, 0, "", "", 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 15, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 7, 18.5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 6.1, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 17, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, 12, 0.5, 0, 2.5, 0, 0, 0,  /**/ 7, 10, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 8, 12, 0.5, 0, 1, 0, 1, 0 }
		"TUNG" => { /*header*/ 8, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, /*data*/ 7, 18, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 8, 19.5, 0.5, 0, 1.3, 0, 0, 0.5,  /**/ 9, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 8, 19.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 7, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 7, 11.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 6, 10, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 5, 12, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 7, 14, 0.5, 0, 1, 0, 1, 0 }
		"AUF" => { /*header*/ 9, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNB:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 2, 2, 0.5, 0, 2, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7.5, 2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 9, 5, 0.5, 0, 1, 0, 1, 0 }
		"OFF" => { /*english*/ 9, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNB:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 2, 2, 0.5, 0, 2, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7.5, 2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 9, 5, 0.5, 0, 1, 0, 1, 0 }
		"AUS" => { /*header*/ 20, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNA:RN", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0.5,  /**/ 3, 3, 0.5, 0, 1, 0, 0, 0.5,  /**/ 10, 5, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 17, 3, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 19, 1, 0.5, 0, 3, 0, 0, 0.5,  /**/ 20, 0, 0.5, 0, 1, 0, 1, 0 }
		"-AUS" => { /*header*/ 20, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "RNB:RN", /*data*/ 10, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 17, 3, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 19, 1, 0.5, 0, 3, 0, 0, 0.5,  /**/ 20, 0, 0.5, 0, 1, 0, 1, 0 }
		// BEI (special case): the original german variant has been replaced bei spanish version (a little bit larger - define two different tokens if not acceptable in german)
		"BEI" => { /*header:differentinspanish*/ 23, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 6, 2, 0.5, 0, 2, 0, 0, 0.5,  /**/ 14, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 17, 0.2, 0, 0, 1, 0, 2, 0.5,  /**/ 23, 5, 0.5, 0, 1, 0, 1, 0 }
		"BEI+AR" => { /*header*/ 25, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 5, 2, 0.5, 0, 2, 0, 0, 0.5,  /**/ 11, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 19, 0, 0.5, 0, 1, 0, 0, 0.5, /**/ 21.5, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 19, 5, 0.5, 0, 1, 0, 0, 0.5, /**/ 16.5, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 19, 0, 0.5, 0, 1, 0, 0, 0.5, /**/ 20.5, 0.2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 25, 5, 0.5, 0, 1, 0, 1, 0 }
		"DURCH" => { /*header*/ 10, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 3, 10, 0, 1, 1, 0, 0, 0.3,  /**/ 0.5, 5, 0.3, 0, 1, 0, 0, 0,  /**/ 8, 0, 0, 0, 1, 0, 1, 0 }
		"DIS" => { /*header*/ 8, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0.5,  /**/ -1, 7.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 10, 0.5, 0, 1, 0, 0, 0,  /**/ 6.5, 5, 0, 0, 1, 0, 1, 0, /*diacritics*/ 5,  1,  0,  "@#.",  0,  0,  0,  0, }
		"SICH" => { /*header*/ 11.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0, 1, 1, 0, 0, 0.5,  /**/ 2, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 9.5, 0.5, 0, 1, 0, 0, 0,  /**/ 8, 5, 0, 0, 1, 0, 1, 0 }
		"SOLCH" => { /*header*/ 15, 1, -1, 0.5, 0.5, 0.5, 0, 0, 0, 0, "", "", 0, 0, -0.5, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNA:RN", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0.5,  /**/ 2.5, 4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5.5, 4, 0, 0, 1, 0, 0, 0,  /**/ 9, 0, 0, 0, 1, 0, 0, 0,  /**/ 10, 3.5, 0, 1, 1.3, 0, 0, 0.5,  /**/ 12.5, 5, 0.7, 2, 2.5, 0, 0, 0.8,  /**/ 15, 2, 0.8, 0, 3, 0, 0, 0.5,  /**/ 15, -13, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 13, -15, 0.5, 0, 2, 0, 99, 0.5,  /**/ 11.5, -14, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 10, -12, 0.5, 0, 1, 0, 2, 0.5,  /**/ 13, -7, 0.5, 0, 1, 0, 1, 0.5,  /**/ 15, -2.5, 0, 4, 1, 0, 0, 0 }
		"WIRD" => { /*header*/ 5, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0.5, 1, 1, 0, 0, 0.5,  /**/ 3.5, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 7.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 10, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 7.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0,  /**/ 5, 5, 0.5, 1, 1, 0, 1, 0 }
		"SELB" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, "LNA:LN:RNA:RN", /*data*/ 0.5, 0, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1, 0.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0, 0.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 0, 0.5, 0, 1, 0, 2, 0.5,  /**/ 2, 2, 0.5, 0, 1, 0, 1, 0 }
		"WO" => { /*header*/ 7, 0.5, 0, 0.5, 0.5, 0.5, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 1.5, 8.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 5, 10, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 1.5, 8.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 6, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1, 3.25, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2.5, 1.5, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 6, 1.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6.5, 0, 0.5, 0, 1, 0, 1, 0 }
		"VILLEICHT" => { /*header*/ 5, 0.5, 0, 0.5, 0.75, 0.75, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 8.5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 2, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 12, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2, 20, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 17, 0.5, 0, 1, 0, 1, 0 }
		"TOT" => { /*header:french*/ 5, 0.5, 0, 0.5, 0.75, 0.75, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 7, 12, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2, 20, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 17, 0.5, 0, 1, 0, 1, 0 }
		"HEIT" => { /*header*/ 24, 0, 1.5, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 24, 20, 0, 1, 1, 0, 0, 0,  /**/ 24, 20, 0, 0, 1, 0, 1, 0, /*diacritics*/ 19,  25,  0,  "@#/_",  0,  0,  0,  0,}
		"HEIT-1" => { /*header*/ 24, 0, 1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 24, 20, 0, 1, 1, 0, 0, 0,  /**/ 24, 20, 0, 0, 1, 0, 1, 0 }
		"FORT" => { /*header*/ 8, 0.5, 0, 0, 1, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNC:RN", /*data*/ 5, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 8, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 6.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, -5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4.25, -9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 2.5, 0.5, 4, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"\" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0 }
		

		// distances
		"#0" => { /*header*/ 0, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, "",  /**/ "", "", "", 0, 2, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#S#" => { /*header*/ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 3, 0, 0, 0, 1, 5, 1, 0 }
		"#1" => { /*header*/ 1, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#2" => { /*header*/ 2, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#3" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#4" => { /*header*/ 4, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#5" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#6" => { /*header*/ 6, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#7" => { /*header*/ 7, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#8" => { /*header*/ 8, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#9" => { /*header*/ 9, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#10" => { /*header*/ 10, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#1-" => { /*header*/ -1, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#2-" => { /*header*/ -2, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#3-" => { /*header*/ -3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#4-" => { /*header*/ -4, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#5-" => { /*header*/ -5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#6-" => { /*header*/ -6, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#7-" => { /*header*/ -7, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#8-" => { /*header*/ -8, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#9-" => { /*header*/ -9, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }

		// tokens
		"SCHM" => { /*header*/ 6, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 2, 9, 0.5, 1, 1, 0, 0, 0.5,  /**/ 4, 10, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6, 9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 2.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 1.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, 0.5, 0.5, 0, 3, 0, 0, 0,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"SCHW" => { /*header*/ 7, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPD", /*data*/ 5, 17, 0.5, 1, 1, 0, 0, 0.5,  /**/ 7, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 9, 20, 0.5, 98, 1.5, 0, 0, 0.5,  /**/ 7, 19, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 17, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"MPF" => { /*header*/ 6, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNC:LN:RNA:RN", /*data*/ 0, 9, 0.5, 1, 1.5, 0, 0, 0,  /**/ 1.5, 10, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 3, 8, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 4.5, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 5.75, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4.5, 3.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.5, 3.1, 0.5, 0, 1, 0, 0, 0.8,  /**/ 0.75, 2.6, 0.8, 0, 1, 0, 0, 0.5,  /**/ 1.5, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4.5, 2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5.75, 2, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ -7,  15,  0,  "@#/_",  0,  0,  0,  0 }
		"SCH" => { /*header*/ 9, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 5, 7, 0.5, 1, 1, 0, 0, 0.5,  /**/ 7, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 9, 10, 0.5, 98, 1.5, 0, 0, 0.5,  /**/ 7, 9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0.5,  /**/ 5, 2.5, 0, 4, 1, 0, 0, 0 }
		"^SCH" => {  /*h*/ 9,  1,  -1,  0.5,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0.1, /**/ 3,  0,  0,  0,  0,  0,  0,  "LNA:LN:RPC:RP", /*d*/ 5,  7,  0.5,  1,  1,  0,  0,  0.5, /**/ 7,  9,  0.5,  0,  1,  0,  0,  0.5, /**/ 9,  10,  0.5,  0,  1.5,  0,  0,  0.5, /**/ 7,  9,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 5,  7,  0.5,  0,  3,  0,  0,  0.5, /**/ 5,  -8,  0.5,  0,  2.5,  0,  0,  0.5, /**/ 3,  -10,  0.5,  0,  2,  0,  0,  0.5, /**/ 1.5,  -9.5,  0.5,  0,  1.5,  0,  99,  0.5, /**/ 0,  -8,  0.5,  0,  1,  0,  2,  0.5, /**/ 5,  -6.5,  0.5,  0,  1,  0,  1,  0.5, /**/ 5,  -6,  0,  4,  1,  0,  0,  0.5 }
		"^SCHM" => { /*header*/ 6, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0.1, 3, 0, 0, 0, 0, 0, 0, 0, /*data*/ 2, 9, 0.5, 1, 1, 0, 0, 0.5,  /**/ 4, 10, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6, 9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 2.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 1.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, 0.5, 0.5, 0, 3, 0, 0, 0,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"^SCHW" => { /*header*/ 7, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0.1, 3, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 17, 0.5, 1, 1, 0, 0, 0.5,  /**/ 7, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 9, 20, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 7, 19, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 17, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"^CH" => { /*header*/ 6, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0.1, 3, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 4, 10, 0.7, 2, 2.5, 0, 0, 0.5,  /**/ 7, 6.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 7, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5.5, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 3, -8.5, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 2.5, -6.5, 0.5, 0, 1, 0, 2, 0.5,  /**/ 4, -4, 0.5, 0, 1, 0, 1, 0.5,  /**/ 7, 2.5, 0, 4, 1, 0, 0, 0 }
		"^ZW" => { /*header*/ 5, 1, -1, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0.1, 3, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 20, 0, 1, 3, 0, 0, 0,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"^Z" => { /*header*/ 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 1, -1, 0, 3, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 5, 10, 0, 1, 3, 0, 0, 0,  /**/ 5, -5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4.25, -9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5, 2.5, 0.5, 4, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"CK" => { /*header*/ 4, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNE", /*data*/ 0, 28.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 30, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 27, 0.5, 0, 2.5, 0, 0, 0,  /**/ 4, 25, 0, 0, 3, 0, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 1, 0,  /**/ 4, 2.5, 0, 4, 1, 0, 0, 0 }
		"FF" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 27, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.8, 30, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 28, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 1, 0.5, 0, 1, 0, 1, 0 }
		"LL" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNA:RN", /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 8.5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 2, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 1.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2, 0.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 2, 0.5,  /**/ 3, 2, 0.5, 0, 1, 0, 1, 0 }
		"LT" => { /*header*/ 8.5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPD", /*data1*/ 3, 15.5, 0.5, 1, 1.0, 0, 0, 0.5,  /*2*/ 5, 18, 0.5, 2, 1.0, 0, 0, 0.5,  /*3*/ 2, 20, 0.5, 0, 1.75, 0, 0, 0.5,  /*4*/ 1.5, 16.75, 0.5, 0, 2.0, 0, 0, 0.0,  /*5*/ 6, 10, 0.0, 0, 1.5, 0, 0, 0,  /*6*/ 2, 9, 0.5, 0, 2.0, 0, 0, 0.5,  /*7*/ 0, 5.75, 0.5, 0, 2.5, 0, 0, 0.5,  /*8*/ 1.5, 2, 0.5, 0, 2.0, 0, 0, 0.5,  /*9a*/ 6, 0, 0.5, 4, 1.5, 0, 2, 0.5, /*9b*/ 6, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /*10*/ 8.5, 3.5, 0.5, 0, 1.0, 0, 1, 0.5 }
		"MM" => { /*header*/ 13, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 9, 0.5, 1, 1, 0, 0, 0.5,  /**/ 1, 10, 0.5, 0, 1.2, 0, 0, 0.5,  /**/ 8, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 10, 8.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 10, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 12, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 12, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 13, 2, 0.5, 0, 1, 0, 1, 0 }
		"NN" => { /*header*/ 17, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 9, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 5, 8, 0.5, 0, 3, 0, 0, 0.5,  /**/ 11, 2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 14, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 14, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 17, 2, 1, 0, 1, 0, 1, 0 }
		"PP" => { /*header*/ 6, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNE", /*data*/ 0, 30, 0, 1, 3, 0, 0, 0,  /**/ 0, 3, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 3, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 6, 2, 0, 0, 1, 0, 1, 0 }
		"RR" => { /*header*/ 10, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, "LKC:LK:RKC:RK", /*data*/ 0, 8, 0.5, 1, 1, 0, 0, 0.5,  /**/ 5, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 8, 7.75, 0.5, 5, 3, 0, 0, 0.5,  /**/ 10, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 9, 0.25, 0.5, 5, 2, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 4.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 10, 0.5, 4, 1, 0, 0, 0.5,  /**/ 5, 10, 0.5, 0, 1, 0, 1, 0 }
		"RR6" => { /*header*/ 10, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKC:LK", /*data*/ /*1*/ 5, 0, 0.5, 1, 1, 0, 0, 0.5, /*2*/ 9, 0.25, 0.5, 0, 1.0, 0, 0, 0.5, /*3*/ 10, 4, 0.5, 0, 1, 0, 0, 0.5, /*4*/ 8, 7.75, 0.5, 0, 1, 0, 0, 0.5, /*5*/ 5, 10, 0.5, 0, 1.5, 0, 0, 0.5, /*6*/ 1, 9, 0.5, 0, 2.5, 0, 0, 0.5, /*7*/ 0.5, 4.75, 0.5, 0, 2.5, 0, 0, 0.5, /*8*/ 5, 0, 0.5, 0, 1, 0, 1, 0.5 }
		"SS" => { /*header*/ 14, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 9, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 7.5, 8, 0, 0, 3, 0, 0, 0,  /**/ 9.5, 6, 0, 0, 3, 0, 0, 0,  /**/ 14, 0, 0, 0, 1, 0, 1, 0, /*diacritics*/ 12,  -5,  0,  "@#.",  0,  0,  0,  0, /*diacritics*/ -2,  15,  0,  "@#/_",  0,  0,  0,  0 }
		"SUS" => { /*header*/ 18, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", /*data*/ 0, 0, 0.5, 1, 1.0, 0, 0, 0.5,  /**/ 1, 4, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 5.5, 4.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 13, 0, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 18, -5, 0.5, 0, 1, 0, 1, 0.5 }
		"SOBRE" => { /*spanish*/ 15.5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 13, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RNC:RN", /*data*/ 0, 0, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 9, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 10.5, 8, 0.5, 0, 3, 0, 0, 0.5,  /**/ 13.75, 5.4, 0.5, 0, 3, 0, 0, 0.5, /**/ 15.5, 2.5, 0.5, 0, 3, 0, 0, 0.5, /**/ 13, 0, 0.5, 0, 3, 0, 0, 0.5, /**/ 10.5, 2.5, 0.5, 0, 3, 0, 0, 0.5, /**/ 13.75, 5.4, 0.5, 0, 3, 0, 1, 0.5 }
		"TT" => { /*header*/ 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPE", /*data*/ 0, 30, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"CH" => { /*header*/ 5, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 2.5, 10, 0.7, 2, 2.5, 0, 0, 0.8,  /**/ 5, 7, 0.8, 0, 3, 0, 0, 0.5,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 99, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0.5,  /**/ 5, 2.5, 0, 4, 1, 0, 0, 0 }
		"ND" => { /*header*/ 3.5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNB:RN", /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3.5, 7, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0, 0, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"NG" => { /*header*/ 4, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "LPB:LP:RPC:RP", /*data*/ 2.5, 7.5, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 3, 9.25, 0.5, 0, 1.3, 0, 0, 0.5,  /**/ 5, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, 9.25, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2.5, 7.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3.5, 1.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, 2.25, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 3.5, 4, 0.5, 0, 1, 0, 1, 0.5,  /**/ 3.5, 4, 0, 4, 1, 0, 0, 0 }
		"NK" => { /*header*/ 6, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "LPB:LP:RPD", /*data*/ 3, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 6, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, 2, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 5, 0.5, 0, 1, 0, 1, 0.5,  /**/ 4, 5.5, 0, 4, 1, 0, 0, 0 }
		"NS" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPB:LP:RPC:RP", /*data*/ 2, 5.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 5, 7.75, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 9, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2.75, 1.25, 0.5, 0, 3, 0, 0, 0.5,  /*diacriticsbeforeearlyexit*/ /*0,  -4,  0,  "@#.",  0,  0,  0,  0,*/ /**/ 1.5, 0, 0.5, 0, 2.5, 0, 99, 0.5,  /**/ 0, 2, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 2.5, 2.75, 0.5, 0, 1, 0, 1, 0.5,  /**/ 3, 3.5, 0, 4, 1, 0, 0, 0 }
		"PF" => { /*header*/ 8, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNC:RN", /*data*/ 0, 7, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0.5, 7, 0.5, 2, 1, 0, 0, 0.5,  /**/ 6, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 9, 11.1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7.5, 16.5, 0.5, 0, 1.25, 0, 0, 0.5,  /**/ 2, 20, 0.5, 0, 2.25, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2, 0, 0.5, 4, 1.25, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.25, 0, 2, 0.5,  /**/ 4, 2, 0.5, 0, 1, 0, 1, 0 }
		"SP" => { /*header*/ 8, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 18, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 20, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 18, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ /*4, 15, 0.5, 0, 3, 0, 0, 0.5,*/  /**/ /*4, 5, 0.5, 0, 2.5, 0, 0, 0.5,*/  /**/ 4, 3, 0.5, 0, 2, 0, 0, 0.5,  /**/ 6, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 6, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 8, 2, 0.5, 0, 1, 0, 1, 0 }
		// the following two tokens were added manually in order to preserve examples for the se1rev1 test for proportional and orthogonal knots		
		"SP1" => { /*testproportional*/ 8, 0.5, 0, 0.5, 0, 0, 0, 2, 6, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 18, 0.5, 1, 1.5, 96, 0, 0.5,  /**/ 2, 20, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 18, 0.0, 0, 2.5, 96, 0, 0.0,  /**/ 4, 2, 0.5, 0, 2, 160, 0, 0.5,  /**/ 6, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 6, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 8, 2, 0.5, 0, 1, 160, 1, 0 }
		"SP2" => { /*testorthogonal*/ 8, 0.5, 0, 0.5, 0, 0, 0, 2, 6, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 18, 0.5, 1, 1.5, 80, 0, 0.5,  /**/ 2, 20, 0.5, 2, 2, 80, 0, 0.5,  /**/ 4, 18, 0.0, 0, 2.5, 80, 0, 0.0,  /**/ 4, 2, 0.5, 0, 2, 144, 0, 0.5,  /**/ 6, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 6, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 8, 2, 0.5, 0, 1, 144, 1, 0 }
		
		"MP" => { /*spanishandenglish*/ 8, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 18, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 20, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 18, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4, 15, 0.5, 0, 3, 0, 0, 0.5,  /**/ 4, 5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4, 3, 0.5, 0, 2, 0, 0, 0.5,  /**/ 6, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 6, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 8, 2, 0.5, 0, 1, 0, 0, 0, /*n*/ 4, 4, 0.5, 0, 1, 0, 0, 0, /*n*/ 1, 3, 0.5, 0, 1, 0, 0, 0, /*n*/ 6, 2, 0.5, 0, 1, 0, 2, 0, /*n*/ 8, 2, 0.5, 0, 1, 0, 1, 0 }
		"PERHAPS" => { /*english*/ 8, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 4, 20, 0.0, 0, 2.5, 0, 0, 0.5,  /**/ 4, 15, 0.5, 0, 3, 0, 0, 0.5,  /**/ 4, 5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4, 3, 0.5, 0, 2, 0, 0, 0.5,  /**/ 6, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 6, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 8, 2, 0.5, 0, 1, 0, 0, 0, /*n*/ 4, 4, 0.5, 0, 1, 0, 0, 0, /*n*/ 1, 3, 0.5, 0, 1, 0, 0, 0, /*n*/ 6, 2, 0.5, 0, 1, 0, 2, 0, /*n*/ 8, 2, 0.5, 0, 1, 0, 1, 0 }
		"ST" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 1, 0 }
		"XT" => { /*header*/ 10, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 5, 15, 0.5, 2, 2, 0, 0, 0.5,  /**/ 3.25, 18.75, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0,  /**/ 0, 10, 0, 0, 3, 0, 0, 0, /**/ 10, 0, 0, 0, 1, 0, 1, 0 }
		"ZW" => { /*header*/ 5, 1, -1, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 5, 20, 0, 1, 3, 0, 0, 0,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"EN" => { /*header*/ 5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 9, 0, 0, 1, 1, 0, 0, 0,  /**/ 9, 0, 0, 0, 1, 0, 1, 0 }
		"EM" => { /*header*/ 18, 5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 5, 0, 0, 1, 1, 0, 0, 0,  /**/ 18, 0, 0.5, 1, 1, 0, 1, 0 }
		"/EN" => { /*header*/ 5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 10, 0, 0, 1, 1, 0, 0, 0,  /**/ 10, 0, 0, 0, 1, 0, 1, 0 }
		"/EM" => { /*header*/ 18, 5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 10, 0, 0, 1, 1, 0, 0, 0,  /**/ 15, 0, 0.5, 1, 1, 0, 1, 0 }
		"DEN" => { /*header*/ 5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 1, 0 }
		"DEM" => { /*header*/ 13, 5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 13, 0, 0.5, 1, 1, 0, 1, 0 }
		"VR+AR" => { /*header*/ 5, 0.5, 0, 0.5, 0, 1, 0, 0, 0, 0, "", "", 0, 0, 0.5, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RKB:RK", /*data*/ 2.5, 5, 0.5, 1, 3, 0, 0, 0.5,  /**/ 5, 2.5, 0.7, 0, 3, 0, 0, 0.7,  /**/ 2.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0.7,  /**/ 5, 7.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 10, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 7.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"B" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0.0,  /**/ 0, 3, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 5, 2, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0, /*diacritics*/ -1,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"C" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 1, 9.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 3, 10, 0.5, 98, 3, 0, 0, 0.5,  /**/ 1, 9.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 7.5, 0.5, 0, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"D" => { /*header*/ 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0, /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0 }
		"F" => { /*header*/ 4, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 2, 0.5, 0, 1, 0, 1, 0 }
		"G" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNC:RN", /*data*/ 1.75, 8.75, 0.5, 1, 1.5, 0, 0, 0,  /**/ 2, 10, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 4.5, 8, 0.0, 0, 3, 0, 0, 0,  /**/ 4.5, 0, 0, 0, 1, 0, 1, 0,  /**/ 4.5, 2.5, 0, 4, 1, 0, 0, 0 }
		"H" => { /*header*/ 4, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "LNB:LN:RPC:RP", /*data*/ 0.5, 9, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1.75, 10, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 3.5, 7.2, 0, 0, 3, 0, 0, 0,  /**/ 3.5, 2, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.95, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 0.5, 0.5, 0, 1, 0, 99, 0.5,  /**/ 0, 2.4, 0.5, 0, 1.0, 0, 2, 0.5,  /**/ 3.5, 4.59, 0.5, 0, 1, 0, 1, 0.5,  /**/ 3.5, 5, 0, 4, 1, 0, 0, 0 }
		"J" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPB:LP:RPC:RP", /*data*/ 3, 10, 0, 1, 2.5, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 1.0, 0, 0, 0.5,  /**/ 0, 1.5, 0.5, 0, 1.0, 0, 99, 0.5,  /**/ 0.25, 2.5, 0.5, 0, 1.0, 0, 2, 0.5,  /**/ 3, 5, 0.5, 0, 1, 0, 1, 0 }
		"J^" => { /*header*/ 3, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 2, 10, 0, 1, 2.5, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 1.0, 0, 0, 0.5,  /**/ 0, 1.5, 0.5, 0, 1.0, 0, 0, 0.5,  /**/ 3, 5, 0.5, 0, 1, 0, 1, 0 }
		"K" => { /*header*/ 4, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RND", /*data*/ 0, 18, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 20, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 18, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4, 15, 0.5, 0, 3, 0, 0, 0,  /**/ 4, 0, 0, 0, 1, 0, 1, 0,  /**/ 4, 2.5, 0, 4, 1, 0, 0, 0 }
		"L" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPB:RP", /*data*/ /*diacritics*/ -1.5,  15,  0,  "@#/.",  0,  0,  0,  0, /**/ 0, 5, 0.5, 1, 1.0, 0, 0, 0.5,  /**/ 3.25, 8.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1.75, 0, 0, 0,  /**/ 2, 0, 0.5, 4, 1.0, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.0, 0, 2, 0.5,  /**/ 3.25, 1.5, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0, /*diacritics*/ 0,  15,  0,  "@#/_",  0,  0,  0,  0 }
		"LUI" => { /*header:french*/ 3, 0.5, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 1, 0, 1, 0, 0, 0.5,  /**/ 3, 4, 1, 0, 1, 0, 0, 0.5,  /**/ 2, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 8.5, 0.5, 0, 1, 0, 2, 0.5,  /**/ 2.5, 7.5, 0.5, 0, 1, 0, 1, 0 }
		"@L" => { /*header*/ 0, 0.5, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 1, 0, 1, 0, 0, 0.5,  /**/ 1, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ -1, 1, 0.5, 0, 1, 0, 2, 0.5,  /**/ 0, 0, 0.5, 0, 1, 0, 1, 0 }
		"@L3" => { /*header*/ 0, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 1, 0, 1, 0, 0, 0.5,  /**/ -0.75, 0.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ -1.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ -0.75, -0.75, 0.5, 0, 1, 0, 2, 0.5,  /**/ 0, 0, 0.5, 0, 1, 0, 1, 0 }
		"&L" => { /*header*/ 2, 0.5, 0, 0.5, 1, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0.5, 0, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1, 0.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 0.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0.5, 0, 0.5, 0, 2.5, 0, 1, 0 }
		"M" => { /*header*/ 7.5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ /*diacritics*/ 0,  -5,  0,  "@#_",  0,  0,  0,  0, /**/ 0, 8.7, 0.5, 1, 1.0, 0, 0, 0.5,  /**/ 0.75, 10, 0.5, 2, 1.0, 0, 0, 0.5,  /**/ 1.7, 10, 0.5, 0, 1.75, 0, 0, 0.5,  /**/ 3.8, 7.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 1.75, 0, 0, 0,  /**/ 5.5, 0, 0.5, 4, 1.0, 0, 0, 0.5,  /**/ 5.5, 0, 0.5, 0, 1.0, 0, 2, 0.5,  /**/ 7.5, 1.75, 0.5, 0, 1, 0, 1, 0 }
		"N" => { /*header*/ 11, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 4.25, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1.9, 5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4.5, 3.9, 0.5, 0, 3, 0, 0, 0.5,  /**/ 7.5, 1, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 9.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 9.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 11, 1, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ 5,  -5,  0,  "@#/",  0,  0,  0,  0 }
		"N=" => { /*header*/ 12, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN", /*data*/ 0, 0, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 4.25, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2.9, 5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 5.5, 3.9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 8.5, 1, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 10.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 10.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 12, 1, 0.5, 0, 1, 0, 1, 0 }
		"P" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 20, 0, 1, 3, 0, 0, 0,  /**/ 0, 2.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 5, 2, 0, 0, 1, 0, 1, 0 }
		"Q" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPD", /*data*/ 1, 19, 0.5, 1, 1, 0, 0, 0.5,  /**/ 3, 20, 0.5, 98, 3, 0, 0, 0.5,  /**/ 1, 19, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 15, 0.5, 0, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"VR" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RKB:RK", /*data*/ 2.5, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3.75, 4, 0.7, 5, 2.5, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 3, 0, 0, 0.7,  /**/ 4.5, 0.5, 0.7, 5, 2, 0, 0, 0.7,  /**/ 3.25, 0.15, 0.7, 5, 1.5, 0, 0, 0.7,  /**/ 2.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 4, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ -2,  10,  0,  "@#/_",  0,  0,  0,  0, /*diacritics*/ 0,  10,  0,  "@#/.",  0,  0,  0,  0 }
		"AR" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK:RKA:RK", /*data*/ 2.5, 0, 0.5, 1, 1, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ 5,  -5,  0,  "@#/",  0,  0,  0,  0, /*diacritics*/ 0,  -5,  0,  "@#_",  0,  0,  0,  0 }
		"AR^" => { /*header*/ 5, 0.5, 0, 0.5, 0, 3, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 2.5, 0, 0.5, 1, 1, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 5, 2.5, 0.7, 0, 1, 0, 1, 0 }
		"AR5" => { /*header*/ 5, 0.5, 0, 0.5, 0, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 2.5, 0.7, 1, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 2.5, 0, 0.5, 1, 1, 0, 1, 0 }
		"AUF+AR" => { /*header*/ 10.5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 1.75, 2.5, 0.5, 0, 2, 0, 0, 0,  /**/ 5.75, 0, 0.5, 0, 1, 0, 0, 0.7,  /**/ 10.5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 8, 5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 5.5, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 8, 0, 0.5, 0, 1, 0, 1, 0 }
		"OFF+AR" => { /*english*/ 10.5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 1.75, 2.5, 0.5, 0, 2, 0, 0, 0,  /**/ 5.75, 0, 0.5, 0, 1, 0, 0, 0.7,  /**/ 10.5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 8, 5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 5.5, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 8, 0, 0.5, 0, 1, 0, 1, 0 }
		"@R" => {  /*R3^fromDESSBAS*/ 5,  0.5,  0,  0.5,  0,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.5,  0,  1,  0,  0,  0.5, /**/ -2.5,  4,  0.7,  0,  1,  0,  0,  0.5, /**/ -5,  1.5,  0.7,  0,  1,  0,  0,  0.5, /**/ -2.5,  -1,  0.5,  0,  1,  0,  2,  0.5, /**/ 0,  1.5,  0.5,  0,  1,  0,  1,  0.7 }
		"@R3^" => {  /*h*/ 5,  0.5,  0,  0.5,  0,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.5,  0,  1,  0,  0,  0.5, /**/ -2.5,  4,  0.7,  0,  1,  0,  0,  0.5, /**/ -5,  1.5,  0.7,  0,  1,  0,  0,  0.5, /**/ -2.5,  -1,  0.5,  0,  1,  0,  2,  0.5, /**/ 0,  1.5,  0.5,  0,  1,  0,  1,  0.7 }			
		"@R6" => { /*header*/ 0, 0.5, 0, 0.5, 0, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 5, 0.7, 0, 1, 0, 0, 0.5,  /**/ -2.5, 2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 0, 0, 0.5, 0, 1, 0, 1, 0 }
		"S" => { /*header*/ 6.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 4, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1, 5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 3, 4.5, 0.5, 0, 3, 0, 0, 0,  /**/ 5, 3.5, 0.5, 0, 3, 0, 0, 0,  /**/ 8.75, 0, 0, 0, 1, 0, 1, 0, /*diacritics*/ 5,  -5,  0,  "@#.",  0,  0,  0,  0, /*diacritics*/ 5,  10,  0,  "@#/_",  0,  0,  0,  0 }
		"-S" => { /*saftervrSPANISH*/ 6.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 1, 8.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 5.5, 5, 0.5, 2, 2.5, 0, 0, 0,  /**/ 9, 0, 0, 0, 1, 0, 1, 0 }
		"=ES" => { /*header*/ 18.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 2, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 6, 5.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 10, 5.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 12, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 14, 4, 0.5, 0, 3, 0, 0, 0,  /**/ 18.75, 0, 0, 0, 1, 0, 1, 0 }
		"S=" => { /*header*/ 9.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "LNA:LN", /*data*/ 0, 0, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3, 5, 0.5, 0, 2, 0, 0, 0,  /**/ 5, 4, 0.5, 0, 3, 0, 0, 0,  /**/ 9.75, 0, 0, 0, 1, 0, 1, 0, /*diacritics*/ 8,  -5,  0,  "@#/",  0,  0,  0,  0, /*diacritics*/ 8,  -5,  0,  "@#.",  0,  0,  0,  0 }
		"SER" => { /*spanisch*/ 9.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 5.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK", /*data*/ 0, 0, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.25, 4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.75, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/  5, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 5.5, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 8, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 5.5, 0, 0.5, 0, 1, 0, 0, 0.5, /**/ 3, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 5.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"T" => { /*header*/ 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 20, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0, /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0, /*diacritics*/ 0,  25,  0,  "@#/.",  0,  0,  0,  0, /*diacritics*/ -5,  25,  0,  "@#/_",  0,  0,  0,  0 }
		"&T" => { /*header*/ 4, 0, 1.5, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 20, 0, 1, 1, 0, 0, 0,  /**/ 4, 20, 0, 0, 1, 0, 1, 0 }
		"&IT" => { /*spanisch*/ 4, 0, 1.5, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 17.8, 0.5, 1, 1, 0, 1, 0.5 }
		"&T-1" => { /*header*/ 4, 0, 1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 20, 0, 1, 1, 0, 1, 0,  /**/ 4, 20, 0, 0, 1, 0, 1, 0 }
		"&T3/4" => { /*header*/ 4, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 15, 0, 1, 1, 0, 1, 0,  /**/ 4, 15, 0, 0, 1, 0, 1, 0,  /**/ 4, 15, 0, 4, 1, 0, 1, 0 }
		"&&T" => { /*header*/ 4, 0, 1.5, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 20, 0, 1, 1, 0, 1, 0,  /**/ 4, 20, 0, 0, 1, 0, 1, 0 }
		"&T34" => { /*header*/ 4, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 15, 0, 1, 1, 0, 1, 0,  /**/ 4, 15, 0, 0, 1, 0, 1, 0,  /**/ 4, 15, 0, 4, 1, 0, 1, 0 }
		"&TES" => { /*header*/ 23, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 18, 0.5, 1, 1, 0, 0, 0.5,  /**/ 15, 20, 0.5, 0, 1, 0, 0, 0.5, /**/ 20, 17.8, 0.5, 0, 1, 0, 0, 0.5, /**/ 23, 15, 0.5, 0, 1, 0, 1, 0.5 }
		"ET" => { /*header*/ 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 25, 0, 1, 1, 0, 1, 0,  /**/ 4, 25, 0, 0, 1, 0, 1, 0 }
		"ET3/4" => { /*header*/ 4, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 20, 0, 1, 1, 0, 1, 0,  /**/ 4, 20, 0, 0, 1, 0, 1, 0 }
		"V" => { /*header*/ 7, 0.5, 0, 0.5, 1.5, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPD", /*data*/ 0.25, 16.75, 0.5, 1, 1, 0, 0, 0.5,  /**/ 2.25, 19.5, 0.6, 2, 1, 0, 0, 0,  /**/ 6, 20, 0, 98, 1, 0, 0, 0.5,  /**/ 2.25, 19.5, 0.6, 0, 1.5, 0, 0, 0.5,  /**/ 0.25, 16.75, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ -0.75, 14, 0.5, 0, 3, 0, 0, 0.5,  /**/ -1.5, 9.75, 0.5, 0, 3, 0, 0, 0.5,  /**/ -0.5, 4.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1, 2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3.5, 0.25, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 7, 0.5, 0.5, 0, 1, 0, 1, 0 }
		"W" => { /*header*/ 7, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ /*diacritics*/ 3,  -5,  0,  "@#/",  0,  0,  0,  0, /**/ 1.5, 8.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 5, 10, 0.5, 98, 1.5, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 1.5, 8.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 6, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0.5, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 4, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 4.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 7, 1.5, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ 5,  -5,  0,  "@#.",  0,  0,  0,  0 }
		"X" => { /*header*/ 7, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 1, 0, 0, 0.5,  /**/ 3, 7.5, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 3, 9.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1, 9.75, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ -0.5, 6, 0.5, 0, 2, 0, 0, 0.5,  /**/ 0, 5, 0.5, 0, 1.5, 0, 0, 0,  /**/ 7, 0, 0, 0, 1, 0, 1, 0 }
		"Y" => { /*header*/ 10, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0,  /**/ 10, 0, 0, 0, 1, 0, 1, 0 }
		"Z" => { /*header*/ 5, 1, -1, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 5, 10, 0, 1, 3, 0, 0, 0,  /**/ 5, -5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4.25, -9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 2.5, 0.5, 4, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }

		// vowel tokens
		"&E" => { /*header*/ 3, 0.5, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPB:RP", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 1.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.2, 0, 2, 0.5,  /**/ 3.5, 1, 0.5, 0, 1, 0, 1, 0 }
		"&A" => { /*header*/ 0, 0.5, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPB:RP", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"&U" => { /*header*/ 5, 0.5, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPB:RP", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 1, 0 }
		"&O" => { /*header*/ 6.75, 0.5, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 1.5, 0, 0, 0.5,  /**/ 0.75, 3, 0.5, 0, 3, 0, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6.75, 0, 0.5, 0, 1, 0, 1, 0 }
		"&I" => { /*header*/ 2, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0.5, 1, 0.5, 1, 2, 0, 0, 0.5,  /**/ 1, 0.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 0.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 0.5, 0.5, 0, 1, 0, 0, 0,  /**/ 0.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 1, 0, 1, 0 }

		// end vowels
		"-E" => { /*header*/ 1.25, 0.5, 0, 0, 4, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 1, 5, 0, 1, 3, 0, 0, 0,  /**/ 1, 5, 0, 0, 3, 0, 1, 0 }
		"-A" => { /*header*/ 0, 0.5, 0, 0.5, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"-U" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 1, 0 }
		"-O" => { /*header*/ 6.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0, 1, 1.5, 0, 0, 0.5,  /**/ 0.75, 3, 0.5, 0, 3, 0, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6.75, 0, 0.5, 0, 1, 0, 1, 0 }
		"-I" => { /*header*/ 1.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 10, 0, 1, 3, 0, 0, 0,  /**/ 4, 10, 1, 0, 3, 0, 1, 0 }
		"-I1" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 15, 0, 1, 3, 0, 0, 0,  /**/ 0, 15, 1, 0, 3, 0, 1, 0 }
		"-EI" => { /*header*/ 1.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 10, 0, 1, 3, 0, 0, 0,  /**/ 4, 10, 1, 0, 3, 0, 1, 0 }
		"-^EI" => { /*header*/ 1.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 10, 0, 1, 3, 0, 0, 0,  /**/ 4, 10, 1, 0, 3, 0, 1, 0 }
		"/I" => { /*header*/ 1.25, 0.5, 0, 0.5, 1, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 10, 0, 1, 1, 0, 0, 0 }
		
		// bizarre things (?)
		"0-" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"00" => { /*header:coordinate00:french*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		

		// beginnings
		"0N-" => { /*header*/ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LMA", /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"0D-" => { /*header*/ 3, 0, -0.5, 0, 0, 0, 1, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LMA", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"0U-" => { /*header*/ 5, 0, 0, 0, 0, 0, 1, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LMA", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }

		// spaces and punctuation
		"PSPACE" => { /*header*/ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 2, 0, 0, 0, 1, 5, 2, 0 }
		"~~" => { /*header*/ 12.5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 10, 0, 1, 1, 5, 0, 0.5,  /**/ 2.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 5, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 7.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 10, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 12.5, 10, 0, 0, 1, 0, 1, 0 }
		"~" => { /*header*/ 12.5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 10, 0, 1, 1, 5, 0, 0.5,  /**/ 2.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 5, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 7.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 10, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 12.5, 10, 0, 0, 1, 0, 1, 0 }
		"…" => { /*header*/ 9, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 1, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 0, 1, 0, 1, 0.5,  /**/ 4.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 5, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 4.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 4, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 4.5, 0, 0, 0, 1, 0, 1, 0.5,  /**/ 8.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 9, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 8.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 8, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 8.5, 0, 0, 0, 1, 0, 1, 0 }
		"." => { /*header*/ 2, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 1, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 0, 1, 0, 1, 0 }
		"," => { /*header*/ 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 2, -2, 0, 1, 1, 5, 0, 0,  /**/ 3, 1, 0, 0, 1, 0, 1, 0 }
		";" => { /*header*/ 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 2.5, 4.5, 0, 1, 1, 5, 0, 0,  /**/ 3, 5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 5.5, 0, 0, 1, 0, 1, 0.5,  /**/ 2, 5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 4.5, 0, 0, 1, 0, 1, 0.5,  /**/ 3, 1, 0, 1, 1, 5, 0, 0,  /**/ 2, -2, 0, 0, 1, 0, 1, 0 }
		":" => { /*header*/ 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0.5, 4.5, 0, 1, 1, 5, 0, 0,  /**/ 1, 5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 5.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 4.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 1, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 0, 1, 0, 1, 0 }
		"!" => { /*header*/ 2, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0.5, 20, 0, 1, 1, 5, 0, 0,  /**/ 0.5, 5, 0, 1, 1, 0, 0, 0,  /**/ 0.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 1, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 0, 1, 0, 1, 0 }
		"?" => { /*header*/ 5, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 15, 0, 0, 1, 5, 0, 0.5,  /**/ 1.25, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 20, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.75, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 13, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0,  /**/ 2.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 3, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 2, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 0, 0, 0, 1, 0, 1, 0 }
		"¿" => { /*header:spanish*/ 5, 0, 0, 0, 4, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 5, 0, 0, 0, 1, 5, 0, 0.5,  /**/ 3.75, -4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, -5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.25, -4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 10, 0.5, 0, 1, 0, 0, 0,  /**/ 2.5, 15, 0, 1, 1, 5, 0, 0,  /**/ 3, 14.5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 14, 0, 0, 1, 0, 1, 0.5,  /**/ 2, 14.5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 15, 0, 0, 1, 0, 1, 0 }
		"¡" => { /*header*/ 2, 0, 0, 0, 4, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0.5, -5, 0, 1, 1, 5, 0, 0,  /**/ 0.5, 10, 0, 1, 1, 0, 0, 0,  /**/ 0.5, 14, 0, 1, 1, 5, 0, 0,  /**/ 1, 14.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 15, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 14.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 14, 0, 0, 1, 0, 1, 0 }
		"=" => { /*header*/ 5, 0, 0, 0, 3, 3, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 11, 0, 1, 1, 5, 0, 0.5,  /**/ 5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 0, 9, 0, 0, 1, 5, 0, 0.5,  /**/ 5, 9, 0, 0, 1, 0, 1, 0 }
		
		// quotes, brackets
		"=" => { /*header*/ 5, 0, 0, 0, 3, 3, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 11, 0, 1, 1, 5, 0, 0.5,  /**/ 5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 0, 9, 0, 0, 1, 5, 0, 0.5,  /**/ 5, 9, 0, 0, 1, 0, 1, 0 }
		"-" => { /*header*/ 5, 0, 0, 0, 3, 3, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/  0, 9, 0, 0, 1, 5, 0, 0.5,  /**/ 5, 9, 0, 0, 1, 0, 1, 0 }
		"'" => { /*header*/ 1, 0, 0, 0, 3, 3, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 1, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 1, 18, 0, 0, 1, 0, 0, 0 }
		""" => { /*header*/ 3, 0, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 1, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 1, 18, 0, 0, 1, 0, 0, 0.5,  /**/ 2, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 3, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 3, 18, 0, 0, 1, 0, 0, 0 }
		"/" => { /*header*/ 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 1, 0, 1, 1, 5, 0, 0,  /**/ 6, 19, 0, 0, 1, 0, 1, 0 }
		"#Q#" => { /*header*/ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 1, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 1, 18, 0, 0, 1, 0, 0, 0.5,  /**/ 2, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 3, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 3, 18, 0, 0, 1, 0, 0, 0 }
		"(" => { /*header*/ 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 4, 13, 0, 1, 1, 5, 0, 0,  /**/ 0, 13, 0, 0, 1, 0, 0, 0,  /**/ 0, 1, 0, 0, 1, 0, 0, 0,  /**/ 4, 1, 0, 0, 1, 0, 0, 0 }
		")" => { /*header*/ 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 13, 0, 1, 1, 5, 0, 0,  /**/ 4, 13, 0, 0, 1, 0, 0, 0,  /**/ 4, 1, 0, 0, 1, 0, 0, 0,  /**/ 0, 1, 0, 0, 1, 0, 0, 0 }
		

		// virtual tokens (vowels; distances, shadowing, position)		
		"A" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#0S" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", 0, "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#N" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#NU" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#W" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#NS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#NDS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#ND" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#NU" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WDS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WD" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WU" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WUS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"E" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"E1" => { /*header:narroweinenglish*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"I" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"O" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"U" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"Ä" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"Ö" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"Ü" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"EU" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"AU" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"EI" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		
		// handwritten tokens 
		// upper case		
		"#A+" => { /*header*/ 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 5, 19, 0, 0, 1, 0, 0, 0,  /**/ 10, 0, 0, 0, 1, 0, 0, 0,  /**/ 2.5, 9.5, 0, 0, 1, 5, 0, 0,  /**/ 7.5, 9.5, 0, 0, 1, 0, 1, 0 }
		"#B+" => { /*header*/ 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0.5,  /**/ 5, 14.5, 0.5, 0, 1, 0, 0, 0,  /**/ 0, 9.5, 0, 0, 1, 0, 0, 0.5,  /**/ 5, 4.75, 0.5, 0, 1, 0, 0, 0.5, /**/ 0, 0, 0.5, 0, 1, 0, 1, 0 }
		"#C+" => { /*header*/ 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 8, 19, 0.5, 1, 1, 5, 0, 0.5,  /**/ 3, 18, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4, 2, 0.5, 0, 1, 0, 0, 0.5, /**/ 10, 0, 0.5, 0, 1, 0, 1, 0  }
		"#D+" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0.5, /**/ 4, 17, 0.5, 0, 1, 0, 0, 0.5, /**/ 8, 9.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 5, 1, 0.5, 0, 1, 0, 0, 0.5, /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"#E+" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0, /**/ 8, 19, 0, 0, 1, 0, 0, 0, /**/ 0, 9.5, 0, 0, 1, 5, 0, 0, /**/ 6, 9.5, 0, 0, 1, 0, 0, 0, /**/ 0, 0, 0, 0, 1, 5, 0, 0, /**/ 8, 0, 0, 0, 1, 0, 1, 0 }
		"#F+" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0, /**/ 8, 19, 0, 0, 1, 0, 0, 0, /**/ 0, 9.5, 0, 0, 1, 5, 0, 0, /**/ 6, 9.5, 0, 0, 1, 0, 1, 0 }
		"#G+" => { /*header*/ 12, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 8, 19, 0.5, 1, 1, 5, 0, 0.5,  /**/ 3, 18, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4, 2, 0.5, 0, 1, 0, 0, 0.5, /**/ 12, 0, 0.5, 0, 1, 0, 0, 0, /**/ 12, 7, 0, 0, 1, 0, 0, 0, /**/ 5, 7, 0, 0, 1, 0, 1, 0  }
		"#H+" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0, /**/ 0, 9.5, 0, 0, 1, 5, 0, 0, /**/ 8, 9.5, 0, 0, 1, 0, 0, 0, /**/ 8, 0, 0, 0, 1, 5, 0, 0, /**/ 8, 19, 0, 0, 1, 0, 1, 0 }
		"#I+" => { /*header*/ 2, 0, 0, 0, 6, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 1, 0 }
		"#J+" => { /*header*/ 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0.5, 1, 1, 5, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 0, 0.5, /**/ 9, 6, 0, 0, 1, 0, 0, 0, /**/ 9, 19, 0, 0, 1, 0, 1, 0 }
		"#K+" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0, /**/ 0, 9.5, 0, 0, 1, 5, 0, 0, /**/ 8, 19, 0, 0, 1, 0, 0, 0, /**/ 0, 9.5, 0, 0, 1, 5, 0, 0, /**/ 8, 0, 0, 0, 1, 0, 1, 0 }
		"#L+" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 1, 1, 5, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 0, 0, /**/ 8, 0, 0, 0, 1, 0, 1, 0 }
		"#M+" => { /*header*/ 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0, /**/ 5, 9.5, 0, 0, 1, 0, 0, 0, /**/ 10, 19, 0, 0, 1, 0, 0, 0, /**/ 10, 0, 0, 0, 1, 0, 1, 0 }
		"#N+" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0, /**/ 8, 0, 0, 0, 1, 0, 0, 0, /**/ 8, 19, 0, 0, 1, 0, 1, 0 }
		"#O+" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 1, 0, 0, 1, 5, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 17.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 17.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 2.5, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 1, 0, 1, 1, 0, 0, 0,  /**/ 6, 2.5, 0, 0, 1, 5, 1, 0 }
		"#P+" => { /*header*/ 6, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0.5,  /**/ 3, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 14.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3, 10.5, 0.5, 0, 1, 0, 0, 0, /**/ 0, 9.5, 0, 0, 1, 0, 1, 0 }
		"#Q+" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 1, 0, 0, 1, 5, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 17.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 17.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 2.5, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 1, 0, 1, 1, 0, 0, 0,  /**/ 6, 2.5, 0, 0, 1, 5, 0, 0, /**/ 4, 5, 0, 0, 1, 5, 0, 0, /**/ 8, 0, 0, 0, 1, 0, 1, 0 }
		"#R+" => { /*header*/ 6, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0.5,  /**/ 3, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 14.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3, 10.5, 0.5, 0, 1, 0, 0, 0, /**/ 0, 9.5, 0, 0, 1, 0, 0, 0, /**/ 6, 0, 0, 0, 1, 0, 1, 0 }
		"#S+" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 8, 19, 0, 1, 1, 5, 0, 0.5, /**/ 1.5, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 14.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 1.5, 11, 0.5, 0, 1, 0, 0, 0.5,  /**/ /*4, 9.5, 0.5, 0, 1, 0, 0, 0.5,*/ /**/ 6.5, 8, 0.5, 0, 1, 0, 0, 0.5, /**/ 8, 4.75, 0.5, 0, 1, 0, 0, 0.5, /**/ 7, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/  0, 0, 0, 0, 1, 0, 1, 0 }
		"#T+" => { /*header*/ 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 1, 1, 5, 0, 0,  /**/ 10, 19, 0, 0, 1, 0, 0, 0, /**/ 5, 19, 0, 0, 1, 5, 0, 0, /**/ 5, 0, 0, 0, 1, 0, 1, 0 }
		"#U+" => { /*header*/ 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 0, 1, 5, 0, 0,  /**/ 0, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 10, 5, 0, 0, 1, 0, 0, 0,  /**/ 10, 19, 0, 0, 1, 0, 1, 0 }
		"#V+" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 1, 1, 5, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 0, 0, /**/ 10, 19, 0, 0, 1, 0, 1, 0 }
		"#W+" => { /*header*/ 12, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 1, 1, 5, 0, 0,  /**/ 4, 0, 0, 0, 1, 0, 0, 0, /**/ 6, 9.5, 0, 0, 1, 0, 0, 0, /**/ 8, 0, 0, 0, 1, 0, 0, 0, /**/ 12, 19, 0, 0, 1, 0, 1, 0 }
		"#X+" => { /*header*/ 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 1, 1, 5, 0, 0,  /**/ 10, 0, 0, 0, 1, 0, 0, 0, /**/ 0, 0, 0, 0, 1, 5, 0, 0, /**/ 10, 19, 0, 0, 1, 0, 1, 0 }
		"#Y+" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 1, 1, 5, 0, 0,  /**/ 5, 9.5, 0, 0, 1, 0, 0, 0, /**/ 10, 19, 0, 0, 1, 0, 0, 0, /**/ 5, 9.5, 0, 0, 1, 5, 0, 0, /**/ 5, 0, 0, 0, 1, 0, 1, 0 }
		"#Z+" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 1, 1, 5, 0, 0,  /**/ 10, 19, 0, 0, 1, 0, 0, 0, /**/ 0, 0, 0, 0, 1, 0, 0, 0, /**/ 10, 0, 0, 0, 1, 0, 1, 0 }
		"#Ä+" => { /*header*/ 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 5, 19, 0, 0, 1, 0, 0, 0,  /**/ 10, 0, 0, 0, 1, 0, 0, 0,  /**/ 2.5, 9.5, 0, 0, 1, 5, 0, 0,  /**/ 7.5, 9.5, 0, 0, 1, 0, 0, 0, /**/ 2.75, 22, 0, 0, 1, 5, 0, 0, /**/ 2.75, 25, 0, 0, 1, 0, 0, 0, /**/ 5.25, 22, 0, 0, 1, 5, 0, 0, /**/ 5.25, 25, 0, 0, 1, 0, 1, 0 }
		"#Ö+" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 1, 0, 0, 1, 5, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 17.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 17.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 2.5, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 1, 0, 1, 1, 0, 0, 0,  /**/ 6, 2.5, 0, 0, 1, 5, 0, 0, /**/ 2.75, 22, 0, 0, 1, 5, 0, 0, /**/ 2.75, 25, 0, 0, 1, 0, 0, 0, /**/ 5.25, 22, 0, 0, 1, 5, 0, 0, /**/ 5.25, 25, 0, 0, 1, 0, 1, 0 }
		"#Ü+" => { /*header*/ 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 0, 1, 5, 0, 0,  /**/ 0, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 10, 5, 0, 0, 1, 0, 0, 0,  /**/ 10, 19, 0, 0, 1, 0, 0, 0, /**/ 2.75, 22, 0, 0, 1, 5, 0, 0, /**/ 2.75, 25, 0, 0, 1, 0, 0, 0, /**/ 5.25, 22, 0, 0, 1, 5, 0, 0, /**/ 5.25, 25, 0, 0, 1, 0, 1, 0 }
		
		

		// lower case
		"#A-" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 8, 9, 0, 1, 1, 5, 0, 0.5, /**/ 6, 9.5, 0, 0, 1, 0, 0, 0.5, /**/ 2, 7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 3.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 8, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 8, 1, 0.5, 0, 1, 0, 0, 0,  /**/ 8, 0, 0, 0, 1, 0, 1, 0 }
		"#B-" => { /*header*/ 6, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 1, 1, 5, 0, 0,  /**/ 0, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4, 0.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 4.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3, 9, 0.5, 0, 1, 0, 0, 0, /**/ 0, 9.5, 0, 0, 1, 0, 1, 0 }	
		"#C-" => { /*header*/ 6, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 6, 9.5, 0, 1, 1, 5, 0, 0,  /**/ 2, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 4.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 0, 0.5, 0, 1, 0, 1, 0 }	
		"#D-" => { /*header*/ 6, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 6, 8, 0.5, 1, 1, 5, 0, 0.5,  /**/ 3, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 8.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 4.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 1.5, 0.5, 0, 1, 0, 0, 0, /**/ 6, 0, 0, 0, 1, 0, 0, 0, /**/ 6, 19, 0, 0, 1, 0, 1, 0 }	
		"#E-" => { /*header*/ 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 4.75, 0, 1, 1, 5, 0, 0.5,  /**/ 6, 4.75, 0.5, 1, 1, 0, 0, 0.5,  /**/ 10, 7.1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 9.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 1.5, 8.5, 0.5, 0, 1, 0, 0, 0, /**/ 0, 4.75, 0.5, 0, 1, 0, 0, 0, /**/ 1, 1.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 5, 0, 0.5, 0, 1, 0, 0, 0.5, /**/ 10, 1.5, 0.5, 0, 1, 0, 1, 0  }
		"#F-" => { /*header*/ 8, 0, 0, 0, 5, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 8, 14.5, 0, 1, 1, 5, 0, 0.5,  /**/ 7, 18, 0.5, 1, 1, 0, 0, 0.5,  /**/ 3, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 15, 0, 0, 1, 0, 0, 0, /**/ 0, -7, 0.5, 0, 1, 0, 0, 0, /**/ -3, 2.5, 0, 0, 1, 5, 0, 0, /**/ 3, 2.5, 0, 0, 1, 0, 1, 0  }
		"#G-" => { /*header*/ 8, 0, 0, 0, 5, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 8, 9, 0, 1, 1, 5, 0, 0.5, /**/ 6, 9.5, 0, 0, 1, 0, 0, 0.5, /**/ 2, 7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 3.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 8, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 8, 1, 0.5, 0, 1, 0, 0, 0,  /**/ 8, 0, 0, 0, 1, 0, 0, 0, /**/ 8, -7, 0.5, 0, 1, 0, 0, 0.5, /**/ 3.5, -9.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 0, -5, 0, 0, 1, 0, 1, 0 }
		"#H-" => { /*header*/ 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 1, 1, 5, 0, 0, /**/ 0, 1, 0, 0, 1, 0, 0, 0, /**/ 0, 7, 0.5, 0, 1, 5, 0, 0.5,  /**/ 5, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 10, 7, 0, 0, 1, 0, 0, 0,  /**/ 10, 1, 0, 0, 1, 0, 1, 0 }
		"#I-" => { /*header*/ 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 1, 0, 1, 1, 5, 0, 0, /**/ 0, 9.5, 0, 0, 1, 0, 0, 0, /**/ 0, 17, 0, 0, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0 }
		"#J-" => { /*header*/ 8, 0, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, -7, 0.5, 1, 1, 5, 0, 0.5, /**/ 3, -9.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 8, -7, 0, 0, 1, 0, 0, 0, /**/ 8, 9.5, 0, 0, 1, 0, 0, 0, /**/ 8, 17, 0, 0, 1, 5, 0, 0,  /**/ 8, 19, 0, 0, 1, 0, 0, 0 }
		"#K-" => { /*header*/ 8, 0, 0, 0, 2, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 1, 1, 5, 0, 0, /**/ 0, 1, 0, 0, 1, 0, 0, 0, /**/ 0, 5, 0, 0, 1, 5, 0, 0, /**/ 6, 9.5, 0, 0, 1, 0, 0, 0, /**/ 0, 5, 0, 0, 1, 5, 0, 0,  /**/ 8, 1, 0, 0, 1, 0, 0, 0 }
		"#L-" => { /*header*/ 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 1, 1, 5, 0, 0, /**/ 0, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 3, 0, 0.5, 0, 1, 0, 0, 0.5, /**/ 5, 1, 0, 0, 1, 0, 1, 0 }
		"#M-" => { /*header*/ 12, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 9.5, 0, 1, 1, 5, 0, 0, /**/ 0, 1, 0, 0, 1, 0, 0, 0, /**/ 0, 7, 0.5, 0, 1, 5, 0, 0.5,  /**/ 3, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 7, 0, 0, 1, 0, 0, 0,  /**/ 6, 1, 0, 0, 1, 0, 0, 0, /**/ 6, 7, 0.5, 0, 1, 5, 0, 0.5,  /**/ 9, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 12, 7, 0, 0, 1, 0, 0, 0,  /**/ 12, 1, 0, 0, 1, 0, 1, 0 }
		"#N-" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 9.5, 0, 1, 1, 5, 0, 0, /**/ 0, 1, 0, 0, 1, 0, 0, 0, /**/ 0, 7, 0.5, 0, 1, 5, 0, 0.5,  /**/ 4, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 8, 7, 0, 0, 1, 0, 0, 0,  /**/ 8, 1, 0, 0, 1, 0, 1, 0 }
		"#O-" => { /*header*/ 7, 0, 0, 0, 3, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 1, 0, 0, 1, 5, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 7.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 7.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 2.5, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 1, 0, 1, 1, 0, 0, 0,  /**/ 6, 2.5, 0, 0, 1, 5, 1, 0 }
		"#P-" => { /*header*/ 8, 0, 0, 0, 3, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, -9.5, 0, 0, 1, 5, 0, 0, /**/ 0, 9.5, 0, 0, 1, 0, 0, 0.5,  /**/ 5, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 8, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 1, 0.5, 0, 1, 0, 1, 0.5 }
		"#Q-" => { /*header*/ 8, 0, 0, 0, 3, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 8, 9.5, 0, 0, 1, 5, 0, 0, /**/ 3, 9.5, 0, 0, 1, 0, 0, 0.5,  /**/ 0, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 8, 1, 0.5, 0, 1, 0, 0, 0,  /**/ 8, 9.5, 0, 0, 1, 5, 0, 0, /**/ 8, -9.5, 0.5, 0, 1, 0, 1, 0.5 }
		"#R-" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 9.5, 0, 1, 1, 5, 0, 0, /**/ 0, 1, 0, 0, 1, 0, 0, 0, /**/ 0, 7, 0.5, 0, 1, 5, 0, 0.5,  /**/ 4, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 8, 8.5, 0, 0, 1, 0, 1, 0 }
		"#S-" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 8, 9.5, 0, 1, 1, 5, 0, 0.5, /**/ 1.5, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 7.25, 0.5, 0, 1, 0, 0, 0.5, /**/ 1.5, 5.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ /*4, 4.75, 0.5, 0, 1, 0, 0, 0.5,*/ /**/ 6.5, 4, 0.5, 0, 1, 0, 0, 0.5, /**/ 8, 1.8, 0.5, 0, 1, 0, 0, 0.5, /**/ 7, 0.5, 0.5, 0, 1, 0, 0, 0.5,  /**/  0, 0, 0, 0, 1, 0, 1, 0 }
		"#T-" => { /*header*/ 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 1, 1, 5, 0, 0, /**/ 0, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 3, 0, 0.5, 0, 1, 0, 0, 0.5, /**/ 5, 1, 0, 0, 1, 0, 0, 0, /**/ -3, 14, 0, 0, 1, 5, 0, 0, /**/ 4, 14, 0, 0, 1, 0, 1, 0 }
		"#U-" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 9.5, 0, 1, 1, 5, 0, 0.5, /**/ 0, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 4, 0.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 8, 4, 0, 0, 1, 0, 0, 0,  /**/ 8, 9.5, 0, 0, 1, 5, 0, 0,  /**/ 8, 0.5, 0, 0, 1, 0, 1, 0 }
		"#V-" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 9.5, 0, 1, 1, 5, 0, 0, /**/ 4, 0.5, 0, 0, 1, 0, 0, 0, /**/ 8, 9.5, 0, 0, 1, 0, 1, 0 }
		"#W-" => { /*header*/ 11, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 9.5, 0, 1, 1, 5, 0, 0, /**/ 3, 0.5, 0, 0, 1, 0, 0, 0, /**/ 5, 5, 0, 0, 1, 0, 0, 0, /**/ 8, 0.5, 0, 0, 1, 0, 0, 0, /**/ 11, 9.5, 0, 0, 1, 0, 0, 0   }
		"#X-" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 9.5, 0, 1, 1, 5, 0, 0, /**/ 8, 0.5, 0, 0, 1, 0, 0, 0, /**/ 0, 0.5, 0, 0, 1, 5, 0, 0, /**/ 8, 9.5, 0, 0, 1, 0, 1, 0 }
		"#Y-" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 9.5, 0, 1, 1, 5, 0, 0, /**/ 4, 0, 0, 0.5, 1, 0, 0, 0, /**/ 8, 9.5, 0, 0, 1, 5, 0, 0, /**/ 0.5, -5, 0, 0, 1, 0, 1, 0 }
		"#Z-" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 9.5, 0, 1, 1, 5, 0, 0, /**/ 8, 9.5, 0, 0, 1, 0, 0, 0, /**/ 0, 0.5, 0, 0, 1, 0, 0, 0, /**/ 8, 0.5, 0, 0, 1, 0, 1, 0 }
		"#Ä-" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 8, 9, 0, 1, 1, 5, 0, 0.5, /**/ 6, 9.5, 0, 0, 1, 0, 0, 0.5, /**/ 2, 7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 3.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 8, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 8, 1, 0.5, 0, 1, 0, 0, 0,  /**/ 8, 0, 0, 0, 1, 0, 0, 0, /**/ 2.75, 12, 0, 0, 1, 5, 0, 0, /**/ 2.75, 15, 0, 0, 1, 0, 0, 0, /**/ 5.25, 12, 0, 0, 1, 5, 0, 0, /**/ 5.25, 15, 0, 0, 1, 0, 1, 0 }
		"#Ö-" => { /*header*/ 7, 0, 0, 0, 3, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 1, 0, 0, 1, 5, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 7.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 7.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 2.5, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 1, 0, 1, 1, 0, 0, 0,  /**/ 6, 2.5, 0, 0, 1, 5, 0, 0, /**/ 2.75, 12, 0, 0, 1, 5, 0, 0, /**/ 2.75, 15, 0, 0, 1, 0, 0, 0, /**/ 5.25, 12, 0, 0, 1, 5, 0, 0, /**/ 5.25, 15, 0, 0, 1, 0, 1, 0 }
		"#Ü-" => { /*header*/ 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 9.5, 0, 1, 1, 5, 0, 0.5, /**/ 0, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 4, 0.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 8, 4, 0, 0, 1, 0, 0, 0,  /**/ 8, 9.5, 0, 0, 1, 5, 0, 0,  /**/ 8, 0.5, 0, 0, 1, 0, 0, 0, /**/ 2.75, 12, 0, 0, 1, 5, 0, 0, /**/ 2.75, 15, 0, 0, 1, 0, 0, 0, /**/ 5.25, 12, 0, 0, 1, 5, 0, 0, /**/ 5.25, 15, 0, 0, 1, 0, 1, 0 }
		

	#EndSubSection(base)
	#BeginSubSection(combiner)
		"D" => { "@R", 0, 0 }
		"D" => { "@#/", "", "" }
		"D" => { "@R3^", "", "" }				
		"C" => { "@R", 0, 0 }
		"ND" => { "@R", 0, 0 }
		"T" => { "@R", 0, 0 }
		"G" => { "@R", 0, 0 }
		"K" => { "@R", 0, 0 }
		"CH" => { "@R", 0, 0 }
		"NK" => { "@R", 0, 0 }
		"NG" => { "@R", 0, 0 }
		"NS" => { "@R", 0, 0 }
		"H" => { "@R", 0, 0 }
		"SCH" => { "@R", 0, 0 }
		"ST" => { "@R", 0, 0 }
		"L" => { "@L", 0, 0 }
		"B" => { "@L", 0, 0 }
		"G" => { "@L3", 0, 0 }
		"M" => { "@L", 0, 0 }
		"MM" => { "@L", 0, 0 }
		"F" => { "@L", 0, 0 }
		"P" => { "@L", 0, 0 }
		"PF" => { "@L", 0, 0 }
		"V" => { "@L", 0, 0 }
		"SP" => { "@L", 0, 0 }
		"W" => { "@L", 0, 0 }
		"T" => { "@L3", 0, 0 }
		"TT" => { "@L3", 0, 0 }
		"PP" => { "@L", 0, 0 }
		"CK" => { "@L3", 0, 0 }
		"FF" => { "@L", 0, 0 }
		"NG" => { "@L3", 0, 0 }
		"NS" => { "@L3", 0, 0 }
		"NK" => { "@L3", 0, 0 }
		"D" => { "@L3", 0, 0 }
		"C" => { "@L3", 0, 0 }
		"ND" => { "@L3", 0, 0 }
		"ST" => { "@L3", 0, 0 }
		"NK" => { "@L3", 0, 0 }
		"K" => { "@L3", 0, 0 }
		"Z" => { "@L3", 0, 0 }
		"SCH" => { "@L3", 0, 0 }
		"^SCH" => { "@L3", 0, 0 }
		"CH" => { "@L3", 0, 0 }
		"B" => { "@R6", 0, 0 }
		"SP" => { "@R6", 0, 0 }
		"F" => { "@R6", 0, 0 }
		"M" => { "@R6", 0, 0 }
		"P" => { "@R6", 0, 0 }
		"PF" => { "@R6", 0, 0 }
		"V" => { "@R6", 0, 0 }
		"W" => { "@R6", 0, 0 }
		"Z" => { "@R", 0, 0 }
		"Z" => { "@L3", 0, 0 }
		"DA" => { "@R", 0, 0 }
		"N" => { "@R6", 0, 0 }
		"N=" => { "@R6", 0, 0 }
		"N" => { "@L", 0, 0 }
		"N" => { "@#/", "", "" }
		"NN" => { "@L", 0, 0 }
		"NN" => { "@R6", 0, 0 }
		"VR" => { "@L", 0, 0.5 }
		"RR" => { "@L", 0, 1 }
		"CK" => { "@L", 0, 0 }
		"L" => { "@R6", 0, 0 }
		"TT" => { "@R", 0, 0 }
		"PP" => { "@R6", 0, 0 }
		"CK" => { "@R", 0, 0 }
		"FF" => { "@R6", 0, 0 }
		"LT" => { "@R6", 0, 0 }
		"N=" => { "@R6", 0, 0 }
		"B" => { "@#/", "", "" }
		"B" => { "@#_", "", "" }
		"B@L" => { "@#_", "", "" } // recombine a combined token
		"L" => { "@#/", "", "" }
		"L" => { "@#/_", "", "" }
		"L" => { "@#/.", "", "" }
		"M" => { "@#_", "", "" }
		"S=" => { "@#/", "", "" }
		"AR" => { "@#/", "", "" }
		"AR" => { "@#_", "", "" }
		"VR" => { "@#/_", "", "" }
		"VR" => { "@#/.", "", "" }
		"NS" => { "@#.", "", "" }
		"S" => { "@#.", "", "" }
		"S" => { "@#/_", "", "" }
		"S=" => { "@#.", "", "" }
		"SS" => { "@#.", "", "" }
		"DIS" => { "@#.", "", "" }
		"W" => { "@#.", "", "" }
		"W" => { "@#/", "", "" }
		"T" => { "@#/.", "", "" }
		"T" => { "@#/", "", "" }
		"T" => { "@#/_", "", "" }
		"SS" => { "@#/_", "", "" }
		"EST" => { "@#/_", "", "" }
		"MPF" => { "@#/_", "", "" }
		"ION" => { "@#/_", "", "" }
		"HEIT" => { "@#/_", "", "" }
		"#D#" => { "@#._.", "", "" }
		"#D#" => { "@#/_", "", "" }
		"#D#" => { "@#O", "", "" }
	#EndSubSection(combiner)
	#BeginSubSection(shifter)
		"DEM" => { "^DEM", 0, 5, 0, 0 }
		"DEN" => { "^DEN", 0, 5, 0, 0 }
		"DEM" => { "^^DEM", 0, 10, 0, 0 }
		"DEN" => { "^^DEN", 0, 10, 0, 0 }
		"=ES" => { "&EITES", 10, 14.5, 0, 1 }
		"B" => { "&TB", 4, 10, 0, 1 }
		"NG" => { "&TNG", 4, 10, 0, 1 }
		"NS" => { "&TNS", 4, 10, 0, 1 }
		"C" => { "&TC", 4, 10, 0, 1 }
		"D" => { "&TD", 4, 10, 0, 1 }
		"G" => { "&TG", 4, 10, 0, 1 }
		"H" => { "&TH", 4, 10, 0, 1 }
		"J" => { "&TJ", 4, 10, 0, 1 }
		"L" => { "&T#L", 4, 10, 0, 1 }
		"@L3" => { "&T@L3", 4, 16.5, 0, 1.5 }
		"@L3" => { "&ET@L3", 4, 20, 0, 2 } // english: quietly (two system lines high instead of 1.5!)
		"ALL" => { "&TALL", 4, 10, 0, 1 }
		"M" => { "&TM", 4, 10, 0, 1 }
		"W" => { "&TW", 4, 10, 0, 1 }
		"X" => { "&TX", 4, 10, 0, 1 }
		"Y" => { "&TY", 4, 10, 0, 1 }
		"&E" => { "&T&E", 4, 15, 0, 1.5 }
		"SCHAFT" => { "&TSCHAFT", 4, 15, 0, 1.5 }
		"ION" => { "&TION", 4, 10, 0, 1 }
		"N" => { "&TN", 4, 15, 0, 1.5 }
		"VR" => { "&TVR", 4, 15, 0, 1.5 }
		"AR5" => { "&TAR5", 4, 15, 0, 1.5 }
		"S" => { "&TS", 4, 15, 0, 1.5 }
		"&U" => { "&T&U", 4, 15, 0, 1.5 }
		"&O" => { "&T&O", 4, 15, 0, 1.5 }
		"&I" => { "&T&I", 4, 15, 0, 1.5 }
		"CH" => { "&TCH", 4, 20, 0, 1 }
		"SCH" => { "&T^SCH", 4, 20, 0, 1 }
		"^Z" => { "&T^Z", 4, 20, 0, 1 }
		"^CH" => { "&T^CH", 4, 20, 0, 1 }
		"^SCH" => { "&T^SCH", 4, 20, 0, 1 }
		"Z" => { "&TZ", 4, 20, 0, 1 }
		"F@L" => { "&TF@L", 4, 10, 0, 1 }
		"F" => { "&TF", 4, 10, 0, 1 }
		"HAFT" => { "&THAFT", 4, 10, 0, 1 }
		"K" => { "&TK", 4, 20, 0, 1 }
		"P" => { "&TP", 4, 20, 0, 1 }
		"Q" => { "&TQ", 4, 20, 0, 1 }
		"V" => { "&TV", 4, 20, 0, 1 }
		"NK" => { "&TK", 4, 20, 0, 1 }
		"PF" => { "&TPF", 4, 20, 0, 1 }
		"SP" => { "&TSP", 4, 20, 0, 1 }
		"ST" => { "&TST", 4, 10, 0, 1 }
		"SCHW" => { "&TSCHW", 4, 30, 0, 1 }
		"ZW" => { "&TZW", 4, 30, 0, 1 }
		"B" => { "&EITB", 18, 10, 0, 1 }
		"NG" => { "&EITNG", 18, 10, 0, 1 }
		"NS" => { "&EITNS", 18, 10, 0, 1 }
		"C" => { "&EITC", 18, 10, 0, 1 }
		"D" => { "&EITD", 18, 10, 0, 1 }
		"G" => { "&EITG", 18, 10, 0, 1 }
		"H" => { "&EITH", 18, 10, 0, 1 }
		"J" => { "&EITJ", 18, 10, 0, 1 }
		"L" => { "&EITL", 18, 10, 0, 1 }
		"@L3" => { "&EIT@L3", 18, 10, 0, 1 }
		"ALL" => { "&EITALL", 18, 10, 0, 1 }
		"M" => { "&EITM", 18, 10, 0, 1 }
		"W" => { "&EITW", 18, 10, 0, 1 }
		"X" => { "&EITX", 18, 10, 0, 1 }
		"Y" => { "&EITY", 18, 10, 0, 1 }
		"&E" => { "&EIT&E", 18, 15, 0, 1.5 }
		"SCHAFT" => { "&EITSCHAFT", 18, 15, 0, 1.5 }
		"N" => { "&EITN", 18, 15, 0, 1.5 }
		"N=" => { "NICHT2", 0, 5, 0, 0.5 }
		"VR" => { "&EITVR", 18, 15, 0, 1.5 }
		"S" => { "&EITS", 18, 15, 0, 1.5 }
		"U" => { "&EITU", 18, 15, 0, 1.5 }
		"&O" => { "&EIT&O", 18, 15, 0, 1.5 }
		"CH" => { "&EITCH", 18, 20, 0, 1 }
		"SCH" => { "&EITSCH", 18, 20, 0, 2 }
		"Z" => { "&EITZ", 18, 20, 0, 1 }
		"^Z" => { "&EIT^Z", 4, 20, 0, 1 }
		"^CH" => { "&EIT^CH", 4, 20, 0, 1 }
		"^SCH" => { "&EIT^SCH", 4, 20, 0, 1 }
		"F" => { "&EITF", 18, 10, 0, 1 }
		"K" => { "&EITK", 18, 20, 0, 1 }
		"P" => { "&EITP", 18, 20, 0, 1 }
		"Q" => { "&EITQ", 18, 20, 0, 1 }
		"V" => { "&EITV", 18, 20, 0, 1 }
		"NK" => { "&EITK", 18, 20, 0, 1 }
		//"NN" => { "^NN", 0, 10, 0, 1 }
		"PF" => { "&EITPF", 18, 20, 0, 1 }
		"SP" => { "&EITSP", 18, 20, 0, 1 }
		"ST" => { "&EITST", 18, 10, 0, 1 }
		"SCHW" => { "&EITSCHW", 18, 30, 0, 1 }
		"ZW" => { "&EITZW", 18, 30, 0, 1 }
		"@L3" => { "&T@L3", 4, 15, 0, 1.5 }
		"@R" => { "&T@R", 4, 15, 0, 1.5 }
		"@L3" => { "&EIT@L3", 18, 15, 0, 1.5 }
		"@R" => { "&EIT@R", 18, 15, 0, 1.5 }
		"M" => { "ISIM", 4, 10, 0, 1 }
		"#A+" => { "#A+0", 0.5, 0.5, "", "" }
		"#B+" => { "#B+0", 0.5, 0.5, "", "" }
		"#C+" => { "#C+0", 0.5, 0.5, "", "" }
		"#D+" => { "#D+0", 0.5, 0.5, "", "" }
		"#E+" => { "#E+0", 0.5, 0.5, "", "" }
		"#F+" => { "#F+0", 0.5, 0.5, "", "" }
		"#G+" => { "#G+0", 0.5, 0.5, "", "" }
		"#H+" => { "#H+0", 0.5, 0.5, "", "" }
		"#I+" => { "#I+0", 0.5, 0.5, "", "" }
		"#J+" => { "#J+0", 0.5, 0.5, "", "" }
		"#K+" => { "#K+0", 0.5, 0.5, "", "" }
		"#L+" => { "#L+0", 0.5, 0.5, "", "" }
		"#M+" => { "#M+0", 0.5, 0.5, "", "" }
		"#N+" => { "#N+0", 0.5, 0.5, "", "" }
		"#O+" => { "#O+0", 0.5, 0.5, "", "" }
		"#P+" => { "#P+0", 0.5, 0.5, "", "" }
		"#Q+" => { "#Q+0", 0.5, 0.5, "", "" }
		"#R+" => { "#R+0", 0.5, 0.5, "", "" }
		"#S+" => { "#S+0", 0.5, 0.5, "", "" }
		"#T+" => { "#T+0", 0.5, 0.5, "", "" }
		"#U+" => { "#U+0", 0.5, 0.5, "", "" }
		"#V+" => { "#V+0", 0.5, 0.5, "", "" }
		"#W+" => { "#W+0", 0.5, 0.5, "", "" }
		"#X+" => { "#X+0", 0.5, 0.5, "", "" }
		"#Y+" => { "#Y+0", 0.5, 0.5, "", "" }
		"#Z+" => { "#Z+0", 0.5, 0.5, "", "" }
		"#Ä+" => { "#Ä+0", 0.5, 0.5, "", "" }
		"#Ö+" => { "#Ö+0", 0.5, 0.5, "", "" }
		"#Ü+" => { "#Ü+0", 0.5, 0.5, "", "" }
		"#A-" => { "#A-0", 0.5, 0.5, "", "" }
		"#B-" => { "#B-0", 0.5, 0.5, "", "" }
		"#C-" => { "#C-0", 0.5, 0.5, "", "" }
		"#D-" => { "#D-0", 0.5, 0.5, "", "" }
		"#E-" => { "#E-0", 0.5, 0.5, "", "" }
		"#F-" => { "#F-0", 0.5, 0.5, "", "" }
		"#G-" => { "#G-0", 0.5, 0.5, "", "" }
		"#H-" => { "#H-0", 0.5, 0.5, "", "" }
		"#I-" => { "#I-0", 0.5, 0.5, "", "" }
		"#J-" => { "#J-0", 0.5, 0.5, "", "" }
		"#K-" => { "#K-0", 0.5, 0.5, "", "" }
		"#L-" => { "#L-0", 0.5, 0.5, "", "" }
		"#M-" => { "#M-0", 0.5, 0.5, "", "" }
		"#N-" => { "#N-0", 0.5, 0.5, "", "" }
		"#O-" => { "#O-0", 0.5, 0.5, "", "" }
		"#P-" => { "#P-0", 0.5, 0.5, "", "" }
		"#Q-" => { "#Q-0", 0.5, 0.5, "", "" }
		"#R-" => { "#R-0", 0.5, 0.5, "", "" }
		"#S-" => { "#S-0", 0.5, 0.5, "", "" }
		"#T-" => { "#T-0", 0.5, 0.5, "", "" }
		"#U-" => { "#U-0", 0.5, 0.5, "", "" }
		"#V-" => { "#V-0", 0.5, 0.5, "", "" }
		"#W-" => { "#W-0", 0.5, 0.5, "", "" }
		"#X-" => { "#X-0", 0.5, 0.5, "", "" }
		"#Y-" => { "#Y-0", 0.5, 0.5, "", "" }
		"#Z-" => { "#Z-0", 0.5, 0.5, "", "" }
		"#Ä-" => { "#Ä-0", 0.5, 0.5, "", "" }
		"#Ö-" => { "#Ö-0", 0.5, 0.5, "", "" }
		"#Ü-" => { "#Ü-0", 0.5, 0.5, "", "" }
		"." => { "#.", 1.0, 1.0, "", "" }		
		"." => { "#.0", 0.5, 0.5, "", "" }
		"," => { "#,", 1.0, 1.0, "", "" }		
		"," => { "#,0", 0.5, 0.5, "", "" }
		";" => { "#;", 1.0, 1.0, "", "" }		
		";" => { "#;0", 0.5, 0.5, "", "" }
		":" => { "#:", 1.0, 1.0, "", "" }		
		":" => { "#:0", 0.5, 0.5, "", "" }
		"!" => { "#!", 1.0, 1.0, "", "" }		
		"!" => { "#!0", 0.5, 0.5, "", "" }
		"?" => { "#?", 1.0, 1.0, "", "" }		
		"?" => { "#?0", 0.5, 0.5, "", "" }
		"¿" => { "#¿", 1.0, 1.0, "", "" }		
		"¿" => { "#¿0", 0.5, 0.5, "", "" }
		")" => { "#)", 1.0, 1.0, "", "" }		
		")" => { "#)0", 0.5, 0.5, "", "" }
		"(" => { "#(", 1.0, 1.0, "", "" }		
		"(" => { "#(0", 0.5, 0.5, "", "" }
		"-" => { "#-", 1.0, 1.0, "", "" }
		"-" => { "#-0", 0.5, 0.5, "", "" }

		//"#A+0" => { "#A+", 2, 2, "a:sf!", "" }
	#EndSubSection(shifter)
#EndSection(font)
#BeginSection(rules)
	#BeginSubSection(global,#>stage0)
		// not needed for font
	#EndSubSection(global,#>stage1)
	#BeginSubSection(dasher,#>stage2)
		// not needed for font
	#EndSubSection(dasher,#>stage3)
	#BeginSubSection(splitter1,#>stage3)
		// not needed for font	
	#EndSubSection(splitter1,!>acronymator,=>packer)
	#BeginSubSection(acronymator)
		// empty
	#EndSubSection(acronymater)
	#BeginSubSection(packer)
		// empty
	#EndSubSection(packer)
	#BeginSubSection(accentizer)
		//empty
	#EndSubSection(accentizer)
	#BeginSubSection(normalizer)
		// empty	
	#EndSubSection(normalizer)
	#BeginSubSection(shortener)
		// not needed for font
	#EndSubSection(shortener,#>stage4)
	#BeginSubSection(upbundler,#>stage4)
		// not needed for font
	#EndSubSection(upbundler)
	#BeginSubSection(decapitalizer)
		// not needed for font
	#EndSubSection(decapitalizer)
	#BeginSubSection(phonetizer)	
		// empty
	#EndSubSection(phonetizer)
	#BeginSubSection(bundler)
		// not needed for font
	#EndSubSection(bundler,=:std)
	#BeginSubSection(relancer1)	
		// empty
	#EndSubSection(relancer1)
	#BeginSubSection(transcriptor)
		// not needed for font
	#EndSubSection(transcriptor)
	#BeginSubSection(completor)
		// not needed for font
	#EndSubSection(completor)
	#BeginSubSection(separator)
		// not needed for font
	#EndSubSection(separator)
	#BeginSubSection(rewriter)
		// not needed for font
	#EndSubSection(rewriter)
	#BeginSubSection(beautifier)
		// not needed for font
	#EndSubSection(beautifier)
	#BeginSubSection(substituter)
		// not needed for font
	#EndSubSection(substituter)
	#BeginSubSection(relancer2)	
		// empty
	#EndSubSection(relancer2)
	#BeginSubSection(eliminator)
		// not needed for font
	#EndSubSection(eliminator)
	#BeginSubSection(prespacer)

		// in order to share font include jailor and corrector inside prespacer	
		// puts all tokens (including single ones) inside brackets []
		"(.*)" => "strtolower()";
		"(\[.*?\])" => "strtoupper()";
		"({.*?})" => "strtoupper()";
		"(?<!\[)([a-z]|ä|ö|ü)" => "[$1]";
	
		// correct incorrect stuff ... :)
		"\[VR@L\]\[-E\]" => "[VR@L][#3-]O[-E]";    // -e 0.5 too high
		"\[VR\]\[-I\]" => "[VR][-I1]"; // -i 0.5 too low 

		// old prespacer:
		// at this point words are raw token sequences inside brackets
		// add spacing where necessary
		
		// convert all to lower
		"(.*)" => "strtolower()";

		// special cases
		"\[f\]\[ar\]" => "f[#2-][ar]";

		// filtering
		"\|" => ""; // filter out | to get correct spacing (case tire-ligne: | is used to separate r-l)
		// filter out all remaining e muet (@), necessary for the spacer to work correctly
		"\]@\[" => "][";
		
		// #NS is not handled by spacer rules => replace it (treat it like vowel a)
		"\[#ns\]" => "[a]";

		// end prespacer
	#EndSubSection(prespacer)
	#BeginSubSection(spacer)

// special: for english, additional spacing is needed for short e, e.g. in beg
// e1 is defined as short e 
// normal (= german) e with wide distance is kept for "backwards" compatibility

// statistics: these rules cover approximately 247065 token combinations.
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:a|e1|o|u)\])?(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])" => "$1[#d1]$2$3"; // R1|C1: LK#V1:D1#RK (1210)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:les|hab|da|sind|durch|wo|sch|\^sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|d@#\/|d@r3\^|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|\^sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|ns@#\.|w@#\.|w@#\/)\])" => "$1[#d10]$2$3"; // R10|C5: LK#V2:D10#RP (2508)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:a|e1|o|u)\])?(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d11]$2$3"; // R11|C6: LK#V1:D11#RPD (1100)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d12]$2$3"; // R12|C6: LK#V2:D12#RPD (440)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:a|e1|o|u)\])?(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d13]$2$3"; // R13|C7: LK#V1:D13#RPE (330)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d14]$2$3"; // R14|C7: LK#V2:D14#RPE (132)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|e1|o|u)\])?(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])" => "$1[#d15]$2$3"; // R15|C8: LMA#V1:D15#RK (165)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])" => "$1[#d16]$2$3"; // R16|C8: LMA#V2:D16#RK (66)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|e1|o|u)\])?(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|off|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|\^z|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|off\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|n@#\/|nn@l|nn@r6|ff@r6|m@#_|s@#\.|s@#\/_|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d17]$2$3"; // R17|C9: LMA#V1:D17#RN (1095)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|off|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|\^z|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|off\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|n@#\/|nn@l|nn@r6|ff@r6|m@#_|s@#\.|s@#\/_|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d18]$2$3"; // R18|C9: LMA#V2:D18#RN (438)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|e1|o|u)\])?(\[(?:sp|sp1|sp2|mp|perhaps|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.|t@#\/|t@#\/_)\])" => "$1[#d19]$2$3"; // R19|C10: LMA#V1:D19#RND (300)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])" => "$1[#d2]$2$3"; // R2|C1: LK#V2:D2#RK (484)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:sp|sp1|sp2|mp|perhaps|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.|t@#\/|t@#\/_)\])" => "$1[#d20]$2$3"; // R20|C10: LMA#V2:D20#RND (120)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|e1|o|u)\])?(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d21]$2$3"; // R21|C11: LMA#V1:D21#RNE (105)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d22]$2$3"; // R22|C11: LMA#V2:D22#RNE (42)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|e1|o|u)\])?(\[(?:les|hab|da|sind|durch|wo|sch|\^sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|d@#\/|d@r3\^|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|\^sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|ns@#\.|w@#\.|w@#\/)\])" => "$1[#d23]$2$3"; // R23|C12: LMA#V1:D23#RP (855)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:les|hab|da|sind|durch|wo|sch|\^sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|d@#\/|d@r3\^|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|\^sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|ns@#\.|w@#\.|w@#\/)\])" => "$1[#d24]$2$3"; // R24|C12: LMA#V2:D24#RP (342)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|e1|o|u)\])?(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d25]$2$3"; // R25|C13: LMA#V1:D25#RPD (150)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d26]$2$3"; // R26|C13: LMA#V2:D26#RPD (60)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|e1|o|u)\])?(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d27]$2$3"; // R27|C14: LMA#V1:D27#RPE (45)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d28]$2$3"; // R28|C14: LMA#V2:D28#RPE (18)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])" => "$1[#d29]$2$3"; // R29|C15: LN#V1:D29#RK (6600)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:a|e1|o|u)\])?(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|off|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|\^z|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|off\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|n@#\/|nn@l|nn@r6|ff@r6|m@#_|s@#\.|s@#\/_|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d3]$2$3"; // R3|C2: LK#V1:D3#RN (8030)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])" => "$1[#d30]$2$3"; // R30|C15: LN#V2:D30#RK (2640)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|off|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|\^z|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|off\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|n@#\/|nn@l|nn@r6|ff@r6|m@#_|s@#\.|s@#\/_|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d31]$2$3"; // R31|C16: LN#V1:D31#RN (43800)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|off|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|\^z|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|off\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|n@#\/|nn@l|nn@r6|ff@r6|m@#_|s@#\.|s@#\/_|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d32]$2$3"; // R32|C16: LN#V2:D32#RN (17520)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:sp|sp1|sp2|mp|perhaps|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.|t@#\/|t@#\/_)\])" => "$1[#d33]$2$3"; // R33|C17: LN#V1:D33#RND (12000)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:sp|sp1|sp2|mp|perhaps|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.|t@#\/|t@#\/_)\])" => "$1[#d34]$2$3"; // R34|C17: LN#V2:D34#RND (4800)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d35]$2$3"; // R35|C18: LN#V1:D35#RNE (4200)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d36]$2$3"; // R36|C18: LN#V2:D36#RNE (1680)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:les|hab|da|sind|durch|wo|sch|\^sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|d@#\/|d@r3\^|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|\^sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|ns@#\.|w@#\.|w@#\/)\])" => "$1[#d37]$2$3"; // R37|C19: LN#V1:D37#RP (34200)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:les|hab|da|sind|durch|wo|sch|\^sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|d@#\/|d@r3\^|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|\^sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|ns@#\.|w@#\.|w@#\/)\])" => "$1[#d38]$2$3"; // R38|C19: LN#V2:D38#RP (13680)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d39]$2$3"; // R39|C20: LN#V1:D39#RPD (6000)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|off|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|\^z|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|off\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|n@#\/|nn@l|nn@r6|ff@r6|m@#_|s@#\.|s@#\/_|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d4]$2$3"; // R4|C2: LK#V2:D4#RN (3212)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d40]$2$3"; // R40|C20: LN#V2:D40#RPD (2400)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d41]$2$3"; // R41|C21: LN#V1:D41#RPE (1800)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|on|haft|schaft|auf|off|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^sch|\^ch|\^z|ff|ll|lt|mm|nn|pp|ss|ch|sp|sp1|sp2|mp|perhaps|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|\^sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|n@#\/|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|m@#_|s\=@#\/|s@#\.|s@#\/_|s\=@#\.|ss@#\.|w@#\.|w@#\/|t@#\/\.|t@#\/|t@#\/_|ss@#\/_|mpf@#\/_|ion@#\/_)\])(\[(?:i|au)\])(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d42]$2$3"; // R42|C21: LN#V2:D42#RPE (720)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])" => "$1[#d43]$2$3"; // R43|C22: LP#V1:D43#RK (2750)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:i|au)\])(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])" => "$1[#d44]$2$3"; // R44|C22: LP#V2:D44#RK (1100)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|off|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|\^z|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|off\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|n@#\/|nn@l|nn@r6|ff@r6|m@#_|s@#\.|s@#\/_|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d45]$2$3"; // R45|C23: LP#V1:D45#RN (18250)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:i|au)\])(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|on|haft|schaft|auf|off|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|\^z|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|off\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|n@#\/|nn@l|nn@r6|ff@r6|m@#_|s@#\.|s@#\/_|ss@#\.|ss@#\/_|mpf@#\/_|ion@#\/_)\])" => "$1[#d46]$2$3"; // R46|C23: LP#V2:D46#RN (7300)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:sp|sp1|sp2|mp|perhaps|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.|t@#\/|t@#\/_)\])" => "$1[#d47]$2$3"; // R47|C24: LP#V1:D47#RND (5000)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:i|au)\])(\[(?:sp|sp1|sp2|mp|perhaps|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.|t@#\/|t@#\/_)\])" => "$1[#d48]$2$3"; // R48|C24: LP#V2:D48#RND (2000)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d49]$2$3"; // R49|C25: LP#V1:D49#RNE (1750)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:a|e1|o|u)\])?(\[(?:sp|sp1|sp2|mp|perhaps|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.|t@#\/|t@#\/_)\])" => "$1[#d5]$2$3"; // R5|C3: LK#V1:D5#RND (2200)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:i|au)\])(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d50]$2$3"; // R50|C25: LP#V2:D50#RNE (700)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:les|hab|da|sind|durch|wo|sch|\^sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|d@#\/|d@r3\^|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|\^sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|ns@#\.|w@#\.|w@#\/)\])" => "$1[#d51]$2$3"; // R51|C26: LP#V1:D51#RP (14250)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:i|au)\])(\[(?:les|hab|da|sind|durch|wo|sch|\^sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|d@#\/|d@r3\^|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|\^sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|ns@#\.|w@#\.|w@#\/)\])" => "$1[#d52]$2$3"; // R52|C26: LP#V2:D52#RP (5700)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d53]$2$3"; // R53|C27: LP#V1:D53#RPD (2500)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:i|au)\])(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d54]$2$3"; // R54|C27: LP#V2:D54#RPD (1000)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:a|e1|o|u)\])?(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d55]$2$3"; // R55|C28: LP#V1:D55#RPE (750)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|xt|d|f|g|j|k|q|d@r|d@#\/|d@r3\^|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r|ns@#\.|est@#\/_)\])(\[(?:i|au)\])(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d56]$2$3"; // R56|C28: LP#V2:D56#RPE (300)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:sp|sp1|sp2|mp|perhaps|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6|t@#\/\.|t@#\/|t@#\/_)\])" => "$1[#d6]$2$3"; // R6|C3: LK#V2:D6#RND (880)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:a|e1|o|u)\])?(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d7]$2$3"; // R7|C4: LK#V1:D7#RNE (770)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d8]$2$3"; // R8|C4: LK#V2:D8#RNE (308)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|off\+ar|ser|vr@l|rr@l|ar@#\/|ar@#_|vr@#\/_|vr@#\/\.)\])(\[(?:a|e1|o|u)\])?(\[(?:les|hab|da|sind|durch|wo|sch|\^sch|ng|ns|st|xt|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|d@#\/|d@r3\^|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|\^sch@l3|b@r6|f@r6|w@r6|da@r|l@r6|b@#\/|b@#_|b@l@#_|l@#\/|l@#\/_|l@#\/\.|ns@#\.|w@#\.|w@#\/)\])" => "$1[#d9]$2$3"; // R9|C5: LK#V1:D9#RP (6270)

	#EndSubSection(spacer)
	#BeginSubSection(postspacer)
		// begin postspacer
		// assign concrete values to distances
		"\[#d1\]" => "[#3]"; 
		"\[#d2\]" => "[#4]";
		"\[#d3\]" => "[#2]";
		"\[#d4\]" => "[#3]";
		"\[#d5\]" => "[#4]";
		"\[#d6\]" => "[#4]";
		"\[#d7\]" => "[#5]";
		"\[#d8\]" => "[#5]";
		"\[#d9\]" => "[#3]";
		"\[#d10\]" => "[#2]";
		"\[#d11\]" => "[#5]";
		"\[#d12\]" => "[#5]";
		"\[#d13\]" => "[#6]";
		"\[#d14\]" => "[#7]";
		"\[#d15\]" => "[#5]"; 
		"\[#d16\]" => "[#0]"; 
		"\[#d17\]" => "[#3]"; 
		"\[#d18\]" => "[#0]"; 
		"\[#d19\]" => "[#4]"; 
		"\[#d20\]" => "[#4]"; 
		"\[#d21\]" => "[#4]"; 
		"\[#d22\]" => "[#4]";
		"\[#d23\]" => "[#3]";
		"\[#d24\]" => "[#1]";
		"\[#d25\]" => "[#2]";
		"\[#d26\]" => "[#3]";
		"\[#d27\]" => "[#5]";
		"\[#d28\]" => "[#6]";
		"\[#d29\]" => "[#3]";
		"\[#d30\]" => "[#3]";
		"\[#d31\]" => "[#5]";
		"\[#d32\]" => "[#3]";
		"\[#d33\]" => "[#6]";
		"\[#d34\]" => "[#4]";	
		"\[#d35\]" => "[#3]";	
		"\[#d36\]" => "[#4]";	
		"\[#d37\]" => "[#4]";
		"\[#d38\]" => "[#4]";
		"\[#d39\]" => "[#3]";
		"\[#d40\]" => "[#3]";
		"\[#d41\]" => "[#3]";
		"\[#d42\]" => "[#3]";
		"\[#d43\]" => "[#3]";
		"\[#d44\]" => "[#4]";
		"\[#d45\]" => "[#4]";
		"\[#d46\]" => "[#3]";
		"\[#d47\]" => "[#5]";
		"\[#d48\]" => "[#4]";
		"\[#d49\]" => "[#5]";
		"\[#d50\]" => "[#5]";
		"\[#d51\]" => "[#7]";
		"\[#d52\]" => "[#4]";
		"\[#d53\]" => "[#4]";
		"\[#d54\]" => "[#4]"; // this was missing (also in other models!)
		"\[#d55\]" => "[#5]";
		"\[#d56\]" => "[#6]";
	
		
		// special
		"(\[bei\])\[#n\](\[les\])" => "$1[#2-]$2"; // adjust for coexistencia
		"(\[rr\])(?:\[#.\])?(\[ar\])" => "$1[#9-]$2"; // adjust for rtr (artritis) => english: cartridge
		"(\[in\])\[#5\]\[a\](\[p@r6\])" => "$1[A]$2"; // test
		"\[t\]\[#0\]\[a\]\[ck\]" => "[T][#5][A][CK]";
		"\[rr\]\[#3\]\[vr\]" => "[rr][#0][vr]";

		// corrections
		"\[in\]\[#0\]\[a\]\[pp\]" => "[in][#5][a][pp]";

		// dangerous vs dangers
		"\[vr\]\[#2\]\[s\]" => "[VR][#3-][S]"; // not [#2][E1] means dangers 

		// assign 5 to the rest (standard value)
		//"\[#d..?\]" => "[#5]";

	#EndSubSection(postspacer)
	#BeginSubSection(exitkiller)
		// not needed for font
	#EndSubSection(exitkiller)
	#BeginSubSection(diacritics)
		// not needed for font
	#EndSubSection(diacritics)
	#BeginSubSection(finalizer)
		// SHARED FONT: BORROWING MODEL MUST TAKE CARE OF THIS! (IF NECESSARY)		
		// convert all to upper case for final rendering [a-z]|ä|ö|ü
		"(^.*?$)" => "strtoupper()";
		//"ä" => "Ä";	// strtolower() works with umlaut, but strtoupper() doesn't ?!
		//"ö" => "Ö";
		//"ü" => "Ü"; 
	#EndSubSection(finalizer,=:prt)
#EndSection(rules)
