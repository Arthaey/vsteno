#BeginSection(header)
	// 
	// SPSSBAS - VSTENO shorthand model for spanisch
	// Set of rules interpreted and processed by VSTENO (www.vsteno.ch) 
	// (c) 2019 - Marcel Maci (m.maci@gmx.ch)
 	//
	// This program* is free software: you can redistribute it and/or modify it under	
	// the terms of the GNU General Public License as published by the Free Software
 	// Foundation, either version 3 of the License, or (at your option) any later
 	// version.
	//
 	// This program is distributed in the hope that it will be useful, but WITHOUT
	// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
	// FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
	// details.
	// 
 	// You should have received a copy of the GNU General Public License along with
	// this program. If not, see <http://www.gnu.org/licenses/>.
 	//
	// * As explained in the documentation of VSTENO, shorthand models are considered
	// as interpreted code (and thus code licensed under the same terms as the main 
	// program).
	//
	// Model naming:
	// SP = Spanisch, SS = Stolze-Schrey, BAS = basic system (Grundsystem)
	//
	// Based on:
	//  
	// [1] Arthur Meier, Lehrbuch der Spanischen Stenografie, Verlag und Buchhandlung
	// des Allgemeinen Schweizerischen Stenografenvereins, Druckerei Weitzikon AG, 
	// 8620 Wetzikon ZH, 1. Auflage 1981 (32 Seiten)
	// 
	// [2] Allgemeiner Schweizerischer Stenographenverein (Zentralverein Stolze-Schrey), 
	// Systemurkunden der französischen, italienischen, englischen, spanischen 
	// Stenographie Stolze-Schrey, aufgestellt durch die Kommission für die Übertragungen 
	// auf Fremdsprachen, 1953 (Seiten 25 - 31).
	//
	// When there are differences between the two systems, the variant in [1] is
	// preferred:
	//
	//  	         |           [1]             |            [2]
	// -----------------------------------------------------------------------------
	// cu[áa]n(to)   |           AQ              |            A[NN]
	// así           |           AS[-I]          |            ASI[&E]
	// año           |           AN              |            AHN
	// reía          |           [AR]E[&E]I[&E]  |            [AR]E[&E][AU][&E]
	// bienvenida    |           baseline        |            half up
	// este/estas/estos |        [EST][-E] etc.  |            [ST][-E] etc. (!!!)
	//      
	#BeginSubSection(session)
		// license stuff
		"license" := "
	<p>SPSSBAS - VSTENO shorthand model for spanisch<br>
	Set of rules interpreted and processed by VSTENO (www.vsteno.ch)<br> 
	(c) 2019 - Marcel Maci (m.maci@gmx.ch)</p>
	<p>This program* is free software: you can redistribute it and/or modify it under	
	the terms of the GNU General Public License as published by the Free Software
 	Foundation, either version 3 of the License, or (at your option) any later
 	version.</p>
	<p>This program is distributed in the hope that it will be useful, but WITHOUT
	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
	FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
	details.</p>
 	<p>You should have received a copy of the GNU General Public License along with
	this program. If not, see <http://www.gnu.org/licenses/>.</p>
	<p>* As explained in the documentation of VSTENO, shorthand models are considered
	as interpreted code (and thus code licensed under the same terms as the main 
	program).</p>
	<p>Model naming:<br>
	SP = Spanisch, SS = Stolze-Schrey, BAS = basic system (Grundsystem)</p>
	";
	"release_notes" := "<p>Based on:<br>
	[1] Arthur Meier, Lehrbuch der Spanischen Stenografie, Verlag und Buchhandlung
	des Allgemeinen Schweizerischen Stenografenvereins, Druckerei Weitzikon AG, 
	8620 Wetzikon ZH, 1. Auflage 1981 (32 Seiten)</p>
	<p> [2] Allgemeiner Schweizerischer Stenographenverein (Zentralverein Stolze-Schrey), 
	Systemurkunden der französischen, italienischen, englischen, spanischen 
	Stenographie Stolze-Schrey, aufgestellt durch die Kommission für die Übertragungen 
	auf Fremdsprachen, 1953 (Seiten 25 - 31).</p>
	<p>When there are differences between the two systems, the variant in [1] is 
	preferred.</p>
	<p>Model is based on SE1 rev0 exclusively. Tokens were optimized for an
	inclination of 60 degrees.</p>
	<p>This model is still under developpment and has to be considered in beta state (but many words should be 
	calculated correctly).</p>
		";
	"copyright_footer" := "Created with Free Software<br>VSTENO (www.vsteno.ch)<br>(c) 2018-2019 Marcel Maci";
		// set versions
		"model_version" := "0.3";
		"model_date" := "28. August 2019";
		"required_version" := "0.1";
		"model_se_revision" := "0";
		// disable linguistical analysis
		"hyphenate_yesno" := "no";
		"composed_words_yesno" := "no";
		// set language
		"language_hunspell" := "es";		// set it, even if not used
		"language_hyphenator" := "es";
		// set morphological parameters
		"prefixes_list" := "";
		"stems_list" := "";
		"suffixes_list" := ""; // use non caputuring groups! (?:)
		// engine parameters
		"title_text" := "Spanisch";
		"introduction_text" := "Spanisches System 'SPSSBAS' (Stolze-Schrey, Grundschrift)";
		// font
		"token_distance_wide" := "18";
		"font_importable_yesno" := "yes";
		"font_exportable_yesno" := "no";
		"font_borrow_yesno" := "yes";
		"font_borrow_model_name" := "GESSBAS";
		"font_load_from_file_yesno" := "yes"; 
		// spacer groups
		// L/R: left, right
		// M/N/P/K: minus, normal, plus (more or less space needed), circle (special space rules)
		// A/B/C/D/E: vertical delta of connection (A = baseline, B = 1/2 line, C = 1 line, D = 2 lines, E = 3 lines
		// main groups: (to reduce number of groups)
		// LK = LKA, LKB, LKC
		// LN = LNA, LNB, LNC
		// LP = LPA, LPB
		// RK = RKA, RKB, RKC
		// RN = RNA, RNB, RNC (low; high = RND and RNE are not regrouped!)
		// RP = RPA, RPB, RPC (idem)
		"spacer_token_combinations" := "
			C1:[LK,RK],
			C2:[LK,RN],		// RN = RNA / RNB / RNC
			C3:[LK,RND],
			C4:[LK,RNE],
			C5:[LK,RP],		// RP = RPA / RPB / RPC
			C6:[LK,RPD],
			C7:[LK,RPE],
			C8:[LMA,RK],
			C9:[LMA,RN],		// RN = RNA / RNB / RNC
			C10:[LMA,RND],
			C11:[LMA,RNE],
			C12:[LMA,RP],		// RP = RPA / RPB / RPC
			C13:[LMA,RPD],
			C14:[LMA,RPE],
			C15:[LN,RK],
			C16:[LN,RN],		// RN = RNA / RNB / RNC
			C17:[LN,RND],
			C18:[LN,RNE],
			C19:[LN,RP],		// RP = RPA / RPB / RPC
			C20:[LN,RPD],
			C21:[LN,RPE],
			C22:[LP,RK],
			C23:[LP,RN],		// RN = RNA / RNB / RNC
			C24:[LP,RND],
			C25:[LP,RNE],
			C26:[LP,RP],		// RP = RPA / RPB / RPC
			C27:[LP,RPD],
			C28:[LP,RPE]";
		"spacer_vowel_groups" := "
			V1:[A,O,U],
			V2:[I,AU]";
		"spacer_rules_list" := "
			R1:[C1,V1,D1,?],
			R2:[C1,V2,D2,],
			R3:[C2,V1,D3,?],
			R4:[C2,V2,D4,],
			R5:[C3,V1,D5,?],
			R6:[C3,V2,D6,],
			R7:[C4,V1,D7,?],
			R8:[C4,V2,D8,],
			R9:[C5,V1,D9,?],
			R10:[C5,V2,D10,],
			R11:[C6,V1,D11,?],
			R12:[C6,V2,D12,],
			R13:[C7,V1,D13,?],
			R14:[C7,V2,D14,],
			R15:[C8,V1,D15,?],
			R16:[C8,V2,D16,],
			R17:[C9,V1,D17,?],
			R18:[C9,V2,D18,],
			R19:[C10,V1,D19,?],
			R20:[C10,V2,D20,],
			R21:[C11,V1,D21,?],
			R22:[C11,V2,D22,],
			R23:[C12,V1,D23,?],
			R24:[C12,V2,D24,],
			R25:[C13,V1,D25,?],
			R26:[C13,V2,D26,],
			R27:[C14,V1,D27,?],
			R28:[C14,V2,D28,],
			R29:[C15,V1,D29,?],
			R30:[C15,V2,D30,],
			R31:[C16,V1,D31,?],
			R32:[C16,V2,D32,],
			R33:[C17,V1,D33,?],
			R34:[C17,V2,D34,],
			R35:[C18,V1,D35,?],
			R36:[C18,V2,D36,],
			R37:[C19,V1,D37,?],
			R38:[C19,V2,D38,],
			R39:[C20,V1,D39,?],
			R40:[C20,V2,D40,],
			R41:[C21,V1,D41,?],
			R42:[C21,V2,D42,],
			R43:[C22,V1,D43,?],
			R44:[C22,V2,D44,],
			R45:[C23,V1,D45,?],
			R46:[C23,V2,D46,],
			R47:[C24,V1,D47,?],
			R48:[C24,V2,D48,],
			R49:[C25,V1,D49,?],
			R50:[C25,V2,D50,],
			R51:[C26,V1,D51,?],
			R52:[C26,V2,D52,],
			R53:[C27,V1,D53,?],
			R54:[C27,V2,D54,],
			R55:[C28,V1,D55,?],
			R56:[C28,V2,D56,]";
	#EndSubSection(session)
	#BeginSubSection(analyzer)
		// empty
	#EndSubSection(analyzer)
#EndSection(header)
#BeginSection(font)
	#BeginSubSection(base)
		"@#/." => {  /*h:diacritics:pointhigh*/ 4.5,  0.5,  0,  0,  0,  0,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0.5,  0,  0.5,  1,  1.0,  0,  0,  0.5, /**/ 0,  0.5,  0.5,  0,  1.0,  0,  1,  0.5, /**/ -0.5,  0,  0.5,  1,  1.0,  0,  0,  0.5, /**/ 0.5,  -0.5,  0.5,  0,  1.0,  0,  1,  0.5, /**/ 0.5,  0,  0.5,  0,  1.0,  0,  1,  0.5  }	
		"0" => { /*spanisch*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 1, 0, 0, 1, 5, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 17.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 17.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 2.5, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 1, 0, 1, 1, 0, 0, 0,  /**/ 6, 2.5, 0, 0, 1, 5, 1, 0 }
		"1" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 11, 0, 0, 1, 5, 0, 0,  /**/ 7, 19, 0, 0, 1, 0, 0, 0,  /**/ 7, 1, 0, 0, 1, 0, 0, 0 }
		"2" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 0, 1, 5, 0, 0.5,  /**/ 1.25, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5.75, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 15, 0.5, 0, 1, 0, 0, 0,  /**/ 0, 1, 0, 0, 1, 0, 0, 0.5,  /**/ 7, 1, 0, 0, 1, 0, 0, 0 }
		"3" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 0, 1, 5, 0, 0.5,  /**/ 1.25, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5.75, 18, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 15, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 7, 7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 1, 0, 1, 1, 0, 0, 0,  /**/ 0, 5, 0, 0, 1, 0, 1, 0 }
		"4" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 19, 0, 0, 1, 5, 0, 0,  /**/ 0, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 7, 11, 0, 0, 1, 0, 0, 0,  /**/ 5.5, 19, 0, 0, 1, 5, 0, 0,  /**/ 5.5, 1, 0, 0, 1, 0, 0, 0 }
		"5" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 7, 19, 0, 0, 1, 5, 0, 0,  /**/ 0, 19, 0, 0, 1, 0, 0, 0,  /**/ 0, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 6, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 4, 0.5, 0, 1, 0, 0, 0 }
		"6" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 7, 19, 0, 0, 1, 5, 0, 0.5,  /**/ 1, 11, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.5, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 10, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0, 5, 0.5, 0, 1, 0, 1, 0 }
		"7" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 19, 0, 0, 1, 5, 0, 0,  /**/ 7, 19, 0, 0, 1, 0, 0, 0,  /**/ 3, 1, 0, 0, 1, 0, 0, 0,  /**/ 3.5, 11, 0, 0, 1, 5, 0, 0,  /**/ 6.5, 11, 0, 0, 1, 0, 0, 0 }
		"8" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 3.5, 11, 0, 0, 1, 5, 0, 0.5,  /**/ 7, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 11, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 6, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 6, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 11, 0, 1, 1, 0, 0, 0 }
		"9" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 7, 14, 0, 0, 1, 5, 0, 0.5,  /**/ 3.5, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 6, 6, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 1, 0.5, 0, 1, 0, 0, 0 }
		"IST" => { /*header*/ 1, 0.5, 0, 0.5, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0.5, 9.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 1, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 10.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0.5, 9.5, 0.5, 0, 3, 0, 1, 0 }
		"ES" => { /*header*/ 1, 0.5, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 2, 5, 0, 0, 1, 0, 1, 0 }
		"EST" => { /*spanisch*/ 1, 0.5, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, "LPB:LP", /*data*/ 0.5, 5.25, 0, 1, 1, 0, 0, 0,  /**/ 0, -0.05, 0, 0, 1, 0, 1, 0 }
		"NO" => { /*header*/ 1, 0.5, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 6, -5, 0, 0, 1, 0, 1, 0 }
		"WAS" => { /*header*/ 5, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 1.5, 8.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 5, 10, 0.5, 98, 1.5, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 1.5, 8.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 6, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0.5, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 4.25, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 8, 2, 0.5, 0, 1, 0, 1, 0 }
		"AUCH" => { /*header*/ 5, 1, -1, 0.5, 0.5, 0.5, 0, 0, 0, 0, "", "", 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 4.2, 10, 0.7, 2, 2.5, 0, 0, 0.6,  /**/ 7.8, 5.6, 0.8, 0, 3, 0, 0, 0.5,  /**/ 6.9, -5.2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5.5, -8, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 4, -10, 0.5, 0, 1, 0, 0, 0 }
		"TIG" => { /*header*/ 7.5, 0.5, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 18.75, 0.5, 1, 1.5, 0, 0, 0,  /**/ 6, 20, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 7.5, 18, 0.5, 0, 3, 0, 0, 0,  /**/ 7.5, 10, 0, 0, 1, 0, 1, 0,  /**/ 7.5, 12.5, 0, 4, 1, 0, 0, 0 }
		"NICHT" => { /*header*/ 15, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 6.5, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 7.75, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 11, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 12.5, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 14, 1, 0.5, 0, 1, 0, 1, 0 }
		"ALL" => { /*header*/ 3, 0.5, 0, 0.5, 0.75, 0.75, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 7, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 3, 2, 0.5, 0, 1, 0, 1, 0 }
		"WERD" => { /*header*/ 1.25, 0.5, 0, 0.5, 0, 2, 0, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNB:LN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 1.25, 0, 0.5, 0, 1.2, 0, 1, 0 }
		"IN" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0,"", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0, "LNA:LN:RNB:RN", /*data*/ 0, 3, 0, 1, 1, 0, 0, 0,  /**/ 3, 4, 0, 0, 1, 0, 0, 0,  /**/ 2, 0, 0, 0, 1, 0, 0, 0,  /**/ 5, 1, 0, 0, 1, 0, 1, 0 }
		"LES" => { /*spanish*/ 2.5, 0.5, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPA:RP", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 1.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 1.75, 0, 0.5, 0, 1.2, 0, 2, 0,  /**/ 2.5, 1, 0.5, 0, 1.2, 0, 1, 0 }
		"SEIN" => { /*header*/ 20, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNB:LN:RNB:RN", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0.5,  /**/ 2, 3.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 8, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 15, 3.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 19, 1, 0.5, 0, 1, 0, 0, 0,  /**/ 20, 0, 0, 0, 1, 0, 1, 0 }
		"GEGEN" => { /*header*/ 8, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNC:RN", /*data*/ 0.5, 7.5, 0.5, 1, 1, 0, 0, 0,  /**/ 1.5, 10, 0.5, 2, 1, 0, 0, 0.5,  /**/ 4, 8, 0.5, 0, 1, 0, 0, 0,  /**/ 4, 4.5, 0, 0, 1, 0, 0, 0.5,  /**/ 6.25, 5.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 8, 3, 0, 0, 1, 0, 0, 0,  /**/ 8, 0, 0, 0, 1, 0, 1, 0 }
		"HAB" => { /*header*/ 4, 0.5, 0, 0, 1.5, 1.5, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 1, 0.5, 0, 1, 0, 1, 0 }
		"HAT" => { /*header*/ 4.5, 0.5, 0, 0.5, 1, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNB:LN:RNC:RN", /*data*/ 0, 8.75, 0.5, 1, 1.5, 0, 0, 0,  /**/ 1, 10, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 3.5, 7.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3.5, 1.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 0, 2, 0.5, 0, 1, 0, 1, 0 }
		"DA" => { /*header*/ 0, 0.5, 0, 0, 0, 2.25, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"SIND" => { /*header*/ 2.5, 0.5, 0, 0.5, 1, 2.5, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, "", "", "", 0, "LPA:LP:RPB:RP", /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 7.75, 6.2, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ -0.14, 0.5, 0.5, 0, 1, 0, 0, 0 }
		"VOR" => { /*header*/ 5, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RNC:RN", /*data*/ 0, 10, 0, 1, 1, 0, 0, 0.5,  /**/ 0, 6.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.25, 5.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 1, 3, 0, 0, 0.5,  /**/ 5, 2.5, 0.7, 0, 3, 0, 0, 0.7,  /**/ 2.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"VORAR" => { /*header*/ 5, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0.5, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RNC:RN", /*data*/ 0, 10, 0, 1, 1, 0, 0, 0.5,  /**/ 0, 6.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.25, 5.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.5, 5, 0.5, 1, 3, 0, 0, 0.5,  /**/ 8, 2.5, 0.7, 0, 3, 0, 0, 0.7,  /**/ 5.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 3, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 5.5, 5, 0.5, 0, 1, 0, 0, 0,  /**/ 8, 7.5, 0.5, 0, 1, 0, 0, 0,  /**/ 5.5, 10, 0.5, 0, 1, 0, 0, 0,  /**/ 3, 7.5, 0.5, 0, 1, 0, 0, 0,  /**/ 5.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"ANT" => { /*header*/ 26, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 4, 4.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 7, 5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 11.5, 4.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 17.75, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 22, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 26, 1, 0.5, 0, 1, 0, 1, 0 }
		"RÜCK" => { /*header*/ 8, 0.5, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK:RKA:RK", /*data*/ 2.5, 0, 0.5, 1, 1, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 1, 0 }
		"UR" => { /*header*/ 5, 0.5, 0, 0, 0, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RNC:RN", /*data*/ -2, 10, 0, 1, 3, 0, 0, 0.5,  /**/ 3, 5, 0.5, 0, 1, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"ANTI" => { /*header*/ 25, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 4, 4.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 8, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 11, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 18, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 22, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 22.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 23.5, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 24.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 23.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 22.5, 1, 0.5, 0, 1, 0, 1, 0 }
		"ZURÜCK" => { /*header*/ 5, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK", /*data*/ -2, -4, 0.5, 1, 1, 0, 0, 0.5,  /**/ 1.5, -3, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4.25, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 2, 0, 0, 0.5,  /**/ 1, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 1, 1, 0.5, 0, 2, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 0, 0.5, 1, 1, 0, 1, 0 }
		"INTER" => { /*header*/ 5, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK", /*data*/ -2, -4, 0.5, 1, 1, 0, 0, 0.5,  /**/ 1.5, -3, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 3.5, 0, 0.5, 1, 1, 0, 1, 0 }
		"ION" => { /*header*/ 25, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 4, 4.5, 0.5, 1, 1.5, 5, 0, 0.5,  /**/ 8, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 11, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 18, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 22, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 25, 2, 0.5, 0, 1, 0, 1, 0 }
		"HAFT" => { /*header*/ 4, 0.5, 0, 0, 4, 1, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 2, 0.5, 0, 1, 0, 1, 0 }
		"SCHAFT" => { /*header*/ 20, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 1.5, 0, 0, 0.5,  /**/ 0.75, 3, 0.5, 0, 3, 0, 0, 0.5,  /**/ 19.25, 2.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 20, 0, 0.5, 0, 1, 0, 1, 0 }
		"TALL" => { /*header*/ 3, 0.5, 0, 0.5, 0.75, 0.75, 0, 0, 0, 0, "", "", 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 15, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 7, 18.5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 6.1, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 17, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, 12, 0.5, 0, 2.5, 0, 0, 0,  /**/ 7, 10, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 8, 12, 0.5, 0, 1, 0, 1, 0 }
		"TUNG" => { /*header*/ 8, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, /*data*/ 7, 18, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 8, 19.5, 0.5, 0, 1.3, 0, 0, 0.5,  /**/ 9, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 8, 19.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 7, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 7, 11.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 6, 10, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 5, 12, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 7, 14, 0.5, 0, 1, 0, 1, 0 }
		"AUF" => { /*header*/ 9, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNB:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 2, 2, 0.5, 0, 2, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7.5, 2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 9, 5, 0.5, 0, 1, 0, 1, 0 }
		"AUS" => { /*header*/ 20, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNA:RN", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0.5,  /**/ 3, 3, 0.5, 0, 1, 0, 0, 0.5,  /**/ 10, 5, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 17, 3, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 19, 1, 0.5, 0, 3, 0, 0, 0.5,  /**/ 20, 0, 0.5, 0, 1, 0, 1, 0 }
		"-AUS" => { /*header*/ 20, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "RNB:RN", /*data*/ 10, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 17, 3, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 19, 1, 0.5, 0, 3, 0, 0, 0.5,  /**/ 20, 0, 0.5, 0, 1, 0, 1, 0 }
		"BEI" => { /*header:differentinspanish*/ 23, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 6, 2, 0.5, 0, 2, 0, 0, 0.5,  /**/ 14, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 17, 0.2, 0, 0, 1, 0, 2, 0.5,  /**/ 23, 5, 0.5, 0, 1, 0, 1, 0 }
		"BEI+AR" => { /*header*/ 25, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 5, 2, 0.5, 0, 2, 0, 0, 0.5,  /**/ 11, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 19, 0, 0.5, 0, 1, 0, 0, 0.5, /**/ 21.5, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 19, 5, 0.5, 0, 1, 0, 0, 0.5, /**/ 16.5, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 19, 0, 0.5, 0, 1, 0, 0, 0.5, /**/ 20.5, 0.2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 25, 5, 0.5, 0, 1, 0, 1, 0 }
		"DURCH" => { /*header*/ 10, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 3, 10, 0, 1, 1, 0, 0, 0.3,  /**/ 0.5, 5, 0.3, 0, 1, 0, 0, 0,  /**/ 8, 0, 0, 0, 1, 0, 1, 0 }
		"DIS" => { /*header*/ 8, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0.5,  /**/ -1, 7.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 10, 0.5, 0, 1, 0, 0, 0,  /**/ 6.5, 5, 0, 0, 1, 0, 1, 0 }
		"SICH" => { /*header*/ 11.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0, 1, 1, 0, 0, 0.5,  /**/ 2, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 9.5, 0.5, 0, 1, 0, 0, 0,  /**/ 8, 5, 0, 0, 1, 0, 1, 0 }
		"SOLCH" => { /*header*/ 15, 1, -1, 0.5, 0.5, 0.5, 0, 0, 0, 0, "", "", 0, 0, -0.5, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNA:RN", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0.5,  /**/ 2.5, 4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5.5, 4, 0, 0, 1, 0, 0, 0,  /**/ 9, 0, 0, 0, 1, 0, 0, 0,  /**/ 10, 3.5, 0, 1, 1.3, 0, 0, 0.5,  /**/ 12.5, 5, 0.7, 2, 2.5, 0, 0, 0.8,  /**/ 15, 2, 0.8, 0, 3, 0, 0, 0.5,  /**/ 15, -13, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 13, -15, 0.5, 0, 2, 0, 99, 0.5,  /**/ 11.5, -14, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 10, -12, 0.5, 0, 1, 0, 2, 0.5,  /**/ 13, -7, 0.5, 0, 1, 0, 1, 0.5,  /**/ 15, -2.5, 0, 4, 1, 0, 0, 0 }
		"WIRD" => { /*header*/ 5, 0.5, 0, 0.5, 2, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0.5, 1, 1, 0, 0, 0.5,  /**/ 3.5, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 7.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 10, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 7.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0,  /**/ 5, 5, 0.5, 1, 1, 0, 1, 0 }
		"SELB" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, "LNA:LN:RNA:RN", /*data*/ 0.5, 0, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1, 0.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0, 0.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 0, 0.5, 0, 1, 0, 2, 0.5,  /**/ 2, 2, 0.5, 0, 1, 0, 1, 0 }
		"WO" => { /*header*/ 7, 0.5, 0, 0.5, 0.5, 0.5, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 1.5, 8.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 5, 10, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 1.5, 8.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 6, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1, 3.25, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2.5, 1.5, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 6, 1.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6.5, 0, 0.5, 0, 1, 0, 1, 0 }
		"VILLEICHT" => { /*header*/ 5, 0.5, 0, 0.5, 0.75, 0.75, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 8.5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 2, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7, 12, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2, 20, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 17, 0.5, 0, 1, 0, 1, 0 }
		"HEIT" => { /*header*/ 24, 0, 1.5, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 24, 20, 0, 1, 1, 0, 0, 0,  /**/ 24, 20, 0, 0, 1, 0, 1, 0 }
		"HEIT-1" => { /*header*/ 24, 0, 1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 24, 20, 0, 1, 1, 0, 0, 0,  /**/ 24, 20, 0, 0, 1, 0, 1, 0 }
		"FORT" => { /*header*/ 8, 0.5, 0, 0, 1, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNC:RN", /*data*/ 5, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 8, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 6.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, -5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4.25, -9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 2.5, 0.5, 4, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"\" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0 }
		"#0" => { /*header*/ 0, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, "",  /**/ "", "", "", 0, 2, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#S#" => { /*header*/ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 3, 0, 0, 0, 1, 5, 1, 0 }
		"#1" => { /*header*/ 1, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#2" => { /*header*/ 2, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#3" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#4" => { /*header*/ 4, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#5" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#6" => { /*header*/ 6, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#7" => { /*header*/ 7, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#8" => { /*header*/ 8, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#9" => { /*header*/ 9, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#10" => { /*header*/ 10, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#1-" => { /*header*/ -1, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#2-" => { /*header*/ -2, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#3-" => { /*header*/ -3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#4-" => { /*header*/ -4, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#5-" => { /*header*/ -5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#6-" => { /*header*/ -6, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#7-" => { /*header*/ -7, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#8-" => { /*header*/ -8, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#9-" => { /*header*/ -9, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"SCHM" => { /*header*/ 6, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 2, 9, 0.5, 1, 1, 0, 0, 0.5,  /**/ 4, 10, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6, 9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 2.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 1.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, 0.5, 0.5, 0, 3, 0, 0, 0,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"SCHW" => { /*header*/ 7, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPD", /*data*/ 5, 17, 0.5, 1, 1, 0, 0, 0.5,  /**/ 7, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 9, 20, 0.5, 98, 1.5, 0, 0, 0.5,  /**/ 7, 19, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 17, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"MPF" => { /*header*/ 6, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNC:LN:RNA:RN", /*data*/ 0, 9, 0.5, 1, 1.5, 0, 0, 0,  /**/ 1.5, 10, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 3, 8, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 4.5, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 5.75, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4.5, 3.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.5, 3.1, 0.5, 0, 1, 0, 0, 0.8,  /**/ 0.75, 2.6, 0.8, 0, 1, 0, 0, 0.5,  /**/ 1.5, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 4.5, 2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5.75, 2, 0.5, 0, 1, 0, 1, 0 }
		"SCH" => { /*header*/ 9, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 5, 7, 0.5, 1, 1, 0, 0, 0.5,  /**/ 7, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 9, 10, 0.5, 98, 1.5, 0, 0, 0.5,  /**/ 7, 9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0.5,  /**/ 5, 2.5, 0, 4, 1, 0, 0, 0 }
		"^SCH" => { /*header*/ 9, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0.1, 3, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 7, 0.5, 1, 1, 0, 0, 0.5,  /**/ 7, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 9, 10, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 7, 9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0.5,  /**/ 5, 2.5, 0, 4, 1, 0, 0, 0 }
		"^SCHM" => { /*header*/ 6, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0.1, 3, 0, 0, 0, 0, 0, 0, 0, /*data*/ 2, 9, 0.5, 1, 1, 0, 0, 0.5,  /**/ 4, 10, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6, 9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 2.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 1.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, 0.5, 0.5, 0, 3, 0, 0, 0,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"^SCHW" => { /*header*/ 7, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0.1, 3, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 17, 0.5, 1, 1, 0, 0, 0.5,  /**/ 7, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 9, 20, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 7, 19, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5, 17, 0.5, 0, 3, 0, 0, 0.5,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"^CH" => { /*header*/ 6, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0.1, 3, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 4, 10, 0.7, 2, 2.5, 0, 0, 0.5,  /**/ 7, 6.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 7, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 5.5, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 3, -8.5, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 2.5, -6.5, 0.5, 0, 1, 0, 2, 0.5,  /**/ 4, -4, 0.5, 0, 1, 0, 1, 0.5,  /**/ 7, 2.5, 0, 4, 1, 0, 0, 0 }
		"^ZW" => { /*header*/ 5, 1, -1, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0.1, 3, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 20, 0, 1, 3, 0, 0, 0,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"^Z" => { /*header*/ 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 1, -1, 0, 3, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 10, 0, 1, 3, 0, 0, 0,  /**/ 5, -5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4.25, -9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 2, 0.5,  /**/ 5, 2.5, 0.5, 4, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"CK" => { /*header*/ 4, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNE", /*data*/ 0, 28.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 30, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 27, 0.5, 0, 2.5, 0, 0, 0,  /**/ 4, 25, 0, 0, 3, 0, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 1, 0,  /**/ 4, 2.5, 0, 4, 1, 0, 0, 0 }
		"FF" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 27, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.8, 30, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 28, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 1, 0.5, 0, 1, 0, 1, 0 }
		"LL" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNA:RN", /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 8.5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 2, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 1.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2, 0.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 2, 0.5,  /**/ 3, 2, 0.5, 0, 1, 0, 1, 0 }
		"LT" => { /*header*/ 8.5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPD", /*data1*/ 3, 15.5, 0.5, 1, 1.0, 0, 0, 0.5,  /*2*/ 5, 18, 0.5, 2, 1.0, 0, 0, 0.5,  /*3*/ 2, 20, 0.5, 0, 1.75, 0, 0, 0.5,  /*4*/ 1.5, 16.75, 0.5, 0, 2.0, 0, 0, 0.0,  /*5*/ 6, 10, 0.0, 0, 1.5, 0, 0, 0,  /*6*/ 2, 9, 0.5, 0, 2.0, 0, 0, 0.5,  /*7*/ 0, 5.75, 0.5, 0, 2.5, 0, 0, 0.5,  /*8*/ 1.5, 2, 0.5, 0, 2.0, 0, 0, 0.5,  /*9a*/ 6, 0, 0.5, 4, 1.5, 0, 2, 0.5, /*9b*/ 6, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /*10*/ 8.5, 3.5, 0.5, 0, 1.0, 0, 1, 0.5 }
		"MM" => { /*header*/ 13, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 9, 0.5, 1, 1, 0, 0, 0.5,  /**/ 1, 10, 0.5, 0, 1.2, 0, 0, 0.5,  /**/ 8, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 10, 8.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 10, 2, 0.5, 0, 2.5, 0, 0, 0,  /**/ 12, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 12, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 13, 2, 0.5, 0, 1, 0, 1, 0 }
		"NN" => { /*header*/ 17, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 9, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 5, 8, 0.5, 0, 3, 0, 0, 0.5,  /**/ 11, 2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 14, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 14, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 17, 2, 1, 0, 1, 0, 1, 0 }
		"PP" => { /*header*/ 6, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNE", /*data*/ 0, 30, 0, 1, 3, 0, 0, 0,  /**/ 0, 3, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 3, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 6, 2, 0, 0, 1, 0, 1, 0 }
		"RR" => { /*header*/ 10, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, "LKC:LK:RKC:RK", /*data*/ 0, 8, 0.5, 1, 1, 0, 0, 0.5,  /**/ 5, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 8, 7.75, 0.5, 5, 3, 0, 0, 0.5,  /**/ 10, 4, 0.5, 0, 3, 0, 0, 0.5,  /**/ 9, 0.25, 0.5, 5, 2, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 4.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 10, 0.5, 4, 1, 0, 0, 0.5,  /**/ 5, 10, 0.5, 0, 1, 0, 1, 0 }
		"RR6" => { /*header*/ 10, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKC:LK", /*data*/ /*1*/ 5, 0, 0.5, 1, 1, 0, 0, 0.5, /*2*/ 9, 0.25, 0.5, 0, 1.0, 0, 0, 0.5, /*3*/ 10, 4, 0.5, 0, 1, 0, 0, 0.5, /*4*/ 8, 7.75, 0.5, 0, 1, 0, 0, 0.5, /*5*/ 5, 10, 0.5, 0, 1.5, 0, 0, 0.5, /*6*/ 1, 9, 0.5, 0, 2.5, 0, 0, 0.5, /*7*/ 0.5, 4.75, 0.5, 0, 2.5, 0, 0, 0.5, /*8*/ 5, 0, 0.5, 0, 1, 0, 1, 0.5 }
		"SS" => { /*header*/ 14, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 9, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 7.5, 8, 0, 0, 3, 0, 0, 0,  /**/ 9.5, 6, 0, 0, 3, 0, 0, 0,  /**/ 14, 0, 0, 0, 1, 0, 1, 0 }
		"SUS" => { /*header*/ 18, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", /*data*/ 0, 0, 0.5, 1, 1.0, 0, 0, 0.5,  /**/ 1, 4, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 5.5, 4.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 13, 0, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 18, -5, 0.5, 0, 1, 0, 1, 0.5 }
		"SOBRE" => { /*spanish*/ 15.5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 13, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RNC:RN", /*data*/ 0, 0, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 9, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6, 10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 10.5, 8, 0.5, 0, 3, 0, 0, 0.5,  /**/ 13.75, 5.4, 0.5, 0, 3, 0, 0, 0.5, /**/ 15.5, 2.5, 0.5, 0, 3, 0, 0, 0.5, /**/ 13, 0, 0.5, 0, 3, 0, 0, 0.5, /**/ 10.5, 2.5, 0.5, 0, 3, 0, 0, 0.5, /**/ 13.75, 5.4, 0.5, 0, 3, 0, 1, 0.5 }
		"TT" => { /*header*/ 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPE", /*data*/ 0, 30, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"CH" => { /*header*/ 5, 1, -1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 2.5, 10, 0.7, 2, 2.5, 0, 0, 0.8,  /**/ 5, 7, 0.8, 0, 3, 0, 0, 0.5,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 99, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0.5,  /**/ 5, 2.5, 0, 4, 1, 0, 0, 0 }
		"ND" => { /*header*/ 3.5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNB:RN", /*data*/ 0, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3.5, 7, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0, 0, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"NG" => { /*header*/ 4, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "LPB:LP:RPC:RP", /*data*/ 2.5, 7.5, 0.5, 1, 1.3, 0, 0, 0.5,  /**/ 3, 9.25, 0.5, 0, 1.3, 0, 0, 0.5,  /**/ 5, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, 9.25, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2.5, 7.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3.5, 1.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, 2.25, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 3.5, 4, 0.5, 0, 1, 0, 1, 0.5,  /**/ 3.5, 4, 0, 4, 1, 0, 0, 0 }
		"NK" => { /*header*/ 6, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "LPB:LP:RPD", /*data*/ 3, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 6, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, 2, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 5, 0.5, 0, 1, 0, 1, 0.5,  /**/ 4, 5.5, 0, 4, 1, 0, 0, 0 }
		"NS" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPB:LP:RPC:RP", /*data*/ 2, 5.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 5, 7.75, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 9, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2.75, 1.25, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 2.5, 0, 99, 0.5,  /**/ 0, 2, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 2.5, 2.75, 0.5, 0, 1, 0, 1, 0.5,  /**/ 3, 3.5, 0, 4, 1, 0, 0, 0 }
		"PF" => { /*header*/ 8, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNC:RN", /*data*/ 0, 7, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0.5, 7, 0.5, 2, 1, 0, 0, 0.5,  /**/ 6, 9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 9, 11.1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 7.5, 16.5, 0.5, 0, 1.25, 0, 0, 0.5,  /**/ 2, 20, 0.5, 0, 2.25, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2, 0, 0.5, 4, 1.25, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.25, 0, 2, 0.5,  /**/ 4, 2, 0.5, 0, 1, 0, 1, 0 }
		"SP" => { /*header*/ 8, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 18, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 20, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 18, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ /*4, 15, 0.5, 0, 3, 0, 0, 0.5,*/  /**/ /*4, 5, 0.5, 0, 2.5, 0, 0, 0.5,*/  /**/ 4, 3, 0.5, 0, 2, 0, 0, 0.5,  /**/ 6, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 6, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 8, 2, 0.5, 0, 1, 0, 1, 0 }
		"MP" => { /*spanish*/ 8, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 18, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 20, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 18, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4, 15, 0.5, 0, 3, 0, 0, 0.5,  /**/ 4, 5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4, 3, 0.5, 0, 2, 0, 0, 0.5,  /**/ 6, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 6, 0, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 8, 2, 0.5, 0, 1, 0, 0, 0, /*n*/ 4, 4, 0.5, 0, 1, 0, 0, 0, /*n*/ 1, 3, 0.5, 0, 1, 0, 0, 0, /*n*/ 6, 2, 0.5, 0, 1, 0, 2, 0, /*n*/ 8, 2, 0.5, 0, 1, 0, 1, 0 }
		"ST" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 1, 0 }
		"ZW" => { /*header*/ 5, 1, -1, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 5, 20, 0, 1, 3, 0, 0, 0,  /**/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"EN" => { /*header*/ 5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 5, 0, 0, 1, 1, 0, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 1, 0 }
		"EM" => { /*header*/ 18, 5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 5, 0, 0, 1, 1, 0, 0, 0,  /**/ 13, 0, 0.5, 1, 1, 0, 1, 0 }
		"/EN" => { /*header*/ 5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 10, 0, 0, 1, 1, 0, 0, 0,  /**/ 10, 0, 0, 0, 1, 0, 1, 0 }
		"/EM" => { /*header*/ 18, 5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 10, 0, 0, 1, 1, 0, 0, 0,  /**/ 15, 0, 0.5, 1, 1, 0, 1, 0 }
		"DEN" => { /*header*/ 5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 1, 0 }
		"DEM" => { /*header*/ 13, 5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 13, 0, 0.5, 1, 1, 0, 1, 0 }
		"VR+AR" => { /*header*/ 5, 0.5, 0, 0.5, 0, 1, 0, 0, 0, 0, "", "", 0, 0, 0.5, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RKB:RK", /*data*/ 2.5, 5, 0.5, 1, 3, 0, 0, 0.5,  /**/ 5, 2.5, 0.7, 0, 3, 0, 0, 0.7,  /**/ 2.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0.7,  /**/ 5, 7.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 10, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 7.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"B" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0.0,  /**/ 0, 3, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 5, 2, 0.5, 0, 1, 0, 1, 0 }
		"C" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 1, 9.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 3, 10, 0.5, 98, 3, 0, 0, 0.5,  /**/ 1, 9.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 7.5, 0.5, 0, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"D" => { /*header*/ 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"F" => { /*header*/ 4, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPC:RP", /*data*/ 0, 10, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3, 17, 0.5, 2, 2, 0, 0, 0.5,  /**/ 1.8, 20, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 18, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 2, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 4, 2, 0.5, 0, 1, 0, 1, 0 }
		"G" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RNC:RN", /*data*/ 1.75, 8.75, 0.5, 1, 1.5, 0, 0, 0,  /**/ 2, 10, 0.5, 2, 2.5, 0, 0, 0.5,  /**/ 4.5, 8, 0.0, 0, 3, 0, 0, 0,  /**/ 4.5, 0, 0, 0, 1, 0, 1, 0,  /**/ 4.5, 2.5, 0, 4, 1, 0, 0, 0 }
		"H" => { /*header*/ 4, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "LNB:LN:RPC:RP", /*data*/ 0.5, 9, 0.5, 1, 1.0, 0, 0, 0.5,  /**/ 1.75, 10, 0.5, 2, 2.0, 0, 0, 0.5,  /**/ 3.5, 7.2, 0, 0, 2.5, 0, 0, 0,  /**/ 3.5, 2, 0.5, 0, 2.0, 0, 0, 0.5,  /**/ 1.95, 0, 0.5, 0, 1.75, 0, 0, 0.5,  /**/ 0, 0.5, 0.5, 0, 1.0, 0, 99, 0.5,  /**/ 0, 2.4, 0.5, 0, 1.0, 0, 2, 0.5,  /**/ 3.5, 4.59, 0.5, 0, 1, 0, 1, 0.5,  /**/ 3.5, 5, 0, 4, 1, 0, 0, 0 }
		"J" => { /*header*/ 3, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPB:LP:RPC:RP", /*data*/ 3, 10, 0, 1, 2.5, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 1.0, 0, 0, 0.5,  /**/ 0, 1.5, 0.5, 0, 1.0, 0, 99, 0.5,  /**/ 0.25, 2.5, 0.5, 0, 1.0, 0, 2, 0.5,  /**/ 3, 5, 0.5, 0, 1, 0, 1, 0 }
		"J^" => { /*header*/ 3, 0.5, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 2, 10, 0, 1, 2.5, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 1.0, 0, 0, 0.5,  /**/ 0, 1.5, 0.5, 0, 1.0, 0, 0, 0.5,  /**/ 3, 5, 0.5, 0, 1, 0, 1, 0 }
		"K" => { /*header*/ 4, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RND", /*data*/ 0, 18, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2, 20, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4, 18, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4, 15, 0.5, 0, 3, 0, 0, 0,  /**/ 4, 0, 0, 0, 1, 0, 1, 0,  /**/ 4, 2.5, 0, 4, 1, 0, 0, 0 }
		"L" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPB:RP", /*data*/ 0, 5, 0.5, 1, 1.0, 0, 0, 0.5,  /**/ 3.25, 8.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 7, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1.75, 0, 0, 0,  /**/ 2, 0, 0.5, 4, 1.0, 0, 0, 0.5,  /**/ 2, 0, 0.5, 0, 1.0, 0, 2, 0.5,  /**/ 3.25, 1.5, 0.5, 0, 1, 0, 1, 0 }
		"@L" => { /*header*/ 0, 0, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 1, 0, 1, 0, 0, 0.5,  /**/ 1, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ -1, 1, 0.5, 0, 1, 0, 2, 0.5,  /**/ 0, 0, 0.5, 0, 1, 0, 1, 0 }
		"@L3" => { /*header*/ 0, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 1, 0, 1, 0, 0, 0.5,  /**/ -0.75, 0.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ -1.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ -0.75, -0.75, 0.5, 0, 1, 0, 2, 0.5,  /**/ 0, 0, 0.5, 0, 1, 0, 1, 0 }
		"&L" => { /*header*/ 2, 0.5, 0, 0.5, 1, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0.5, 0, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1, 0.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 0.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0.5, 0, 0.5, 0, 2.5, 0, 1, 0 }
		"M" => { /*header*/ 7.5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 8.7, 0.5, 1, 1.0, 0, 0, 0.5,  /**/ 0.75, 10, 0.5, 2, 1.0, 0, 0, 0.5,  /**/ 1.7, 10, 0.5, 0, 1.75, 0, 0, 0.5,  /**/ 3.8, 7.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, 2, 0.5, 0, 1.75, 0, 0, 0,  /**/ 5.5, 0, 0.5, 4, 1.0, 0, 0, 0.5,  /**/ 5.5, 0, 0.5, 0, 1.0, 0, 2, 0.5,  /**/ 7.5, 1.75, 0.5, 0, 1, 0, 1, 0 }
		"N" => { /*header*/ 11, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 4.25, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1.9, 5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 4.5, 3.9, 0.5, 0, 3, 0, 0, 0.5,  /**/ 7.5, 1, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 9.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 9.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 11, 1, 0.5, 0, 1, 0, 1, 0 }
		"N=" => { /*header*/ 12, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN", /*data*/ 0, 0, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 4.25, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 2.9, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5.5, 3.9, 0.5, 0, 1, 0, 0, 0.5,  /**/ 8.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 10.5, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 10.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 12, 1, 0.5, 0, 1, 0, 1, 0 }
		"P" => { /*header*/ 5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 20, 0, 1, 2.5, 0, 0, 0,  /**/ 0, 2.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 4, 1.0, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1.0, 0, 2, 0.5,  /**/ 5, 2, 0, 0, 1, 0, 1, 0 }
		"Q" => { /*header*/ 3, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LPA:LP:RPD", /*data*/ 1, 19, 0.5, 1, 1, 0, 0, 0.5,  /**/ 3, 20, 0.5, 98, 3, 0, 0, 0.5,  /**/ 1, 19, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0, 15, 0.5, 0, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"VR" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 2.5, 5, 0, 0, 0, 0, 0, 0, "LKB:LK:RKB:RK", /*data*/ 2.5, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 3.75, 4, 0.7, 5, 2.5, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 3, 0, 0, 0.7,  /**/ 4.5, 0.5, 0.7, 5, 2, 0, 0, 0.7,  /**/ 3.25, 0.15, 0.7, 5, 1.5, 0, 0, 0.7,  /**/ 2.5, 0, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 4, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 1, 0, /*diacritics*/ 0,  10,  0,  "@#/.",  0,  0,  0,  0 }
		"AR" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK:RKA:RK", /*data*/ 2.5, 0, 0.5, 1, 1, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 1, 0 }
		"AR^" => { /*header*/ 5, 0.5, 0, 0.5, 0, 3, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 2.5, 0, 0.5, 1, 1, 0, 0, 0.7,  /**/ 5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 5, 2.5, 0.7, 0, 1, 0, 1, 0 }
		"AR5" => { /*header*/ 5, 0.5, 0, 0.5, 0, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 2.5, 0.7, 1, 1, 0, 0, 0.7,  /**/ 2.5, 5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 0, 2.5, 0.7, 0, 3, 0, 0, 0.5,  /**/ 2.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 2.5, 0, 0.5, 1, 1, 0, 1, 0 }
		"AUF+AR" => { /*header*/ 10.5, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LKA:LK:RNB:RN", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0.5,  /**/ 1.75, 2.5, 0.5, 0, 2, 0, 0, 0,  /**/ 5.75, 0, 0.5, 0, 1, 0, 0, 0.7,  /**/ 10.5, 2.5, 0.7, 0, 1, 0, 0, 0.7,  /**/ 8, 5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 5.5, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 8, 0, 0.5, 0, 1, 0, 1, 0 }
		"@R" => {  /*R3^fromDESSBAS*/ 5,  0.5,  0,  0.5,  0,  1,  0,  "", /**/ "",  "",  "",  "",  0,  0,  0,  0, /**/ 0,  0,  0,  0,  0,  0,  0,  0, /*d*/ 0,  0,  0.5,  0,  1,  0,  0,  0.5, /**/ -2.5,  4,  0.7,  0,  1,  0,  0,  0.5, /**/ -5,  1.5,  0.7,  0,  1,  0,  0,  0.5, /**/ -2.5,  -1,  0.5,  0,  1,  0,  2,  0.5, /**/ 0,  1.5,  0.5,  0,  1,  0,  1,  0.7 }
		"@R6" => { /*header*/ 0, 0.5, 0, 0.5, 0, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0.7, 0, 1, 0, 0, 0.7,  /**/ 2, 2.5, 0.7, 0, 1, 0, 0, 0.5,  /**/ 0, 5, 0.7, 0, 1, 0, 0, 0.5,  /**/ -2.5, 2, 0.5, 0, 1, 0, 2, 0.5,  /**/ 0, 0, 0.5, 0, 1, 0, 1, 0 }
		"S" => { /*header*/ 6.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 4, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 1, 5, 0.5, 2, 2, 0, 0, 0.5,  /**/ 3, 4.5, 0.5, 0, 3, 0, 0, 0,  /**/ 5, 3.5, 0.5, 0, 3, 0, 0, 0,  /**/ 8.75, 0, 0, 0, 1, 0, 1, 0 }
		"-S" => { /*saftervr*/ 6.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 1, 8.5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 5.5, 5, 0.5, 2, 2.5, 0, 0, 0,  /**/ 9, 0, 0, 0, 1, 0, 1, 0 }
		"=ES" => { /*header*/ 18.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 2, 5, 0.5, 1, 1.5, 0, 0, 0.5,  /**/ 6, 5.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 10, 5.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 12, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 14, 4, 0.5, 0, 3, 0, 0, 0,  /**/ 18.75, 0, 0, 0, 1, 0, 1, 0 }
		"S=" => { /*header*/ 9.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "LNA:LN", /*data*/ 0, 0, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1, 4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3, 5, 0.5, 0, 2, 0, 0, 0,  /**/ 5, 4, 0.5, 0, 3, 0, 0, 0,  /**/ 9.75, 0, 0, 0, 1, 0, 1, 0 }
		"SER" => { /*spanisch*/ 9.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, "LKB:LK", /*data*/ 0, 0, 0.5, 1, 1, 0, 0, 0.5,  /**/ 0.1, 2.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.25, 4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.75, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/  5, 5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 5.5, 5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 8, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 5.5, 0, 0.5, 0, 1, 0, 0, 0.5, /**/ 3, 2.5, 0.5, 0, 1, 0, 0, 0.5, /**/ 5.5, 5, 0.5, 0, 1, 0, 1, 0 }
		"T" => { /*header*/ 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RND", /*data*/ 0, 20, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0,  /**/ 0, 2.5, 0, 4, 1, 0, 0, 0 }
		"&T" => { /*header*/ 4, 0, 1.5, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 20, 0, 1, 1, 0, 0, 0,  /**/ 4, 20, 0, 0, 1, 0, 1, 0 }
		"&IT" => { /*spanisch*/ 4, 0, 1.5, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 17.8, 0.5, 1, 1, 0, 1, 0.5 }
		"&T-1" => { /*header*/ 4, 0, 1, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 20, 0, 1, 1, 0, 1, 0,  /**/ 4, 20, 0, 0, 1, 0, 1, 0 }
		"&T3/4" => { /*header*/ 4, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 15, 0, 1, 1, 0, 1, 0,  /**/ 4, 15, 0, 0, 1, 0, 1, 0,  /**/ 4, 15, 0, 4, 1, 0, 1, 0 }
		"&&T" => { /*header*/ 4, 0, 1.5, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 20, 0, 1, 1, 0, 1, 0,  /**/ 4, 20, 0, 0, 1, 0, 1, 0 }
		"&T34" => { /*header*/ 4, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 15, 0, 1, 1, 0, 1, 0,  /**/ 4, 15, 0, 0, 1, 0, 1, 0,  /**/ 4, 15, 0, 4, 1, 0, 1, 0 }
		"&TES" => { /*header*/ 23, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 5, 18, 0.5, 1, 1, 0, 0, 0.5,  /**/ 15, 20, 0.5, 0, 1, 0, 0, 0.5, /**/ 20, 17.8, 0.5, 0, 1, 0, 0, 0.5, /**/ 23, 15, 0.5, 0, 1, 0, 1, 0.5 }
		"ET" => { /*header*/ 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 25, 0, 1, 1, 0, 1, 0,  /**/ 4, 25, 0, 0, 1, 0, 1, 0 }
		"ET3/4" => { /*header*/ 4, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 20, 0, 1, 1, 0, 1, 0,  /**/ 4, 20, 0, 0, 1, 0, 1, 0 }
		"V" => { /*header*/ 7, 0.5, 0, 0.5, 1.5, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPD", /*data*/ 0.25, 16.75, 0.5, 1, 1, 0, 0, 0.5,  /**/ 2.25, 19.5, 0.6, 2, 1, 0, 0, 0,  /**/ 6, 20, 0, 98, 1, 0, 0, 0.5,  /**/ 2.25, 19.5, 0.6, 0, 1.5, 0, 0, 0.5,  /**/ 0.25, 16.75, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ -0.75, 14, 0.5, 0, 3, 0, 0, 0.5,  /**/ -1.5, 9.75, 0.5, 0, 3, 0, 0, 0.5,  /**/ -0.5, 4.5, 0.5, 0, 3, 0, 0, 0.5,  /**/ 1, 2, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3.5, 0.25, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 7, 0.5, 0.5, 0, 1, 0, 1, 0 }
		"W" => { /*header*/ 7, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPC:RP", /*data*/ 1.5, 8.5, 0.5, 1, 1, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 5, 10, 0.5, 98, 1.5, 0, 0, 0.5,  /**/ 2.25, 9.25, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 1.5, 8.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 0, 6, 0.5, 0, 3, 0, 0, 0.5,  /**/ 0.5, 2, 0.5, 0, 3, 0, 0, 0.5,  /**/ 4, 0, 0.5, 4, 1.5, 0, 0, 0.5,  /**/ 4.5, 0, 0.5, 0, 1.5, 0, 2, 0.5,  /**/ 7, 1.5, 0.5, 0, 1, 0, 1, 0 }
		"X" => { /*header*/ 7, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 1, 0, 0, 0.5,  /**/ 3, 7.5, 0.5, 2, 1.5, 0, 0, 0.5,  /**/ 3, 9.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1, 9.75, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ -0.5, 6, 0.5, 0, 2, 0, 0, 0.5,  /**/ 0, 5, 0.5, 0, 1.5, 0, 0, 0,  /**/ 7, 0, 0, 0, 1, 0, 1, 0 }
		"Y" => { /*header*/ 10, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 0, 10, 0, 1, 3, 0, 0, 0,  /**/ 10, 0, 0, 0, 1, 0, 1, 0 }
		"Z" => { /*header*/ 5, 1, -1, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNC:RN", /*data*/ 5, 10, 0, 1, 3, 0, 0, 0,  /**/ 5, -5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 4.25, -9, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 3, -10, 0.5, 0, 2, 0, 0, 0.5,  /**/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5,  /**/ 0, -7, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 2.5, 0.5, 4, 1, 0, 2, 0.5,  /**/ 5, 0, 0.5, 0, 1, 0, 1, 0 }
		"&E" => { /*header*/ 3, 0.5, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPB:RP", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 1.5, 0.5, 0, 2.5, 0, 0, 0.5,  /**/ 2, 0, 0.5, 2, 1.2, 0, 2, 0.5,  /**/ 3, 1, 0.5, 0, 1, 0, 1, 0 }
		"&A" => { /*header*/ 0, 0.5, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPB:RP", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"&U" => { /*header*/ 5, 0.5, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RPB:RP", /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 1, 0 }
		"&O" => { /*header*/ 6.75, 0.5, 0, 0.5, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LNA:LN:RNB:RN", /*data*/ 0, 5, 0, 1, 1.5, 0, 0, 0.5,  /**/ 0.75, 3, 0.5, 0, 3, 0, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6.75, 0, 0.5, 0, 1, 0, 1, 0 }
		"&I" => { /*header*/ 2, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0.5, 1, 0.5, 1, 2, 0, 0, 0.5,  /**/ 1, 0.5, 0.5, 0, 2, 0, 0, 0.5,  /**/ 0.5, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 0.5, 0.5, 0, 1, 0, 0, 0,  /**/ 0.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 1, 0, 1, 0 }
		"-E" => { /*header*/ 1.25, 0.5, 0, 0, 4, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 5, 0, 0, 3, 0, 1, 0 }
		"-A" => { /*header*/ 0, 0.5, 0, 0.5, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"-U" => { /*header*/ 5, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0, 1, 3, 0, 0, 0,  /**/ 5, 0, 0, 0, 1, 0, 1, 0 }
		"-O" => { /*header*/ 6.75, 0.5, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 5, 0, 1, 1.5, 0, 0, 0.5,  /**/ 0.75, 3, 0.5, 0, 3, 0, 0, 0.5,  /**/ 6, 2.5, 0.5, 0, 1.5, 0, 0, 0.5,  /**/ 6.75, 0, 0.5, 0, 1, 0, 1, 0 }
		"-I" => { /*header*/ 1.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 10, 0, 1, 3, 0, 0, 0,  /**/ 4, 10, 1, 0, 3, 0, 1, 0 }
		"-EI" => { /*header*/ 1.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 10, 0, 1, 3, 0, 0, 0,  /**/ 4, 10, 1, 0, 3, 0, 1, 0 }
		"-^EI" => { /*header*/ 1.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 4, 10, 0, 1, 3, 0, 0, 0,  /**/ 4, 10, 1, 0, 3, 0, 1, 0 }
		"/I" => { /*header*/ 1.25, 0.5, 0, 0.5, 1, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 10, 0, 1, 1, 0, 0, 0 }
		"0-" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"0N-" => { /*header*/ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LMA", /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"0D-" => { /*header*/ 3, 0, -0.5, 0, 0, 0, 1, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LMA", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"0U-" => { /*header*/ 5, 0, 0, 0, 0, 0, 1, 0, 0, 0, "", "", 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, "LMA", /*data*/ 0, 0, 0, 1, 1, 0, 0, 0,  /**/ 0, 0, 0, 0, 1, 0, 1, 0 }
		"PSPACE" => { /*header*/ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 2, 0, 0, 0, 1, 5, 2, 0 }
		"~~" => { /*header*/ 12.5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 10, 0, 1, 1, 5, 0, 0.5,  /**/ 2.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 5, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 7.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 10, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 12.5, 10, 0, 0, 1, 0, 1, 0 }
		"~" => { /*header*/ 12.5, 0, 0, 0.5, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 10, 0, 1, 1, 5, 0, 0.5,  /**/ 2.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 5, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 7.5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 10, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 12.5, 10, 0, 0, 1, 0, 1, 0 }
		"…" => { /*header*/ 9, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 1, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 0, 1, 0, 1, 0.5,  /**/ 4.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 5, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 4.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 4, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 4.5, 0, 0, 0, 1, 0, 1, 0.5,  /**/ 8.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 9, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 8.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 8, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 8.5, 0, 0, 0, 1, 0, 1, 0 }
		"." => { /*header*/ 2, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 1, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 0, 1, 0, 1, 0 }
		"," => { /*header*/ 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 2, -2, 0, 1, 1, 5, 0, 0,  /**/ 3, 1, 0, 0, 1, 0, 1, 0 }
		";" => { /*header*/ 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 2.5, 4.5, 0, 1, 1, 5, 0, 0,  /**/ 3, 5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 5.5, 0, 0, 1, 0, 1, 0.5,  /**/ 2, 5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 4.5, 0, 0, 1, 0, 1, 0.5,  /**/ 3, 1, 0, 1, 1, 5, 0, 0,  /**/ 2, -2, 0, 0, 1, 0, 1, 0 }
		":" => { /*header*/ 3, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0.5, 4.5, 0, 1, 1, 5, 0, 0,  /**/ 1, 5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 5.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 4.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 1, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 0, 1, 0, 1, 0 }
		"!" => { /*header*/ 2, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0.5, 20, 0, 1, 1, 5, 0, 0,  /**/ 0.5, 5, 0, 1, 1, 0, 0, 0,  /**/ 0.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 1, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 0, 0, 0, 1, 0, 1, 0 }
		"?" => { /*header*/ 5, 0, 0, 0, 4, 4, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0, 15, 0, 0, 1, 5, 0, 0.5,  /**/ 1.25, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 20, 0.5, 0, 1, 0, 0, 0.5,  /**/ 3.75, 19, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 15, 0.5, 0, 1, 0, 0, 0.5,  /**/ 5, 13, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 10, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0,  /**/ 2.5, 0, 0, 1, 1, 5, 0, 0,  /**/ 3, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 1, 0, 0, 1, 0, 1, 0.5,  /**/ 2, 0.5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 0, 0, 0, 1, 0, 1, 0 }
		"¿" => { /*header:spanish*/ 5, 0, 0, 0, 4, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 5, 0, 0, 0, 1, 5, 0, 0.5,  /**/ 3.75, -4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, -5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.25, -4, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 0, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0, 2, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 2.5, 10, 0.5, 0, 1, 0, 0, 0,  /**/ 2.5, 15, 0, 1, 1, 5, 0, 0,  /**/ 3, 14.5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 14, 0, 0, 1, 0, 1, 0.5,  /**/ 2, 14.5, 0, 0, 1, 0, 1, 0.5,  /**/ 2.5, 15, 0, 0, 1, 0, 1, 0 }
		"¡" => { /*header*/ 2, 0, 0, 0, 4, 1, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, /*data*/ 0.5, -5, 0, 1, 1, 5, 0, 0,  /**/ 0.5, 10, 0, 1, 1, 0, 0, 0,  /**/ 0.5, 14, 0, 1, 1, 5, 0, 0,  /**/ 1, 14.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 15, 0, 0, 1, 0, 1, 0.5,  /**/ 0, 14.5, 0, 0, 1, 0, 1, 0.5,  /**/ 0.5, 14, 0, 0, 1, 0, 1, 0 }
		"=" => { /*header*/ 5, 0, 0, 0, 3, 3, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 11, 0, 1, 1, 5, 0, 0.5,  /**/ 5, 11, 0, 0, 1, 0, 0, 0.5,  /**/ 0, 9, 0, 0, 1, 5, 0, 0.5,  /**/ 5, 9, 0, 0, 1, 0, 1, 0 }
		"'" => { /*header*/ 1, 0, 0, 0, 3, 3, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 1, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 1, 18, 0, 0, 1, 0, 0, 0 }
		""" => { /*header*/ 3, 0, 0, 0, 2, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 1, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 1, 18, 0, 0, 1, 0, 0, 0.5,  /**/ 2, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 3, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 3, 18, 0, 0, 1, 0, 0, 0 }
		"/" => { /*header*/ 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 1, 0, 1, 1, 5, 0, 0,  /**/ 6, 19, 0, 0, 1, 0, 1, 0 }
		"#Q#" => { /*header*/ 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 1, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 1, 18, 0, 0, 1, 0, 0, 0.5,  /**/ 2, 14, 0, 1, 1, 5, 0, 0.5,  /**/ 3, 15, 0, 0, 1, 0, 0, 0.5,  /**/ 3, 18, 0, 0, 1, 0, 0, 0 }
		"(" => { /*header*/ 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 4, 13, 0, 1, 1, 5, 0, 0,  /**/ 0, 13, 0, 0, 1, 0, 0, 0,  /**/ 0, 1, 0, 0, 1, 0, 0, 0,  /**/ 4, 1, 0, 0, 1, 0, 0, 0 }
		")" => { /*header*/ 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 13, 0, 1, 1, 5, 0, 0,  /**/ 4, 13, 0, 0, 1, 0, 0, 0,  /**/ 4, 1, 0, 0, 1, 0, 0, 0,  /**/ 0, 1, 0, 0, 1, 0, 0, 0 }
		"A" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#0S" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", 0, "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#N" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#W" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#NS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#NDS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WDS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WD" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WU" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#WUS" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"E" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"I" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"O" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "narrow", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"U" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"Ä" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "no", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"Ö" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"Ü" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "down", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"EU" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "wide", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"AU" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "narrow", "yes", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"EI" => { /*header*/ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", 2, 0, 0, 0, 0, 0, 0, "up", "wide", "no", 0, 0, /*data*/ 0, 0, 0, 0, 1, 0, 0, 0 }
		"#A+" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 0, 0, 0, 1, 1, 5, 0, 0,  /**/ 3.5, 19, 0, 0, 1, 0, 0, 0,  /**/ 7, 0, 0, 0, 1, 0, 0, 0,  /**/ 1.75, 9.5, 0, 0, 1, 5, 0, 0,  /**/ 5.25, 9.5, 0, 0, 1, 0, 1, 0 }
		"#A-" => { /*header*/ 7, 0, 0, 0, 4, 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, /*data*/ 5.25, 9, 0, 1, 1, 5, 0, 0.5,  /**/ 4.5, 9.5, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 3.75, 0.5, 0, 1, 0, 0, 0.5,  /**/ 0.5, 1, 0.5, 0, 1, 0, 0, 0.5,  /**/ 1.5, 0, 0.5, 0, 1, 0, 0, 0,  /**/ 5.25, 9, 0, 0, 1, 0, 0, 0.5,  /**/ 5.25, 1, 0.5, 0, 1, 0, 0, 0,  /**/ 6, 0, 0, 0, 1, 0, 1, 0 }
	#EndSubSection(base)
	#BeginSubSection(combiner)
		"D" => { "@R", 0, 0 }
		"C" => { "@R", 0, 0 }
		"ND" => { "@R", 0, 0 }
		"T" => { "@R", 0, 0 }
		"G" => { "@R", 0, 0 }
		"K" => { "@R", 0, 0 }
		"CH" => { "@R", 0, 0 }
		"NK" => { "@R", 0, 0 }
		"NG" => { "@R", 0, 0 }
		"NS" => { "@R", 0, 0 }
		"H" => { "@R", 0, 0 }
		"SCH" => { "@R", 0, 0 }
		"ST" => { "@R", 0, 0 }
		"L" => { "@L", 0, 0 }
		"B" => { "@L", 0, 0 }
		"G" => { "@L3", 0, 0 }
		"M" => { "@L", 0, 0 }
		"MM" => { "@L", 0, 0 }
		"F" => { "@L", 0, 0 }
		"P" => { "@L", 0, 0 }
		"PF" => { "@L", 0, 0 }
		"V" => { "@L", 0, 0 }
		"SP" => { "@L", 0, 0 }
		"W" => { "@L", 0, 0 }
		"T" => { "@L3", 0, 0 }
		"TT" => { "@L3", 0, 0 }
		"PP" => { "@L", 0, 0 }
		"CK" => { "@L3", 0, 0 }
		"FF" => { "@L", 0, 0 }
		"NG" => { "@L3", 0, 0 }
		"NS" => { "@L3", 0, 0 }
		"NK" => { "@L3", 0, 0 }
		"D" => { "@L3", 0, 0 }
		"C" => { "@L3", 0, 0 }
		"ND" => { "@L3", 0, 0 }
		"ST" => { "@L3", 0, 0 }
		"NK" => { "@L3", 0, 0 }
		"K" => { "@L3", 0, 0 }
		"Z" => { "@L3", 0, 0 }
		"SCH" => { "@L3", 0, 0 }
		"CH" => { "@L3", 0, 0 }
		"B" => { "@R6", 0, 0 }
		"SP" => { "@R6", 0, 0 }
		"F" => { "@R6", 0, 0 }
		"M" => { "@R6", 0, 0 }
		"P" => { "@R6", 0, 0 }
		"PF" => { "@R6", 0, 0 }
		"V" => { "@R6", 0, 0 }
		"W" => { "@R6", 0, 0 }
		"Z" => { "@R", 0, 0 }
		"Z" => { "@L3", 0, 0 }
		"DA" => { "@R", 0, 0 }
		"N" => { "@R6", 0, 0 }
		"N=" => { "@R6", 0, 0 }
		"N" => { "@L", 0, 0 }
		"NN" => { "@L", 0, 0 }
		"NN" => { "@R6", 0, 0 }
		"VR" => { "@L", 0, 0.5 }
		"RR" => { "@L", 0, 1 }
		"CK" => { "@L", 0, 0 }
		"L" => { "@R6", 0, 0 }
		"TT" => { "@R", 0, 0 }
		"PP" => { "@R6", 0, 0 }
		"CK" => { "@R", 0, 0 }
		"FF" => { "@R6", 0, 0 }
		"LT" => { "@R6", 0, 0 }
		"N=" => { "@R6", 0, 0 }
		"VR" => { "@#/.", "", "" }
	#EndSubSection(combiner)
	#BeginSubSection(shifter)
		"DEM" => { "^DEM", 0, 5, 0, 0 }
		"DEN" => { "^DEN", 0, 5, 0, 0 }
		"DEM" => { "^^DEM", 0, 10, 0, 0 }
		"DEN" => { "^^DEN", 0, 10, 0, 0 }
		"=ES" => { "&EITES", 10, 14.5, 0, 1 }
		"B" => { "&TB", 4, 10, 0, 1 }
		"NG" => { "&TNG", 4, 10, 0, 1 }
		"NS" => { "&TNS", 4, 10, 0, 1 }
		"C" => { "&TC", 4, 10, 0, 1 }
		"D" => { "&TD", 4, 10, 0, 1 }
		"G" => { "&TG", 4, 10, 0, 1 }
		"H" => { "&TH", 4, 10, 0, 1 }
		"J" => { "&TJ", 4, 10, 0, 1 }
		"L" => { "&T#L", 4, 10, 0, 1 }
		"@L3" => { "&T@L3", 4, 16.5, 0, 1.5 }
		"ALL" => { "&TALL", 4, 10, 0, 1 }
		"M" => { "&TM", 4, 10, 0, 1 }
		"W" => { "&TW", 4, 10, 0, 1 }
		"X" => { "&TX", 4, 10, 0, 1 }
		"Y" => { "&TY", 4, 10, 0, 1 }
		"&E" => { "&T&E", 4, 15, 0, 1.5 }
		"SCHAFT" => { "&TSCHAFT", 4, 15, 0, 1.5 }
		"ION" => { "&TION", 4, 10, 0, 1 }
		"N" => { "&TN", 4, 15, 0, 1.5 }
		"VR" => { "&TVR", 4, 15, 0, 1.5 }
		"AR5" => { "&TAR5", 4, 15, 0, 1.5 }
		"S" => { "&TS", 4, 15, 0, 1.5 }
		"&U" => { "&T&U", 4, 15, 0, 1.5 }
		"&O" => { "&T&O", 4, 15, 0, 1.5 }
		"&I" => { "&T&I", 4, 15, 0, 1.5 }
		"CH" => { "&TCH", 4, 20, 0, 1 }
		"SCH" => { "&T^SCH", 4, 20, 0, 1 }
		"^Z" => { "&T^Z", 4, 20, 0, 1 }
		"^CH" => { "&T^CH", 4, 20, 0, 1 }
		"^SCH" => { "&T^SCH", 4, 20, 0, 1 }
		"Z" => { "&TZ", 4, 20, 0, 1 }
		"F@L" => { "&TF@L", 4, 10, 0, 1 }
		"F" => { "&TF", 4, 10, 0, 1 }
		"HAFT" => { "&THAFT", 4, 10, 0, 1 }
		"K" => { "&TK", 4, 20, 0, 1 }
		"P" => { "&TP", 4, 20, 0, 1 }
		"Q" => { "&TQ", 4, 20, 0, 1 }
		"V" => { "&TV", 4, 20, 0, 1 }
		"NK" => { "&TK", 4, 20, 0, 1 }
		"PF" => { "&TPF", 4, 20, 0, 1 }
		"SP" => { "&TSP", 4, 20, 0, 1 }
		"ST" => { "&TST", 4, 10, 0, 1 }
		"SCHW" => { "&TSCHW", 4, 30, 0, 1 }
		"ZW" => { "&TZW", 4, 30, 0, 1 }
		"B" => { "&EITB", 18, 10, 0, 1 }
		"NG" => { "&EITNG", 18, 10, 0, 1 }
		"NS" => { "&EITNS", 18, 10, 0, 1 }
		"C" => { "&EITC", 18, 10, 0, 1 }
		"D" => { "&EITD", 18, 10, 0, 1 }
		"G" => { "&EITG", 18, 10, 0, 1 }
		"H" => { "&EITH", 18, 10, 0, 1 }
		"J" => { "&EITJ", 18, 10, 0, 1 }
		"L" => { "&EITL", 18, 10, 0, 1 }
		"@L3" => { "&EIT@L3", 18, 10, 0, 1 }
		"ALL" => { "&EITALL", 18, 10, 0, 1 }
		"M" => { "&EITM", 18, 10, 0, 1 }
		"W" => { "&EITW", 18, 10, 0, 1 }
		"X" => { "&EITX", 18, 10, 0, 1 }
		"Y" => { "&EITY", 18, 10, 0, 1 }
		"&E" => { "&EIT&E", 18, 15, 0, 1.5 }
		"SCHAFT" => { "&EITSCHAFT", 18, 15, 0, 1.5 }
		"N" => { "&EITN", 18, 15, 0, 1.5 }
		"VR" => { "&EITVR", 18, 15, 0, 1.5 }
		"S" => { "&EITS", 18, 15, 0, 1.5 }
		"U" => { "&EITU", 18, 15, 0, 1.5 }
		"&O" => { "&EIT&O", 18, 15, 0, 1.5 }
		"CH" => { "&EITCH", 18, 20, 0, 1 }
		"SCH" => { "&EITSCH", 18, 20, 0, 2 }
		"Z" => { "&EITZ", 18, 20, 0, 1 }
		"^Z" => { "&EIT^Z", 4, 20, 0, 1 }
		"^CH" => { "&EIT^CH", 4, 20, 0, 1 }
		"^SCH" => { "&EIT^SCH", 4, 20, 0, 1 }
		"F" => { "&EITF", 18, 10, 0, 1 }
		"K" => { "&EITK", 18, 20, 0, 1 }
		"P" => { "&EITP", 18, 20, 0, 1 }
		"Q" => { "&EITQ", 18, 20, 0, 1 }
		"V" => { "&EITV", 18, 20, 0, 1 }
		"NK" => { "&EITK", 18, 20, 0, 1 }
		"PF" => { "&EITPF", 18, 20, 0, 1 }
		"SP" => { "&EITSP", 18, 20, 0, 1 }
		"ST" => { "&EITST", 18, 10, 0, 1 }
		"SCHW" => { "&EITSCHW", 18, 30, 0, 1 }
		"ZW" => { "&EITZW", 18, 30, 0, 1 }
		"@L3" => { "&T@L3", 4, 15, 0, 1.5 }
		"@R" => { "&T@R", 4, 15, 0, 1.5 }
		"@L3" => { "&EIT@L3", 18, 15, 0, 1.5 }
		"@R" => { "&EIT@R", 18, 15, 0, 1.5 }
		"M" => { "ISIM", 4, 10, 0, 1 }
	#EndSubSection(shifter)
#EndSection(font)

#BeginSection(rules)
	#BeginSubSection(global,#>stage0)
		// global replacements in the whole text spanisch
		// there's currently a bug with the spanish model: 
		// tokens are connected to punctuations characters 
		// ok, found the "bug": offset 22 in header of token definition has been deleted (set to 0) by
		// last export with VPAINT (which seems to be completely broken at this point - it now even deletes
		// more data than before ...). Anyway, solution as always: do everything by hand in the ascii-editor.
		// It's tedious, but it works (old technology is rock solid!)
		"[VUvu]d?\." => "usted";
		"[VUvu]d?s\." => "ustedes";
		"Sres" => "Señores";
		"el son" => "el %son%"; // mark words that have to be written literally with % (el son vs ellos son)
		// transcribe spanish question mark / exclamation mark
		"\?([a-zA-Z])" => "¿$1";
		"\!([a-zA-Z])" => "¡$1";
		// replace strange characters so that they can be handled correctly
		"^—(?=[a-zA-Z¿¡])" => " [~~] ";
		// copied from DESSBAS
		"&ndash;" => "-"; // blocks calculation in layouted mode
		"-$" => " - "; // end of text
		"^-" => " - "; // beginning of text
		" - " => " [~~] ";
		" -([.,;:!?])" => " [~~]$1";
		"&hellip;" => "…"; // ellipsis (try to use one character defined as global variable punctuation in php)
		"\.\.\." => "…";
		//"…" => "…";
		"–" => "&ndash;"; // blocks calculation in layouted mode
 		"—" => " [~~] ";
		" &ndash; " => " [~~] "; // Gedankenstrich
		"&ndash;" => "="; // blocks calculation in layouted mode // probably obsolete?!
		"&rs?aquo;" => "«"; 
		"&ls?aquo;" => "»";
		"›" => "»";
		"‹" => "«";
		"ß" => "ss";
		"&szlig;" => "ss";
		"«" => """; //"|[#Q#][#5]]\\|"; // originally in filter but can't be done in stage3!
		"»" => """; //"|[#5][#Q#]|"; 
	#EndSubSection(global,#>stage1)
	#BeginSubSection(dasher,#>stage2)
		"(\+|#|\|)" => "-"; // ignore linguistical analysis (if not already disabled in header)
		"([Rr]adio)(emisi(?:ó|o)n)" => "$1|$2"; // separate word
	#EndSubSection(dasher,#>stage3)
	#BeginSubSection(splitter1,#>stage3)
		// splitter and acronymator copied from dessbass
		// check if word contains more then 1 upper case
		// mark it with #£# to have a branch condition
		"(?<!#acronym#)([A-Z]|Ä|Ö|Ü)([A-Z]|Ä|Ö|Ü)" => "#acronym#$1$2";
	#EndSubSection(splitter1,!>acronymator,=>packer)
	#BeginSubSection(acronymator)
		// filter marker #acronym# out again
		"#acronym#" => "";
		//"([A-Z]|Ä|Ö|Ü)" => "strtolower()";
		// only transform upper case of potential 2nd word (suppose acronym is 1st word ...)
		"(=(?:[A-Z]|Ä|Ö|Ü))" => "strtolower()";
		"(?<!\|)=" => "|=\\"; // mark word as 2 words
		"(?<!\[)=" => "[=]";	// necessary because of packer
		// now only transform upper case words (from acronym)
		"(?<!\[)([A-Z]|Ä|Ö|Ü)" => "[$1]";
		"\[A\](?!\[&A\])" => "[#NS][&A]";
		"\[E\](?!\[&E\])" => "[E][&E]";
		"\[I\](?!\[&I\])" => "[#N][&I]";
		"\[O\](?!\[&O\])" => "[#N][&O]";
		"\[U\](?!\[&U\])" => "[#NS][&U]";
		"\[Ä\]" => "[#WS][&A]";
		"\[Ö\]" => "[E][&O]";
		"\[Ü\]" => "[#WS][&U]";
		//"^\[E\]" => "[0N-][E]";  // not sure if that should be done here
		"^(\[[ns]\])" => "[0N-]$1"; // idem
		//"([a-z])" => "strtoupper()";  // leave other tokens as untreated (will be processed normally)
	#EndSubSection(acronymater)
	#BeginSubSection(packer)
		// filter out all markes from acronymator
		// some shorthand tokens use special chars (like -#+=/ etc.) in their definition
		// this can lead to confusions in the transcriptor: e.g. - might be the character - 
		// (which has to be drawn as such) or a part of a token definition (like [0N-]
		// in order to avoid that, "packer" bundles those characters adding brackets []
		// later the transcriptor converts them back into normal characters
		//"(?<!\[)=" => "[=]\";
	#EndSubSection(packer)
	#BeginSubSection(decapitalizer)
		// empty
		"([A-Z])" => "strtolower()";
	#EndSubSection(decapitalizer)
	#BeginSubSection(accentizer)
		//empty
	#EndSubSection(accentizer)
	#BeginSubSection(earlyshortener)
		"^[Ee]star(é|á[ns]?|emos|éis)" => "{ESTAR}$1";
		"^[Ee]star(ía[ns]?|ía(?:mos|is))" => "{ESTAR}$1";
	#EndSubSection(earlyshortener)
	#BeginSubSection(normalizer)
		"é(?!$)" => "e";
		"á(?!$)" => "a";
		"ahí" => "aí";
		"í" => "i";
		"ó(?!$)" => "o";
		"ú" => "u";
		"Ẽ" => "e";
		"Á" => "a";
		"Í" => "i";
		"Ó" => "o";
		"Ú" => "u";
		//"r-?r" => "r";
	#EndSubSection(normalizer)
	#BeginSubSection(shortener)
		"^extract" => "estract";
		"^extrae" => "estrae";
		"^extrai" => "estrai";
		"^extra(?!ñ|nj)" => "{EXTRA}";
		"^coin" => "{CON}{IN}";
		"^la$" => "{LA}";
		"^da$" => "{DA}";
		"^le$" => "{LE}";
		"^d(e|é)$" => "{DE}";
		"^qu(e|é)$" => "{QUE}";
		"^t(e|é)$" => "{TE}";
		"^s(e|é)$" => "{SE}"; // sé y se
		"^mi$" => "{MI}";
		"^ni$" => "{NI}";
		"^si$" => "{SI}";
		"^h?a$" => "{HA}";
		"^el$" => "{EL}";
		"^en$" => "{EN}";
		"^he$" => "{HE}";
		"^es$" => "{ES}";
		"^(y|e)$" => "{Y/E}";
		"^las$" => "{LAS}";
		"^les$" => "{LES}";
		"^los$" => "{LOS}";
		"^lo$" => "{LO}";
		"^des-?de$" => "{DESDE}";
		"^ya$" => "{YA}";
		//"^bu-?e-?n([oa]s?)$" => "{BUEN}$1";
		"^bu-?e-?n" => "{BUEN}"; // buenaventura
		"^ca-?da$" => "{CADA}";
		"^c(o|ó)-?mo$" => "{COMO}";
		"^cu-?y([oa]s?)$" => "{CUY}$1";
		"^cu(a|á)n-?do$" => "{CUANDO}";
		"^m(á|a)s$" => "{MAS}";
		"^mu-?c-?h([oa]s?)$" => "{MUCH}$1";
		"^mu-?c-?he" => "{MUCH}e";  // muchedumbre
		"^much(í|i)sim" => "{MUCH}{ISIM}"; // muchísima(mente)
		"^muy$" => "{MUY}";
		"^po-?c([oa]s?)$" => "{POC}$1";
		"poqu(í|i)sim" => "{POC}{ISIM}";
		"^so$" => "{SO}";
		"^su$" => "{SU}";
		"^sus$" => "{SUS}";  
		"^tan-?t?([oa]s?)?$" => "{TANT}$1";
		"^to-?d([oa]s?)" => "{TOD}$1"; // todavía
		"^t(u|ú)(s)?$" => "{TU}$2";
		"^tam-?bi-?(é|e)n$" => "{TAMBIEN}"; // é already reduced at this point
		"^tam-?po-?co$" => "{TAMPOCO}";
		"ti-?em-?p" => "{TIEMPO}";
		"^yo$" => "{YO}";
		"^cual$" => "{CUAL}";
		"^cuant?" => "{CUANT}";
		"^del$" => "{DEL}";
		"^gran$" => "{GRAN}";
		"^grand(es?)" => "{GRAND}$1";
		"^mediante$" => "{MEDIANTE}";
		"^mism([oa]s?)" => "{MISM}$1";
		"^no$" => "{NO}";
		"^nosotr([oa]s)$" => "{NOS1}{OTR}$1"; // nos1 = on baseline
		"^vosotr([oa]s)$" => "{VOS}{OTR}$1"; // vos only here!
		"^nos$" => "{NOS}";
		"^para$" => "{PARA}";
		"^particul(ar)?" => "{PARTICUL}$1";
		"^pero$" => "{PERO}";
		"^primer([oa]s?)?$" => "{PRIMER}$1";
		"^seg(ú|u)n$" => "{SEGUN}";
		"^siempre" => "{SIEMPRE}";
		"^usted$" => "{USTED}";
		"^ustedes$" => "{USTEDES}";
		"^nuestr([oa]s?)$" => "{NUESTR}$1";
		"^vuestr([oa]s?)$" => "{VUESTR}$1";
		"(?<!c)[cs](ion)" => "{SION}";
		"(cc|x)(ion)" => "k{SION}";
		"(?<!^)mi?ent" => "{MENT}";
		"^(re)?ex(ped)" => "$1{EX}ped";	// (re)expedición
		"^ex(quisit)" => "es$1";	// exquisito
		"^(in|co)?ex(?!(?:c[rluao]|[pt]))" => "$1{EX}$2";
		"^(in)?sub" => { "$1{SUB}", "[Ss](ú|u)bit", "[Ss]ubi", "^[Ss]ub(?:o|e[ns]?|ís|a[sn]?|amos|áis)$" };
		"^(im)?per" => { "$1{PER}", "perd(?!u)", "pérd", "[Pp]er(u|ú)", "^[Pp]ere[sz]?$", "^[Pp]eras?$", "[Pp]erl", "[Pp]eriodista", "[Pp]erit", "[Pp]erro", "[Pp]ericia", "[Pp]er(?:i|í)(?:o|ó)d", "[Pp]erilla" }; // not perder and all its forms
		"^(in)?tran?s" => { "$1{TRAS}", "[Tt]rastos?$", "[Tt]raser" };
		"^(des)?inte?r" => { "$1{INTER}", "[Ii]ntermin", "[Ii]ntrad" }; // not: interminable, intraducible
		"^(bien)?estar$" => "$1{ESTAR}";
		"^bi-?en" => "{BIEN}";
		"^estuv" => "{ESTUV}";
		"^est(?!r)" => { "{EST}", "[Ee]stac", "[Ee]sti", "[Ee]sten", "[Ee]st(?:é|e)r", "[Ee]stanc", "[Ee]stud", "[Ee]stant", "[Ee]stad[íi]", "[Ee]stab" }; // does not apply to estación, estirar etc.
		"^ser(é|á[ns]?|emos|éis|ía(?:[sn]|amos|ais)?)?$" => "{SER}$1";
		"^son$" => "{SON}";
		"^unos" => "{UNO}os"; // not clear: unos (as "unas" also): no indication in Meier!
		"^uno?$" => "{UNO}";
		"^una(s?)$" => "{UNA}$1";
		"^ant[ei]" => { "{ANTE}", "[Aa]ntena", "[Aa]nt(?:í|i)[gqc]", "[Aa]ntera" };
		"^circun?" => "{CIRCUN}";
		"^aco[mn]" => { "{ACOM}", "acompas" }; // not applied to acompasado
		"^(en)?contr" => "$1{CONTR}";
		"^(de|p?re|in)?co[mn]?" => { "$1{CON}", "[Cc]omer(?!c)", "[Cc]ometa", "[Cc]olor", "[Cc]olega", "[Cc]osa", "[Cc]opia", "[Cc]oriza", "[Cc]orr", "[Cc]orr(?:i|í)", "[Cc]obr", "[Cc]olecc", "[Cc]og[eií](?!sti)", "[Cc]ostumbre", "^[Cc]onos?$", "^[Cc]ola", "^[Cc]oraz", "[Cc]och[eai]", "[Cc]oj[oóae]", "[Cc]ocin", "[Cc]olga", "[Cc]olilla", "[Cc]ord", "[Cc]opas?", "[Cc]odazo", "[Cc][oó]m[ií]", "[Cc]orp", "[Cc]ort" }; // well, always the same ... how do we detect all forms of comer (considering, in addition, that cómo, como y como are three forms ... rather that becoming a linguist become a mathematician: it's a way more precise business ...
		"^sobrent" => "{SOBRE}ent"; // sobrentender (sobreentender)
		"^sobre?|sor" => { "{SOBRE}", "[Ss]obri", "[Ss][oó]rd" }; // sobrio/as, sordo, sórdido (accent necessary since pattern is compared to original word => is this a good idea?!?)
		"^gener" => "{GENER}";
		"^([Ii]n)?[Nn]ecesar" => "$1{NECESAR}";
		"^porque$" => "{PORQUE}";
		"^por(?!t)" => "{POR}"; // not applied in portador, portal etc.
		"^sin$" => "{SIN}";
		"^se(ñ|n)or" => "{SENOR}";
		"^se(ñ|n)ora$" => "{SENORA}";
		"^suiz" => "{SUIZ}";
		"^(des)?in" => { "$1{IN}", "[Ii]ndi[oa]" };
		"qu" => "k"; // transferred from bundler: must be placed befor {TAD} (otherwhise equidad gets reduced to eq{TAD})
		"^edad(es)?$" => "e{TAD}$1";
		"^ciudad(es)?$" => "s{TAD}$1"; // claro ... eso se llama: mutilar una palabra ...
		"rt(?!(?:ud|ad)(?:es)?)" => "[RT]"; // early bundler: avoid following rule in apartado, portador etc.
		"c[ei](?:t[au]|da)d(?![oa]s?)" => "s{TAD}"; // 1st vowel falls out
		"(?:ui|[ei])?(?:t[au]|da)d(es)?$" => "{TAD}$1"; // 1st vowel falls out
		"ntud(es)?$" => "n{TAD}$1"; // juventud
		"c(?:í|i)sim([oa]s?)$" => "s{ISIM}$1";
		"(?:í|i)sim([oa]s?)$" => "{ISIM}$1";
		"ito$" => "{ITO}";
		"ita$" => "{ITA}";
		"itos$" => "{ITOS}";
		"itas$" => "{ITAS}";
		"ete$" => "{ETE}";
		"etes$" => "{ETES}";
		"otr([oa])(s?)$" => "{OTR}$1$2";
		"^me$" => "{ME}";
		//"^$" => "{}";
		//"^$" => "{}";
		//"^$" => "{}";
		//"^$" => "{}";
		//"^$" => "{}";
		
		// rewrite words that have to been written literally (no abreviations)
		"%(.*?)%" => "$1";
  
  		//"^$" => "{}";
		// 
  
	#EndSubSection(shortener,#>stage4)
	#BeginSubSection(phonetizer,#>stage4)
		// empty
		"v" => "b";
		"sc([ei])" => "s$1";  // scientífico, escena
		"cc([ei])" => "x$1";
		"c([ei]|{IT)" => "s$1";
		"c([aouáóú])" => "k$1";
		"{EX}s" => "{EX}"; // simplificación
		"z" => "s";
		"([aeiou])h([aeiou])" => "$1[H']$2"; // preserve h 
		"(?<!c)h" => { "", "[Hh]arry", "[Hh]ol[ey]", "[Ss]how" }; // yes, trying to read some Nesboe ...
		"ñ" => "n";
		"g([ei])" => "h$1";
		"j" => "h";
		"y([aeiou])" => "j$1";
		"([aeiou])y$" => "$1j";
		"{IN}n" => "{IN}";
		"{INTER}r" => "{INTER}";
	#EndSubSection(phonetizer)
	#BeginSubSection(bundler)
		
		// 3 consonants
		"ctr" => "[CTR]";
		"ntr" => "[NTR]";
		"ltr" => "[LTR]";
		"[sx]cl" => "[SCL]";
		"[sx]cr" => "[SCR]";
		"[sx]tr" => "[STR]";
		"[sx]pl" => "[SPL]";
		"[sx]pr" => "[SPR]";
		"ndr" => "[NDR]";
		"ngr" => "[NGR]";
		
		// 2 consonants
		//"rr" => "[VR@#/.]"; // diacritics
		"rr" => "r";
		"[sx][ck]" => "[SC]";
		"[sx]p" => "[SP]";
		"[sx]t" => "[ST]";
		//"qu" => "k";
		"gu([ei])" => "g$1"; // regular vs Miguel vs agua
		"n-?d" => "[ND]";
		"s-?t" => "[ST]";
		"s-?p" => "[SP]";
		"s-?k" => "[SC]";
		"l-?l" => "[LL]";
		"n-?k" => "[NK]";
		"n-?g" => "[NG]";
		"n-?s" => "[NS]";
		"m-?p" => "[MP]"; // spanish
		"c-?h" => "[CH]";
		"[ck]-?t" => "[CT]"; // transcribe later to ck, ff, pt etc.
		"f-?t" => "[FT]";
		"p-?t" => "[PT]";
		"l-?t" => "[LT]"; // new token in spanish
		"n-?t" => "[NT]";
		"r-?t" => "[RT]";

		// combinations consonant + r/l (copied over from DESSBAS)
		// l
		"b-?l" => "[BL]";
		"c-?l" => "[CL]";
		"d-?l" => "[DL]";
		"f-?l" => "[FL]";
		"g-?l" => "[GL]";
		"k-?l" => "[KL]";
		"l-?l" => "[LL]";
		"m-?l" => "[ML]";
		"n-?l" => "[NL]";
		"p-?l" => "[PL]";
		"r-?l" => "[RL]";
		"s-?l" => "[SL]";
		"t-?l" => "[TL]";
		"v-?l" => "[VL]";
		"w-?l" => "[WL]";
		"x-?l" => "[XL]";
		"y-?l" => "[YL]";
		"z-?l" => "[ZL]";
		// r
		// 3 chars
		"n-?d-?r" => "[NDR]";
		// 2 chars
		"b-?r" => "[BR]";
		"c-?r" => "[CR]";
		"d-?r" => "[DR]";
		"f-?r" => "[FR]";
		"g-?r" => "[GR]";
		"k-?r" => "[KR]";
		"l-?r" => "[LR]";
		"m-?r" => "[MR]";
		"n-?r" => "[NR]"; 
		"p-?r" => "[PR]";
		"r-?r" => "[RR]";
		"s-?r" => "[SR]";
		"t-?r" => "[TR]";

		
		// diptongs
		"(?<!g)u-?(e|é)" => "[UE]"; // pagué
		"i-?(o|ó)" => "[IO]";
		"u-?a(?!i)" => "[UA]"; // evacuáis: &u + ais
		"i-?(e|é)" => "[IE]"; // no difference if accentuated or not
		"i-?ais" => "I[LES][AI]s";
		"i-?a" => "[IA]";
		"a-?i" => "[AI]";
	#EndSubSection(bundler,=:std)
	#BeginSubSection(relancer1)	
		// empty
	#EndSubSection(relancer1)
	#BeginSubSection(transcriptor)
		// double vowels
		"(?<!^)a([aeou])" => "A[&A]$1";
		"^a([aeou])" => "[0N-]A[&A]$1";
		"e([aeiouAEIOU]|\[IA\])" => "E[&E]$1";
		"o([aeéiu]|\[IA\])" => "[&O]$1";
		"u([io]|\[IA\])" => "A[&U]$1";
		"iu" => "i[LES]u"; // viudo
		"u\[AI\]" => "A[&U][AI]"; // evacuáis
		"i{ISIM}" => "[I][&E]{ISIM}";
		"u({IT)" => "A[&U]$1";
		"e({IT)" => "E[&E]$1";
		// other sounds
		"^({SUB})?r" => "$1[AR]"; // initial r (Anlaut-r)
		"\[(RT|MP)\]r" => "[$1][AR]";
		
		"({ANTE})r" => "$1[AR]";

		"r" => "[VR]";	// vocalic r
		// remap spanish bundled consonant combinations to german system
		"\[CT\]" => "[CK]";
		"\[FT\]" => "[FF]"; 
		"\[PT\]" => "[PP]";
		//"\[LT\]" => "[LT]"; // new token
		"\[NT\]" => "[NN]";
		"\[RT\]" => "[RR]";
		//"\[\]" => "[]";
		//"\[\]" => "[]";
 
	#EndSubSection(transcriptor)
	#BeginSubSection(separator)
		//"{CONTR}A" => "{CONTR}\A";
		"{CONTR}[Aa]([aeiouAEIOU])" => { "{CONTR}A[&A]$1", "^{CONTR}[Aa]$" }; // problem is more complex, solve it like that for now
		//"({BIEN})({ESTAR})" => "$1[LES]$2";
		"\|" => "\\"; // radioemisión
	#EndSubSection(separator)
	#BeginSubSection(completor)
		// vowels at beginning of word
		"(^|\\)e" => "$1[0N-]e";
		"^ae" => "[0N-]A[&A]e";
		"^a" => "[0N-]a";
		"^i" => "[0D-]i";
		"^o$" => "[0N-][&O]";
		"^o" => "[0N-]o";
		"^u" => "[0N-]u";
		"^\[&O\]" => "[0N-][&O]";
		"^\[(AI)\]$" => "[0N-][$1]";  // ahí: no lowering! (where's the logic anyway ...)
		"^\[(AI|IE)\]" => "[0D-][$1]";

		// vowels after prefix
		"({(?:PER|BIEN)})([aeiouAEIOU])" => "$1[LES]$2";

		// n, s at beginning of word
		"^s" => "[S=]";
		"^n" => "[N=]";

		// diptongs at end of the word
		"\[IA\]$" => "I[LES]";
		"\[IO\]($|\\)" => "[#W][-EI]$1";
		"\[UA\]$" => "[#WS][&U]";
		"\[UE\]$" => "[#WS][&A]"; // not clear whether this should be shadowed?! (probably yes)
		"\[AI\]$" => "[AI][LES]";
		
		
		// vowels at end of the words
		"^fe$" => "f"; // according to p. 20
		"e$" => "[-E]";
		"\[RL\]a$" => "[RL]O[EN]"; // keep token names as in original (mother) system
		"^ba$" => "AB"; // like "da" (probably for all words with one syllable?!)
		"a$" => "[EN]"; // keep token names as in original (mother) system
		//"^({EST})o$" => "$1[EM]"; // keep -o because otherwhise it would be too similar to "el" ?! => no: example "esto viene de perlas" cap. 5d (Meier) p. 11/12
		"[Dd]id[gh]e\[VR\]idoo" => "didherido";
		"(?<!\[(?:&E|&U)\])o$" => { "", "pa-?ro", "(?<!.)paso", "^[Oo]slo$", "[Dd]idgerido" }; // not sure if -o stays after &e in any case? (ex: momentáneo) // esto: not sure, just interpreting because it would be too similar to "el" ?!
		"o$" => "[EM]";
		"i$" => "[-I]";
		"u$" => "A[&U]";
		"é$" => "E[&E]";	// la madre que lo parió ... 
		"(?<!i)ó$" => "[&O]";	// idem
		"á$" => "A[&A]";	// holy cow ... they're serious about that one ... ;-)

		"u\[&O\]$" => "A[&U][&O]";
		"\[IE\]$" => "[IE][LES]";
		
		
	#EndSubSection(completor)
	#BeginSubSection(rewriter)
		"r" => "[VR]";
		"\[SC\]" => "C";	
		"\[LL\]" => "[L@L]";
		"\[MP\]l" => "[MP][@L]";


		// rewrite diptongs
		"^\[UE\]" => "[0N-][Ä]";	// keep german vowel system
		"\[UE\]" => "[Ä]";	// keep german vowel system
		"\[IO\]" => "[Ö]";
		"\[UA\]" => "[Ü]";
		"\[IE\]" => "[EI]";
		"\[IA\]" => "[AU]";
		"\[AI\]" => "[EU]";

		// rewrite s after vr + o/u (to make it look better)
		"(\[VR\])([Oo]|[Uu])[Ss]" => "$1$2[-S]";

		// combinations consonant + r/l (copied over from DESSBAS)
		"\[NGR\]" => "[NG@R]";
		"\[SCR\]" => "[C@R]";
		"\[SCL\]" => "[C@L3]";
		"\[STR\]" => "[ST@R]";
		"\[LTR\]" => "[LT@R6]";
		"\[NTR\]" => "[NN@R6]";
		"\[NDR\]" => "[ND@R]";
		"\[CTR\]" => "[CK@R]";
		"\[NDR\]" => "[ND@R]";
		"\[TR\]" => "[T@R]";
		"\[STR\]" => "[ST@R]";
		"\[BL\]" => "[B@L]";
		"\[XL\]" => "[X][@L]";
		
		"\[ML\]" => "[M@L]";
		"\[FL\]" => "[F@L]";
		"\[PL\]" => "[P@L]";
		"\[VL\]" => "[V@L]";
		"\[WL\]" => "[W@L]";
		
		"\[TL\]" => "[T@L3]";
		"\[DR\]" => "[D@R]";
		"\[CR\]" => "[K@R]";
		"\[NR\]" => "[N@R6]";
		"\[NL\]" => "[N@L]";
		"\[KL\]" => "[K@L3]";
		"\[ZL\]" => "[Z@L3]";
		
		"\[BR\]" => "[B@R6]";
		"\[GR\]" => "[G@R]";
		"\[SPL\]" => "[SP@L]";
		"\[FR\]" => "[F@R6]";
		"\[LR\]" => "[L@R6]";
		"\[MR\]" => "[M@R6]";
		"\[SPR\]" => "[SP@R6]";
		"\[PR\]" => "[P@R6]";
		"\[WR\]" => "[W@R6]";
		"\[RL\]" => "[VR@L]";
		"\[GL\]" => "[G@L3]";
		"\[SR\]" => "[S][AR]";
		"\[DL\]" => "[D@L3]";
		"\[CL\]" => "[K@L3]";
		"\[STL\]" => "[ST@L3]";
		"\[SL\]" => "s[@L]";

		// hochgestellte Unterlänge
		"(i|\[AU\]|\[AU\])\[CH\]" => "$1[^CH]";

		// abbreviations
		"{TAD}es" => "{TAD}S";
		"e{TAD}" => "[E][LES]{TAD}";

		// preserved h
		"a\[H'\]" => "A[&A]";
		"\[H'\]" => "[LES]";

		// 2nd step rewriting (= rewrite rewritten tokens)
		"\[VR@L\]\[-E\]" => "[VR@L][#2-][O][-E]";

	#EndSubSection(rewriter)
	#BeginSubSection(substituter)
		"{BIEN}(.*?){ESTAR}" => "[B]$1[RÜCK]";
		"{LA}" => "AL";
		"{DA}" => "AD";
		"{LE}" => "L";
		"{DE}" => "D";
		"{QUE}" => "K";
		"{TE}" => "T";
		"{SE}" => "[S=]";	
		"{MI}" => "IM";
		"{NI}" => "I[N=]";
		"{SI}" => "I[S=]";
		"{HA}" => "[0N-][EN]";
		"{EL}" => "[0U-][#4-][-E]";
		"{EN}" => "[ON-][#9][0N-][#1][EM]"; // no idea why double distance without intermediate token doesn't work ?!
		"{HE}" => "[0N-][-E]";
		"{ES}" => "[IST]";
		"{Y\/E}" => "I[LES]";
		"{LAS}" => "A[LES]";
		"{LES}" => "[LES]";
		"{LOS}" => "O[LES]";
		"{LO}" => "OL";
		"{DESDE}" => "D[-E]";
		"{YA}" => "AJ";
 		"{BIEN}"  => "B";
		"{BUEN}" => "UB";
		"{CADA}" => "AK";
		"{COMO}" => "OK";
		"{CUY}" => "UK";
		"{CUANDO}" => "A[ND]";
		"{MAS}" => "AM";
		"{MUCH}" => "UM";
		"{MUY}" => "UJ";
		"{POC}" => "OP";
		"{SO}" => "O[S=]";
		"{SU}" => "U[S=]";
		"{SUS}" => "[SUS]"; 
		"{TANT}" => "AT";
		"{TOD}" => "OT";
		"{TU}" => "UT";
		"{TAMBIEN}" => "ATB";
		"{TAMPOCO}" => "ATOP";
		"{TIEMPO}" => "[MP]";
		"{YO}" => "OJ";
		"{CUAL}" => "[0N-][#2][@L]";
		"{CUANT}" => "AQ";
		"{DEL}" => "[D@L3]";
		"{GRAN}" => "A[G@R]";
		"{GRAND}" => "A[G@R]";
		"{MEDIANTE}" => "[0D-][AU][NN][-E]";
		"{MISM}" => "[0D-][I][M]";
		"{NO}" => "[NO]";
		"{NOS}" => "O[N=]";
		"{NOS1}" => "[N=]"; // nosotros
		"{VOS}" => "[W]"; // vosotros
		"{PARA}" => "A[AR]";
		"{PARTICUL}" => "A[RR6]";
		"{PERO}" => "P[EM]";
		"{PRIMER}" => "I[P@R6]";
		"{SEGUN}" => "[S=]G";
		"{SIEMPRE}" => "[SP@R6]";
		"{USTED}" => "[0N-]U[ST]";
		"{USTEDES}" => "[0N-]U[ST]ES";
		"{NUESTR}" => "[N=@R6]";
		"{VUESTR}" => "[W@R6]";
		"{SION}" => "[SS]";
		"{MENT}" => "[MPF]";
		"{EX}" => "[LES]";
		"{IN}" => "[IN]";
		"{SUB}" => "[&U]"; // let's try;-)
		"{INTER}" => "[INTER]";
		"{PER}" => "[P]";
		"{TRAS}" => "A[T@R]";
		"{EST}" => "I[EST]";
		"{ESTAR}" => "[0N-][#3][RÜCK]";
		"{ESTUV}" => "[AU][&U]";
		"{SER}" => "[SER]";
		"{SON}" => "O[SEIN]";
		"{UNO}" => "A[&U]";
		"{UNA}" => "[AUF]";
		"{ANTE}" => "[0N-][#N][ANT]";
		"{CIRCUN}" => "C";
		"{CON}" => "[BEI][#N]"; // avoid later insertion of distance by adding #n as distance
		"{ACOM}" => "[0N-][#1][BEI]";
		"{CONTR}" => "[BEI+AR]";
		"{SOBRE}" => "[SOBRE]";
		"{EXTRA}" => "[0N-]A[LES]";
		"{GENER}" => "H[VR]";
		"{NECESAR}" => "[N=]A[VR]";
		"{POR}" => "[VOR]";
		"{PORQUE}" => "[VOR]K";
		"{SIN}" => "[SEIN]";
		"{SENOR}" => "O[SOBRE]";
		"{SENORA}" => "O[SOBRE][#9-][EN]";
		"{SUIZ}" => "[0U-][#0][SS]";
		"{TAD}S" => "[&EITS]";
		"{TAD}" => "[HEIT]";
		"{ISIM}" => "[ISIM]"; // created with shifter
		"{ITO}" => "[&T]";
		"{ITA}" => "[&T][&E][EN]";
		//"{ITOS}" => "[&IT][#1][S]";
		"{ITOS}" => "[&TS]";
		"{ITAS}" => "[&IT]A[#1][S]";
		"{ETE}" => "[&T][&E][-E]";
		"{ETES}" => "[&TES]";
		"NOS{OTR}([AO])S" => "[N=][&T@R]$1S";
		"VOS{OTR}([AO])S" => "[W][&T@R]$1OS";
		"{OTR}" => "[0N-][&T@R]";
		"{ME}" => "M";
		//"{}" => "";

		//"{}" => "";

	#EndSubSection(substituter)
	#BeginSubSection(laterewriter)
		"\[AR\](\[&T)" => "[AR^]$1";
		"\[AR\]([iI])" => "[AR^]$1";
	#EndSubSection(laterewriter)
	#BeginSubSection(separator)
		// empty
	#EndSubSection(separator)
	#BeginSubSection(relancer2)	
		// empty
	#EndSubSection(relancer2)
	#BeginSubSection(eliminator)
		// filter out unused linguistical markers
		"(?<!\[)-(?!\])" => "";
	#EndSubSection(eliminator)
	#BeginSubSection(jailor)
		// puts all tokens (including single ones) inside brackets []
		"(.*)" => "strtolower()";
		"(\[.*?\])" => "strtoupper()";
		"(?<!\[)([a-z]|ä|ö|ü)" => "[$1]";
	#EndSubSection(jailor)
	#BeginSubSection(prespacer)
		// at this point words are raw token sequences inside brackets
		// add spacing where necessary
		
		// convert all to lower
		"(.*)" => "strtolower()";

		// special
		"\[#n\]\[o\]" => "[o]"; // filter out wrong doubling of distances

		// end prespacer
	#EndSubSection(prespacer)
	#BeginSubSection(spacer)

// statistics: these rules cover approximately 137532 token combinations.
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:a|o|u)\])?(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|vr@#\/\.)\])" => "$1[#d1]$2$3"; // R1|C1: LK#V1:D1#RK (576)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6)\])" => "$1[#d10]$2$3"; // R10|C5: LK#V2:D10#RP (1548)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:a|o|u)\])?(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d11]$2$3"; // R11|C6: LK#V1:D11#RPD (720)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d12]$2$3"; // R12|C6: LK#V2:D12#RPD (360)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:a|o|u)\])?(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d13]$2$3"; // R13|C7: LK#V1:D13#RPE (216)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d14]$2$3"; // R14|C7: LK#V2:D14#RPE (108)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|vr@#\/\.)\])" => "$1[#d15]$2$3"; // R15|C8: LMA#V1:D15#RK (96)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|vr@#\/\.)\])" => "$1[#d16]$2$3"; // R16|C8: LMA#V2:D16#RK (48)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6)\])" => "$1[#d17]$2$3"; // R17|C9: LMA#V1:D17#RN (732)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6)\])" => "$1[#d18]$2$3"; // R18|C9: LMA#V2:D18#RN (366)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6)\])" => "$1[#d19]$2$3"; // R19|C10: LMA#V1:D19#RND (168)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|vr@#\/\.)\])" => "$1[#d2]$2$3"; // R2|C1: LK#V2:D2#RK (288)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6)\])" => "$1[#d20]$2$3"; // R20|C10: LMA#V2:D20#RND (84)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d21]$2$3"; // R21|C11: LMA#V1:D21#RNE (84)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d22]$2$3"; // R22|C11: LMA#V2:D22#RNE (42)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6)\])" => "$1[#d23]$2$3"; // R23|C12: LMA#V1:D23#RP (516)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6)\])" => "$1[#d24]$2$3"; // R24|C12: LMA#V2:D24#RP (258)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d25]$2$3"; // R25|C13: LMA#V1:D25#RPD (120)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d26]$2$3"; // R26|C13: LMA#V2:D26#RPD (60)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:a|o|u)\])?(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d27]$2$3"; // R27|C14: LMA#V1:D27#RPE (36)
"(\[(?:0n\-|0d\-|0u\-)\])(\[(?:i|au)\])(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d28]$2$3"; // R28|C14: LMA#V2:D28#RPE (18)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:a|o|u)\])?(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|vr@#\/\.)\])" => "$1[#d29]$2$3"; // R29|C15: LN#V1:D29#RK (2912)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:a|o|u)\])?(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6)\])" => "$1[#d3]$2$3"; // R3|C2: LK#V1:D3#RN (4392)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:i|au)\])(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|vr@#\/\.)\])" => "$1[#d30]$2$3"; // R30|C15: LN#V2:D30#RK (1456)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:a|o|u)\])?(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6)\])" => "$1[#d31]$2$3"; // R31|C16: LN#V1:D31#RN (22204)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:i|au)\])(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6)\])" => "$1[#d32]$2$3"; // R32|C16: LN#V2:D32#RN (11102)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:a|o|u)\])?(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6)\])" => "$1[#d33]$2$3"; // R33|C17: LN#V1:D33#RND (5096)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:i|au)\])(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6)\])" => "$1[#d34]$2$3"; // R34|C17: LN#V2:D34#RND (2548)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:a|o|u)\])?(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d35]$2$3"; // R35|C18: LN#V1:D35#RNE (2548)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:i|au)\])(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d36]$2$3"; // R36|C18: LN#V2:D36#RNE (1274)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:a|o|u)\])?(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6)\])" => "$1[#d37]$2$3"; // R37|C19: LN#V1:D37#RP (15652)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:i|au)\])(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6)\])" => "$1[#d38]$2$3"; // R38|C19: LN#V2:D38#RP (7826)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:a|o|u)\])?(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d39]$2$3"; // R39|C20: LN#V1:D39#RPD (3640)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6)\])" => "$1[#d4]$2$3"; // R4|C2: LK#V2:D4#RN (2196)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:i|au)\])(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d40]$2$3"; // R40|C20: LN#V2:D40#RPD (1820)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:a|o|u)\])?(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d41]$2$3"; // R41|C21: LN#V1:D41#RPE (1092)
"(\[(?:werd|in|les|sein|hab|hat|ant|anti|ion|haft|schaft|auf|aus|bei|durch|solch|selb|wo|schm|schw|mpf|sch|\^ch|ff|ll|lt|mm|nn|pp|ss|ch|sp|mp|zw|b|c|h|l|m|n|n\=|p|s|\-s|s\=|t|v|w|x|y|z|&e|&a|&u|&o|c@r|t@r|ch@r|h@r|sch@r|l@l|b@l|m@l|mm@l|p@l|v@l|sp@l|w@l|t@l3|pp@l|ff@l|c@l3|z@l3|sch@l3|ch@l3|b@r6|sp@r6|m@r6|p@r6|v@r6|w@r6|z@r|n@r6|n\=@r6|n@l|nn@l|nn@r6|l@r6|pp@r6|ff@r6|lt@r6)\])(\[(?:i|au)\])(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d42]$2$3"; // R42|C21: LN#V2:D42#RPE (546)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:a|o|u)\])?(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|vr@#\/\.)\])" => "$1[#d43]$2$3"; // R43|C22: LP#V1:D43#RK (1440)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:i|au)\])(\[(?:rück|rr|vr\+ar|vr|ar|vr@l|rr@l|vr@#\/\.)\])" => "$1[#d44]$2$3"; // R44|C22: LP#V2:D44#RK (720)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:a|o|u)\])?(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6)\])" => "$1[#d45]$2$3"; // R45|C23: LP#V1:D45#RN (10980)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:i|au)\])(\[(?:in|sein|gegen|hat|vor|vorar|ant|ur|anti|ion|haft|schaft|auf|aus|\-aus|bei|bei\+ar|solch|selb|fort|schm|mpf|\^ch|ff|ll|mm|nn|ss|sobre|ch|nd|pf|g|m|n|auf\+ar|s|\-s|x|y|z|&o|nd@r|g@r|ch@r|g@l3|m@l|mm@l|pf@l|ff@l|nd@l3|z@l3|ch@l3|m@r6|pf@r6|z@r|n@r6|n@l|nn@l|nn@r6|ff@r6)\])" => "$1[#d46]$2$3"; // R46|C23: LP#V2:D46#RN (5490)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:a|o|u)\])?(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6)\])" => "$1[#d47]$2$3"; // R47|C24: LP#V1:D47#RND (2520)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:i|au)\])(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6)\])" => "$1[#d48]$2$3"; // R48|C24: LP#V2:D48#RND (1260)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:a|o|u)\])?(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d49]$2$3"; // R49|C25: LP#V1:D49#RNE (1260)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:a|o|u)\])?(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6)\])" => "$1[#d5]$2$3"; // R5|C3: LK#V1:D5#RND (1008)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:i|au)\])(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d50]$2$3"; // R50|C25: LP#V2:D50#RNE (630)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:a|o|u)\])?(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6)\])" => "$1[#d51]$2$3"; // R51|C26: LP#V1:D51#RP (7740)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:i|au)\])(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6)\])" => "$1[#d52]$2$3"; // R52|C26: LP#V2:D52#RP (3870)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:a|o|u)\])?(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d53]$2$3"; // R53|C27: LP#V1:D53#RPD (1800)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:i|au)\])(\[(?:schw|lt|nk|q|v|nk@r|v@l|nk@l3|v@r6|lt@r6)\])" => "$1[#d54]$2$3"; // R54|C27: LP#V2:D54#RPD (900)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:a|o|u)\])?(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d55]$2$3"; // R55|C28: LP#V1:D55#RPE (540)
"(\[(?:est|gegen|da|sind|fort|ck|tt|nd|ng|nk|ns|pf|st|d|f|g|j|k|q|d@r|nd@r|g@r|k@r|nk@r|ng@r|ns@r|st@r|g@l3|f@l|pf@l|tt@l3|ck@l3|ng@l3|ns@l3|nk@l3|d@l3|nd@l3|st@l3|k@l3|f@r6|pf@r6|da@r|ck@l|tt@r|ck@r)\])(\[(?:i|au)\])(\[(?:tt|tt@l3|tt@r)\])" => "$1[#d56]$2$3"; // R56|C28: LP#V2:D56#RPE (270)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:sp|mp|zw|k|p|t|t@r|k@r|p@l|sp@l|t@l3|k@l3|sp@r6|p@r6)\])" => "$1[#d6]$2$3"; // R6|C3: LK#V2:D6#RND (504)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:a|o|u)\])?(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d7]$2$3"; // R7|C4: LK#V1:D7#RNE (504)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:i|au)\])(\[(?:ck|pp|pp@l|ck@l3|ck@l|pp@r6|ck@r)\])" => "$1[#d8]$2$3"; // R8|C4: LK#V2:D8#RNE (252)
"(\[(?:vor|vorar|rück|ur|zurück|inter|bei\+ar|rr|rr6|sobre|vr\+ar|vr|ar|auf\+ar|ser|vr@l|rr@l|vr@#\/\.)\])(\[(?:a|o|u)\])?(\[(?:les|hab|da|sind|durch|wo|sch|ng|ns|st|b|c|d|f|h|j|l|w|&e|&a|&u|d@r|c@r|ng@r|ns@r|h@r|sch@r|st@r|l@l|b@l|f@l|w@l|ng@l3|ns@l3|d@l3|c@l3|st@l3|sch@l3|b@r6|f@r6|w@r6|da@r|l@r6)\])" => "$1[#d9]$2$3"; // R9|C5: LK#V1:D9#RP (3096)

	#EndSubSection(spacer)
	#BeginSubSection(postspacer)
		// begin postspacer
		// assign concrete values to distances
		"\[#d1\]" => "[#3]"; 
		"\[#d2\]" => "[#4]";
		"\[#d3\]" => "[#2]";
		"\[#d4\]" => "[#3]";
		"\[#d5\]" => "[#4]";
		"\[#d6\]" => "[#4]";
		"\[#d7\]" => "[#5]";
		"\[#d8\]" => "[#5]";
		"\[#d9\]" => "[#3]";
		"\[#d10\]" => "[#2]";
		"\[#d11\]" => "[#5]";
		"\[#d12\]" => "[#5]";
		"\[#d13\]" => "[#6]";
		"\[#d14\]" => "[#7]";
		"\[#d15\]" => "[#5]"; 
		"\[#d16\]" => "[#0]"; 
		"\[#d17\]" => "[#3]"; 
		"\[#d18\]" => "[#0]"; 
		"\[#d19\]" => "[#4]"; 
		"\[#d20\]" => "[#4]"; 
		"\[#d21\]" => "[#4]"; 
		"\[#d22\]" => "[#4]";
		"\[#d23\]" => "[#3]";
		"\[#d24\]" => "[#1]";
		"\[#d25\]" => "[#2]";
		"\[#d26\]" => "[#3]";
		"\[#d27\]" => "[#5]";
		"\[#d28\]" => "[#6]";
		"\[#d29\]" => "[#3]";
		"\[#d30\]" => "[#3]";
		"\[#d31\]" => "[#3]";
		"\[#d32\]" => "[#3]";
		"\[#d33\]" => "[#6]";
		"\[#d34\]" => "[#4]";	
		"\[#d35\]" => "[#0]";	
		"\[#d36\]" => "[#4]";	
		"\[#d37\]" => "[#5]";
		"\[#d38\]" => "[#4]";
		"\[#d39\]" => "[#3]";
		"\[#d40\]" => "[#3]";
		"\[#d41\]" => "[#3]";
		"\[#d42\]" => "[#3]";
		"\[#d43\]" => "[#3]";
		"\[#d44\]" => "[#4]";
		"\[#d45\]" => "[#4]";
		"\[#d46\]" => "[#3]";
		"\[#d47\]" => "[#5]";
		"\[#d48\]" => "[#4]";
		"\[#d49\]" => "[#5]";
		"\[#d50\]" => "[#5]";
		"\[#d51\]" => "[#7]";
		"\[#d52\]" => "[#4]";
		"\[#d53\]" => "[#4]";
		"\[#d55\]" => "[#5]";
		"\[#d56\]" => "[#6]";
	
		
		// special
		"(\[bei\])\[#n\](\[les\])" => "$1[#4]$2"; // adjust for coexistencia
		//[RR][#3][AR]
		"(\[rr\])(?:\[#[0-9]\])?(\[ar\^?\])" => "$1[#9-]$2"; // adjust for rtr (artritis)
		"(\[in\])\[#5\]\[a\](\[p@r6\])" => "$1[A]$2"; // test
		"(?<!\[vr\])\[en\]$" => "[#3][EN]";

		// assign 5 to the rest (standard value)
		//"\[#d..?\]" => "[#5]";

		// recorrections (wanted to avoid that, but ...)
		"(\[auf\]\[)#3(\]\[s\])" => "$1#2-$2";
		"\[bei\+ar\]\[#3\]\[(en|EN)\]" => "[BEI+AR][#2-][EN]";
		"\[sobre\]\[#3\]\[(en|EN)\]" => "[SOBRE][#9-][#2-][EN]";

		// convert all to upper case for final rendering
		"([a-z])" => "strtoupper()";
		"ä" => "Ä";	// strtolower() works with umlaut, but strtoupper() doesn't ?!
		"ö" => "Ö";
		"ü" => "Ü"; 
		
	#EndSubSection(postspacer,=:prt)
#EndSection(rules)
