#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass paper
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
VSTENO Tutorial
\end_layout

\begin_layout Date
02.04.2019
\end_layout

\begin_layout Author
Marcel Maci
\end_layout

\begin_layout Abstract
VSTENO - kurz Vector Shorthand Tool with Enhanced Notational Options oder
 zu Deutsch Vektor-Kurzschrift-Werkzeug mit erweiterten Darstellungsoptionen
 - ist ein PHP-Programm zur automatisierten Generierung von Kurzschrifttexten
 (Stenogrammen) unter Verwendung des SVG-Grafikformates.
 Die generierten Texte können als HTML-Seite in einem Browser angezeigt
 oder von dort als PDF exportiert und zum Beispiel auf einem E-Reader gelesen
 werden.
 
\end_layout

\begin_layout Abstract
Den Kern des Programmes bildet die so genannte Steno Engine, ein abstraktes
 (verallgemeinertes) Stenografiezeichen-Satzsystem, das grundsätzlich an
 kein spezifisches Kurzschrift-System gebunden ist.
 Es können also eigene Zeichen und REGEX-Regeln zur Übertragung von Langschrift
 zu Kurzschrift programmiert werden.
 In der Grundversion kommt VSTENO mit Definitionen für das deutsche System
 Stolze-Schrey (Grundschrift).
 
\end_layout

\begin_layout Abstract
VSTENO ist Freie Software - das Programm kann unter der GPL (General Public
 License) frei kopiert und genutzt werden.
 Die aktuelle und hier dokumentierte Version ist 0.1rc (rc = release candidate
 oder Beta-/Testversion) und richtet sich sowohl an Anwender/innen, Linguist/inn
en und Programmierer/innen.
\end_layout

\begin_layout Part*
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part*
Einleitung
\end_layout

\begin_layout Standard
Die letzte Dokumentation von VSTENO liegt schon einige Zeit zurück
\begin_inset Foot
status open

\begin_layout Plain Layout
Anwender/innen-Tutorial (
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/vsteno_tutorial.pdf"

\end_inset

) vom 11.
 August 2018 und Tutorial für Linguist/innen (https://www.vsteno.ch/docs/tutorial_
linguistinnen.pdf) vom 18.
 August 2018.
\end_layout

\end_inset

.
 Seitdem ist viel passiert: Datenbankfunktionen, externe Formelsprache,
 Weiterentwicklung der Steno Engine - dies alles sind Neuerungen, die bis
 heute nirgendwo erläutert wurden.
 
\end_layout

\begin_layout Standard
Höchste Zeit also, dies nachzuholen und so Ihnen, den Anwender/innen die
 Möglichkeit zu geben, eigene Stenografie-Systeme umzusetzen.
 Denn dies ist zugegebenermassen eine der primären Visionen von VSTENO:
 Stenograf/innen anderer Systeme dazu zu animieren, ihr eigenes Stenografie-Syst
em mit VSTENO umzusetzen! 
\end_layout

\begin_layout Standard
Wie jedes quelloffene, freie Software-Projekt strebt VSTENO danach, irgendwann
 jenes entscheidende Momentum zu gewinnen, das den Quantensprung vom Einpersonen
- ins Community-Projekt ermöglicht.
 Mir ist sehr wohl bewusst, dass Stenografie heutzutage nicht mehr 
\begin_inset Quotes eld
\end_inset

so der Renner
\begin_inset Quotes erd
\end_inset

 ist, aber die Möglichkeit, dank VSTENO in Zukunft jeden beliebigen Roman
 in einem x-beliebigen Kurzschrift-System zu lesen, könnte vielleicht doch
 dazu führen, dass die Stenografie wieder etwas populärer wird.
\end_layout

\begin_layout Standard
Diesbezüglich kann ich aus eigener Erfahrung nur sagen, dass das Verwenden
 der Kurzschrift umso mehr Spass macht, je besser man sie beherrscht; und
 zur Beherrschung gehört nicht nur das Schreiben, sondern vor allem auch
 das (flüssige) Lesen.
 Gerade hier kann VSTENO mit seinem 
\begin_inset Quotes eld
\end_inset

Lesestoff à gogo
\begin_inset Quotes erd
\end_inset

 einen wesentlichen Beitrag leisten!
\end_layout

\begin_layout Standard
Sollte jemand Interesse haben, VSTENO weiterzuentwickeln - als Linguist/in
 (andere Systeme) oder als Programmierer/in (Erweiterung des Programmes),
 dann bitte bei mir melden (m.maci@gmx.ch)!
\end_layout

\begin_layout Standard
Nun wünsche ich viel Spass und anregende Lesestunden mit VSTENO!
\end_layout

\begin_layout Part*
Praktischer Teil
\end_layout

\begin_layout Standard
Dieser Teil ist für all jene gedacht, die VSTENO zur Generierung von 
\begin_inset Quotes eld
\end_inset

Lesestoff
\begin_inset Quotes erd
\end_inset

 verwenden wollen.
 Sie erfahren hier, wo Sie gemeinfreie Bücher finden, die Sie mit VSTENO
 übertragen können, wie Sie die Bücher in Kurzschrift übertragen und wie
 Sie die Stenografie-Texte ausdrucken oder auf einem E-Reader lesen können.
\end_layout

\begin_layout Section*
Bücher
\end_layout

\begin_layout Standard
Jede/r Autor/in ist Urheber/in seiner/ihrer Bücher und hält somit sämtliche
 Rechte an seinen/ihren Texten.
 Deshalb die wichtigste Bemerkung vorweg: VSTENO will keinesfalls dazu aufrufen,
 urheberrechtlich geschützte Bücher ohne Abgeltung der entsprechenden Gebühren,
 die den Urheber/innen zustehen, zu verwenden!
\end_layout

\begin_layout Standard
Es gibt allerdings auch Bücher, die gemeinfrei sind, entweder weil deren
 Urheberrechte abgelaufen sind (dies ist in der Regel 70 Jahre nach dem
 Tod des/der Autor/in der Fall) oder weil sie von Anfang an als gemeinfrei
 (z.B.
 mithilfe von Creative Commons
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://de.wikipedia.org/wiki/Creative_Commons"

\end_inset


\end_layout

\end_inset

) publiziert wurden.
 Eine Seite, die eine Sammlung von Büchern und Texten mit abgelaufenem Copyright
 anbietet, ist das Projekt Gutenberg:
\end_layout

\begin_layout Quotation
\begin_inset CommandInset href
LatexCommand href
target "http://gutenberg.spiegel.de/"

\end_inset


\end_layout

\begin_layout Standard
Sie dürfen hier also jeden Text kopieren und für sich persönlich verwenden
\begin_inset Foot
status open

\begin_layout Plain Layout
Mit 
\begin_inset Quotes eld
\end_inset

persönlich
\begin_inset Quotes erd
\end_inset

 ist eine nicht-kommerzielle, private Nutzung gemeint.
 Untersagt ist ausdrücklich eine kommerzielle, öffentliche Nutzung.
 Es gilt also zu unterscheiden, dass die ursprünglichen Texte zwar copyright-fre
i sind, das Projekt Gutenberg (bzw.
 deren Mitarbeitende) indes die Rechte der digitalisierten Version innehaben!
 Nur Bücher, welche ausdrücklich durch eine CC-Lizenz freigegeben sind,
 dürfen - unter der Berücksichtigung der angegebenen Rechte - öffentlich
 (und zum Teil auch kommerziell) weiterverwendet werden!
\end_layout

\end_inset

.
 Sollten Sie die Bücher anderweitig verwenden wollen (also insbesondere
 öffentlich oder gar kommerziell), so klären Sie bitte vorgängig ab, ob
 und von welcher Art Copyright sie allenfalls betroffen sind!
\end_layout

\begin_layout Section*
Übertragen
\end_layout

\begin_layout Standard
Um Texte zu übertragen, öffnen Sie Ihren Webbrowser
\begin_inset Foot
status open

\begin_layout Plain Layout
Empfohlen wird Firefox.
 VSTENO ist Freie Software und wurde somit ausschliesslich unter Linux und
 unter Verwendung von Freier Software entwickelt.
 Getestet wurde VSTENO ausschliesslich auf den Browsern IceCat und ABrowser
 (unter Trisquel 7).
 Einige Funktionalitäten (insbesondere von VPAINT, welches JavaScript verwendet)
 laufen ausdrücklich nicht auf Browsern wie Safari und Internet Explorer.
\end_layout

\end_inset

 und geben die Adresse www.vsteno.ch ein.
 Es existieren grundsätzlich zwei mögliche Formate, um Texte zu übertragen
 und zu lesen: (1) im Webbrowser und (2) auf einem E-Reader (via PDF).
 
\end_layout

\begin_layout Subsection*
Webbrowser
\end_layout

\begin_layout Standard
Um lediglich etwas Text im Webbrowser zu lesen, klicken Sie in der linken
 Navigationsleiste auf Mini.
 Sie können den Text entweder selber eintippen oder aus der Zwischenablage
 kopieren.
 Klicken Sie anschliessend auf abschicken - fertig!
\end_layout

\begin_layout Standard
Stenogramme, die Sie auf diese Weise generieren, werden als einzelne SVG-Grafike
n (ein Bild pro Wort) inline in den HTML-Code eingefügt.
 Vorteil dieses Modus: Wenn Sie die Grösse des Browserfensters ändern, werden
 die Stenogramme automatisch neu angeordnet.
 Nachteil: Relativ grosser Abstand von Zeile zu Zeile (da jedes einzelne
 SVG-Bild die maximale Anzahl von 7 Stenografiehöhen enhalten muss, damit
 höher und tiefer gestellte Zeichen dargestellt werden können).
\end_layout

\begin_layout Subsection*
E-Reader
\end_layout

\begin_layout Subsubsection*
Vorbemerkung
\end_layout

\begin_layout Standard
Um es gleich vorwegzunehmen: Kurzschrift-Texte auf einem E-Reader zu lesen
 ist einfach top! Nicht nur ist die Schriftqualität wesentlich besser als
 auf einem herkömmlichen Bildschirm oder Tablett, sondern Sie tun damit
 auch Ihren Augen etwas Gutes! E-Reader verwenden nämlich die so genannte
 E-Ink-Technologie (bei denen schwarze Punkte durch echte Pigmente dargestellt
 werden), die das Auge wesentlich weniger ermüden.
 Ich möchte deshalb die Anschaffung eines E-Readers allen empfehlen, die
 sich ernsthaft mit dem Gedanken tragen, längere Stenografie-Texte zu lesen.
 Auch in ökologischer Hinsicht ist ein E-Reader aus meiner Sicht eine gute
 Sache, da die Texte in guter Qualität gelesen werden können, ohne Papier
 verschwenden zu müssen.
\end_layout

\begin_layout Standard
Die Empfehlung für einen E-Ink-Reader kommt mir allerdings nicht leicht
 über die Lippen: Der Markt der E-Ink-Reader wird heute hauptsächlich dominiert
 von Amazon.
 Zu Amazon gibt es aus meiner Sicht nicht viel Gutes bzw.
 eigentlich nur Schlechtes zu sagen
\begin_inset Foot
status open

\begin_layout Plain Layout
Ich verweise hier nurmal auf Richard Stallmans Seite: 
\begin_inset CommandInset href
LatexCommand href
target "https://stallman.org/amazon.html"

\end_inset

.
 Aus persönlicher Sicht füge ich hinzu, dass ich es stossend finde, dass
 ein Mensch wie Jeff Bezos, seines Zeichens reichster Mann der Welt, ein
 weltweites Unternehmen führt, das Angestellte unter unmenschlichen Arbeitsbedig
ungen ausbeutet, im Namen der Globalisierung jeden lokalen Markt kaputt
 macht - und schliesslich noch die Frechheit hat, Steuerschlupflöcher zu
 nutzen, die dazu führen, dass die Firma Amazon im Jahr 2018 nicht nur keine
 Steuern bezahlt hat, sondern sogar noch 129 Millionen Dollar vom Fiskus
 rückerstattet erhielt (siehe hier: 
\begin_inset CommandInset href
LatexCommand href
target "https://www.nau.ch/news/wirtschaft/amazon-zahlt-in-den-usa-keine-steuern-65485543"

\end_inset

).
\end_layout

\end_inset

.
 Das Dilemma an E-Readern ist im Moment, dass es wenige (bis keine) ethischen
 Alternativen gibt.
 Deshalb werde ich hier kein bestimmtes Modell nennen, sondern empfehle
 allen, sich ein eigenes Urteil zu bilden
\begin_inset Foot
status open

\begin_layout Plain Layout
Hilfreich dabei ist aus meiner Sicht die Seite: 
\begin_inset CommandInset href
LatexCommand href
target "https://www.ethicalconsumer.org/technology/shopping-guide/tablets-e-readers"

\end_inset


\end_layout

\end_inset

.
 
\end_layout

\begin_layout Subsubsection*
PDF
\end_layout

\begin_layout Standard
Es empfiehlt sich Kurzschrift-Texte via PDF auf den E-Reader zu transferieren.
 Dies kann in zwei Schritten erreicht werden: (1) Generieren der gelayouteten
 Seiten im Webbrowser und (2) Export der Seiten als PDF (via Druckfunktion
 des Browsers).
 
\end_layout

\begin_layout Enumerate
Gehen Sie auf die Seite www.vsteno.ch und wählen Sie Maxi aus der linken Navigatio
nsleiste.
 Geben Sie den Text ein (oder kopieren Sie ihn aus der Zwischenablage) und
 wählen Sie dann folgende Einstellungen: Fenster = Vollseite (ohne Button);
 Ausgabe = Layout (statt Inline).
 Ebenfalls empfiehlt sich unter Header, Titel und Einleitung entweder abzuwählen
 (dann wird gleich mit dem Kurzschrift-Text begonnen) oder hier einen eigenen
 Titel und eine Einleitung einzutragen (dies erscheinen dann in Langschrift
 zu Beginn des Textes).
 Die übrigen Einstellungen können Sie vorläufig belassen.
 Klicken Sie anschliessend auf abschicken.
\end_layout

\begin_layout Enumerate
Im Unterschied zu Inline erscheint ihr Text nun gelayoutet, d.h.
 für jede Seite wird nun eine grosse SVG-Grafik erstellt und die Stenogramme
 darin platziert (standardmässig ist die Seite 660x1000 Punkte gross und
 die Stenogramme werden im Blocksatz dargestellt).
 Diese Seiten können Sie nun zu einem PDF exportieren, indem Sie die Druck-Funkt
ion Ihres Browsers nutzen.
 Dies kann je nach Browser etwas unterschiedlich sein (meistens muss im
 Menü Datei der Punkt Drucken gewählt werden), wichtig ist, dass Sie hier
 die Option 
\begin_inset Quotes eld
\end_inset

Druckvorschau
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

Drucken in Datei
\begin_inset Quotes erd
\end_inset

 wählen.
 Der Trick besteht also darin, die Druckausgabe nicht auf den Drucker zu
 schicken, sondern in eine Datei umzuleiten.
 
\end_layout

\begin_layout Standard
Übertragen Sie anschliessend das PDF auf Ihren E-Reader.
\end_layout

\begin_layout Subsubsection*
Tipps
\end_layout

\begin_layout Subsubsection*
Zeilenumbrüche
\end_layout

\begin_layout Standard
Sie werden vielleicht bereits bemerkt haben, dass VSTENO normalen Text als
 fortlaufend betrachtet (es nützt also nichts, wenn Sie im Textfenster zusätzlic
he Zeilenumbrüche und Leerzeilen einfügt - VSTENO wird diese einfach ignorieren).
 Um einen Zeileneinbruch einzufügen müssen Sie die HTML-Tags <br> (break)
 und <p></p> (paragraph) verwenden:
\end_layout

\begin_layout Quotation
Dies ist die 
\end_layout

\begin_layout Quotation
erste Zeile <br> dies ist 
\end_layout

\begin_layout Quotation
die 
\end_layout

\begin_layout Quotation
zweite Zeile
\end_layout

\begin_layout Standard
Dieses Beispiel wird also in zwei Zeilen ausgegeben.
\end_layout

\begin_layout Standard
Damit Sie - insbesondere bei längeren Texten (wie Büchern), die Sie von
 einer Webseite via Zwischenablage kopieren - nicht alle Formatierungen
 von Hand neu eingeben müssen, empfiehlt sich folgendes Vorgehen:
\end_layout

\begin_layout Itemize
Rufen Sie die Seite mit dem Text auf, den Sie kopieren möchten
\begin_inset Foot
status open

\begin_layout Plain Layout
Wir verwenden hier im Folgenden die 
\begin_inset Quotes eld
\end_inset

Notwendige Vorrede
\begin_inset Quotes erd
\end_inset

 aus Matto regiert von Friedricht Glauser in der Version des Projekts Gutenberg,
 siehe http://gutenberg.spiegel.de/buch/matto-regiert-1855/1.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Wählen Sie 
\begin_inset Quotes eld
\end_inset

Seitenquelltext anzeigen
\begin_inset Quotes erd
\end_inset

 o.ä.
 aus Ihrem Browsermenu.
\end_layout

\begin_layout Itemize
Scrollen Sie zu der Stelle, die den Text enthält.
\end_layout

\begin_layout Itemize
Wählen Sie mit der Maus den gesamten Text (inklusive HTML-Tags) aus, den
 Sie kopieren möchten.
\end_layout

\begin_layout Itemize
Fügen Sie diesen Text (inklusive HTML-Tags) ins Textfeld von VSTENO ein
 und berechnen Sie die Seite.
\end_layout

\begin_layout Standard
Hier unser Beispieltext als HTML-Quellcode:
\end_layout

\begin_layout LyX-Code
<h3>Notwendige Vorrede</h3> <p>Eine Geschichte zu erz&auml;hlen,
\end_layout

\begin_layout LyX-Code
die in Berlin, London, Paris oder Neuyork spielt, ist ungef&auml;
\end_layout

\begin_layout LyX-Code
hrlich.
 Eine Geschichte zu erz&auml;hlen, die in einer Schweizer 
\end_layout

\begin_layout LyX-Code
Stadt spielt, ist hingegen gef&auml;hrlich.
 Es ist mir passiert, 
\end_layout

\begin_layout LyX-Code
da&szlig; der Fu&szlig;ballklub Winterthur sich gegen eine meiner 
\end_layout

\begin_layout LyX-Code
Erz&auml;hlungen verwahrt hat, weil darin ein Back vorkam.
 
\end_layout

\begin_layout LyX-Code
Ich mu&szlig;te dann den Boys und anderen Fellows best&auml;tigen, 
\end_layout

\begin_layout LyX-Code
da&szlig; sie nicht gemeint waren.</p>
\end_layout

\begin_layout Standard
Wie man sieht werden hier nicht nur alle Zeilenumbrüche wie <br>, <p></p>
 mitkopiert, sondern auch Sonderzeichen wie ä (&auml;) oder das deutsche
 sz (&szlig;) anders dargestellt.
 All das braucht Sie nicht zu kümmern: VSTENO wandelt diese Sonderzeichen
 um und verwendet die Tags, um den Text in Abschnitte zu unterteilen (wie
 es im Original der Fall war).
\end_layout

\begin_layout Subsubsection*
Einstellungen
\end_layout

\begin_layout Standard
Unter Zeichen haben Sie die Möglichkeit Grösse, Dicke, Neigung, Schattierung
 etc.
 anzugeben.
 Ein Hinweis gleich vorweg: Nicht alle Optionen sind bereits in beiden Formaten
 (Inline und Layouted) implementiert! Am wichtigsten für ein gutes Schriftbild
 auf einem E-Reader (oder beim Ausdrucken) ist jedoch die Schriftgrösse
 und die Schriftdicke.
 Experimentieren Sie etwas mit diesen Werten, um die optimalen Grössen für
 Ihren E-Reader zu finden! Gleiches gilt für die Parameter unter Layouted:
 Experimentieren Sie mit Höhe/Breite, Randeinstellungen etc.
 um die für Sie optimalen Werte zu finden!
\end_layout

\begin_layout Subsubsection*
Inline-Option-Tags
\end_layout

\begin_layout Standard
Die Layouts können mit so genannten Inline-Option-Tags bis zu einem gewissen
 Grad noch weiter verfeinert werden.
 Info hierzu finden Sie unter 
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/vsteno_tutorial.pdf"

\end_inset


\end_layout

\begin_layout Standard
Die Unterstützung von Inline-Option-Tags ist in der Version 0.1rc allerdings
 noch rudimentär und funktioniert insbesondere im Layout-Modus nur sehr
 eingeschränkt.
\end_layout

\begin_layout Subsubsection*
Zeichen 
\backslash
 und |
\end_layout

\begin_layout Standard
Diese Zeichen geben VSTENO an, ob es sich um ein zusammengesetztes Wort
 handelt und wie dieses geschrieben werden soll.
 Betrachten wird die beiden Wörter Lebenspartner und Eulenspiegel.
 Beide Wörter sind aus zwei Einzelwörtern zusammengesetzt und beide weisen
 an der Verbindungsstelle die Konsontengruppe -nsp- auf.
\end_layout

\begin_layout Standard
Im System Stolze-Schrey können diese auf zwei Arten gruppiert werden: (1)
 -ns- plus -p- oder (2) -n- plus -sp-.
 VSTENO hat grundsätzlich keine Möglichkeit zu entscheiden, welches die
 bessere Gruppierung ist.
 Sie können aber eine Gruppierung erzwingen, indem Sie die Einzelwörter
 mit | und 
\backslash
 trennen:
\end_layout

\begin_layout LyX-Code
Lebens|partner, Lebens
\backslash
partner
\begin_inset Foot
status open

\begin_layout Plain Layout
Verwenden Sie zur Eingabe von 
\backslash
 und | die Taste AltGr + <> und AltGr + 7.
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
Eulen|spiegel, Eulen
\backslash
spiegel
\end_layout

\begin_layout Standard
Nun werden die Konsonantengruppen richtig gruppiert.
 Mit | bleiben die Wörter zusammegschrieben (fortlaufendes Stenogramm),
 mit 
\backslash
 hingegen kehrt VSTENO für das zweite Wort auf die Grundlinie zurück (die
 Wortteile werden getrennt, nahe nebeneinander geschrieben).
\end_layout

\begin_layout Subsection*
Drucken
\end_layout

\begin_layout Standard
Nebst der Ausgabe der Stenogramme im Webbrowser oder auf einem E-Reader
 können Sie diese natürlich auch ausdrucken.
 Auch hier wird (wie beim E-Reader) der Modus Layout (anstelle von Inline)
 empfohlen, da VSTENO dann ganze Seiten generiert (und die Stenogramme innerhalb
 der Seite ästhetisch - z.B.
 unter Verwendung von Blocksatz - anordnet).
 Ebenfalls wird empohlen, die Optionen Vollseite und ohne Button zu verwenden,
 damit VSTENO die Stenogramme auf eine leere Seite setzt (und nicht das
 Layout der Homepage www.vsteno.ch mitgedruckt werden muss).
\end_layout

\begin_layout Standard
Zum Drucken können Sie entweder ein PDF exportieren (wie für den E-Reader)
 oder die Druckfunktion des Browsers direkt verwenden.
 Auch hier empfiehlt es sich, verschiedene Einstellungen (Grösse, Dicke,
 Layout: Breite/Höhe, Rand etc.) auszuprobieren, um herauszufinden, welche
 Werte auf Ihrem Drucker die besten Resultate ergeben.
\end_layout

\begin_layout Part*
Versionen
\end_layout

\begin_layout Section*
Entwicklung
\end_layout

\begin_layout Standard
Um den Überblick über die aktuelle Version und die dokumentierten (bzw.
 nicht dokumentierten) Funktionen zu gewährleisten, hier ein kurzer, historische
r Abriss über die Entwicklung von VSTENO:
\end_layout

\begin_layout Standard
VSTENO startete im April 2018 prinzipiell als Proof of Concept.
 Es sollte also erst einmal überprüft werden, wie und ob ein Stenografie-Satzsys
tem überhaupt umsetzbar wäre.
 In dieser Phase wurden grundsätzliche Konzepte festgelegt: Verwendung des
 Grafikformates SVG, Modellierung der Stenografiezeichen als Bezier-Kurven
 (Splines), Implementierung in PHP und Benutzung des Programmes via Webbrowser,
 spätere Integrierung einer Datenbank.
\end_layout

\begin_layout Standard
Im Mai 2018 gelangte eine erste Version auf Github
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/marcelmaci/vsteno"

\end_inset


\end_layout

\end_inset

.
 Ziel fortan: Das Programm unter der GPL publik zu machen und sauber zu
 versionieren.
\end_layout

\begin_layout Standard
Im August 2018 war das Programm so weit fortgeschritten, dass eine erste
 offizielle Dokumentation geschrieben wurde
\begin_inset Foot
status open

\begin_layout Plain Layout
Anwender/innen-Tutorial (
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/vsteno_tutorial.pdf"

\end_inset

) vom 11.
 August 2018 und Tutorial für Linguist/innen (
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/tutorial_linguistinnen.pdf"

\end_inset

) vom 18.
 August 2018.
\end_layout

\end_inset

.
 Bereits damals konnten im Prinzip eigene Stenografie-Systeme umgesetzt
 werden, allerdings mussten die Daten direkt als Variablen in den PHP-Code
 integriert werden.
\end_layout

\begin_layout Standard
Bis zu diesem Zeitpunkt (August) konnte VSTENO nur regelmässige Stenogramme
 generieren, d.h.
 Wörter, die automatisiert von der Langschrift in die Kurzschrift übertragen
 werden.
 Ausnahmen - also Wörter, die von den Regeln abweichen - konnten nicht oder
 nur sehr rudimentär (mithilfe eines Trickster
\begin_inset Foot
status open

\begin_layout Plain Layout
Der Trickster enthielt spezielle Regeln für unregelmässige Wörter.
 Regeln für Unregelmässiges - das scheint schon vom Prinzip her widersinnig.
 Kein Wunder also, dass der Trickster ein problematisches Konzept war und
 in VSTENO während geraumer Zeit sein (un)regelrechtes Unwesen trieb ...
\end_layout

\end_inset

) berücksichtigt werden.
 Aus diesem Grund erhielt VSTENO im September 2018 eine Datenbankanbindung.
 Abweichende Wörter konnten fortan in einem Wörterbuch hinterlegt werden.
\end_layout

\begin_layout Standard
Im November schliesslich konnte sich VSTENO endlich vom PHP-Code lösen:
 Eigene Stenografie-Systeme konnten nun mit einer eigenen Formelsprache
 definiert und als externe ASCII-Datei abgespeichert werden.
 Die Integration eines Parsers stellte einen wesentlichen Schritt in der
 Entwicklung einer abstrakten Steno Engine dar und legte den Grundstein
 für die Version 0.1.
\end_layout

\begin_layout Standard
Im Anschluss wäre es eigentlich möglich gewesen, diese Steno Engine weiterzuentw
ickeln, allerdings hatte sich im Laufe der Zeit gezeigt, dass der gewählte
 Ansatz auch Mängel aufwies: Schattierungen der Stenogramme waren nur durch
 abrupte Übergänge realisierbar (kein Anti-Aliasing, Treppenbildung), ebenso
 wurden gewisse Stenozeichen durch den Neigungsalgorithmus verformt.
 Es entstand deshalb die Idee, eine neue Steno Engine zu entwickeln: die
 Steno Engine 1 (SE1) sollte nur noch Bugfixes erhalten und später durch
 eine bessere Steno Engine 2 (SE2) ersetzt werden.
 
\end_layout

\begin_layout Standard
Man sagt gemeinhin, dass man in der Regel mit 20% Aufwand 80% Erfolg erreicht.
 Und genau dies traf auf den geplanten Sprung von der SE1 zur SE2 zu.
 Während dreier Monate (von November bis Januar) schrieb ich im Hinlick
 auf die SE2 zuerst an einem grafischen Zeichen-Editor namens VPAINT in
 JavaScript
\begin_inset Foot
status open

\begin_layout Plain Layout
VSTENO und etwaige Hilfsprogramme sollten unbedingt via Webbrowser benutzbar
 sein.
\end_layout

\end_inset

.
 Und je ausgefeilter VPAINT wurde, umso mehr begann die SE2 zu wuchern:
 Im Januar machte der Quellcode von VPAINT bereits die halbe Grösse des
 ursprünglichen PHP-Codes von VSTENO aus.
 Dabei war dies erst der Editor und die Implementierung der SE2 in PHP noch
 in weiter Ferne ...
 
\end_layout

\begin_layout Standard
Dies wurde insofern zu einem Dilemma, als dass jede linguistische Weiterentwickl
ung des Systems Stolze-Schrey blockiert war: Wenn die SE1 entfernt werden
 sollte, machte es keinen Sinn, die bereits vorhandenen Zeichen und Regeln
 weiterzuentwickeln (da sie für die SE2 nicht mehr gültig sein würden);
 andererseits konnten keine neuen Zeichen und Regeln definiert werden, solange
 die SE2 nicht fertig war.
\end_layout

\begin_layout Standard
Im Januar hielt ich es schliesslich für eine gute Idee, dem Dilemma durch
 die magischen Worte Backports und Rückwärtskompabilität zu entkommen: Es
 sollten also die wichtigsten Features der SE2 auf die SE1 rückportiert
 werden (damit insbesondere auch der Editor VPAINT für die SE1 verwendet
 werden könnte) und die neue SE1 (nun mit dem Namen SE1 rev1) sollte vollständig
 rückwärtskompatibel (zur ursprünglichen SE1 rev0) sein.
 Die SE1 rev1 sollte also das 
\begin_inset Quotes eld
\end_inset

Beste aus zwei Welten
\begin_inset Quotes erd
\end_inset

 vereinen - die aufgebretzelte eierlegende Wollmichsau, gewissermassen.
\end_layout

\begin_layout Standard
Aber schön ist bekanntlich (nur) die Theorie! Im Februar wurde klar, dass
 die Rückwärtskompatibilität sehr wackelig war und die zum Teil gewagten
 Backports die SE1 aus entwicklungstechnischer Sicht auf ein Alpha-Stadium
 zurückwarfen.
 Was nichts anderes bedeutete als: Mehr Zeit für Bugfixes zu investieren.
 Was nichts anderes bedeutete als: Wieder keine Zeit, um die Zeichen und
 Regeln für Stolze-Schrey weiterzuentwickeln.
 So traf ich Mitte Februar zwei Entscheidungen: (1) die SE2 und die SE1
 rev1 wurden mit sofortiger Wirkung komplett deaktiviert und die Entwicklung
 radikal und für unbestimmte Zeit auf Eis gelegt, d.h.
 und bis zur offiziellen Release der Version 0.1 soll nur noch - und ausschliessl
ich - die SE1 rev0 weiterentwickelt werden; (2) die SE1 rev0 wird nicht
 (auch in Zukunft nicht) aus VSTENO verschwinden: Dazu ist sie trotz ihrer
 Nachteile zu gut und zu 
\begin_inset Quotes eld
\end_inset

rock solid
\begin_inset Quotes erd
\end_inset

!
\end_layout

\begin_layout Standard
Der aktuelle Stand der Dinge ist somit: In diesem Dokument werden ausschliesslic
h Funktionen der SE1 rev0 erläutert.
 Das Programm VPAINT wird nur als Hilfsinstrument zur visuellen und interaktiven
 Darstellung der Stenozeichen erläutert.
 Von der Verwendung von VPAINT zur Speicherung von Zeichen und der Nutzung
 von Funktionalitäten, die zur SE2 oder zur SE1 rev1 gehören,
\begin_inset Foot
status open

\begin_layout Plain Layout
Sofern sie nicht deaktiviert sind.
 Die meisten Funktionen der SE2 und der SE1 rev1 sind deaktiviert.
 Dennoch ist die Speicher-Funktion von VPAINT auch in der Version 0.1rc aktiv
 (da der Backport der SE1 rev1 indirekt funktioniert, d.h.
 die Zeichendefinitionen werden von VPAINT in den Text-Editor der rev0 exportier
t, von wo aus sie von der ursprünglichen SE1 rev0 abgespeichert werden,
 als handelte es sich um Daten der SE1 rev0 - da VSTENO in der Version 0.1rc
 nur Daten der SE1 rev0 versteht, wird davon DRINGEND abgeraten: Inkompatibiltät
en und korrupte Zeichendefinitionen sind garantiert).
\end_layout

\end_inset

 wird dringend abgeraten.
\end_layout

\begin_layout Part*
Steno Engines
\end_layout

\begin_layout Standard
Wie bereits erläutert soll in dieser Dokumentation grundsätzlich nur auf
 die SE1 rev0 eingegangen werden.
 Dennoch hier ganz kurz die wesentlichen Unterschiede zwischen den Versionen
\begin_inset Foot
status open

\begin_layout Plain Layout
Weiteres wird im Dokument https://www.vsteno.ch/docs/stenoengines.pdf erläutert.
\end_layout

\end_inset

:
\end_layout

\begin_layout Itemize
Ursprüngliche Steno Engine 1 (SE1 rev0): Hier wird die Mittellinie der Zeichen
 anhand von aufeinanderfolgenden Bezier-Kurven (so genannte Splines) modelliert.
 Dickere und dünnere Stellen werden durch dickere und dünnere Striche dargestell
t.
 Der Übergang von einer Strichdicke zur nächsten erfolgt abrupt (diskontiuierlic
h), was je nachdem eine Treppenbildung zur Folge hat.
 Die SE1 neigt Zeichen ausschliesslich durch horizontale Punktverschiebung,
 was zu einer Änderung der Winkel führt, sodass die Zeichen - je nach Art
 und Beschaffenheit - verformt werden.
 Die einzige Möglichkeit, mit der SE1 rev0 schöne Zeichen zu modellieren,
 besteht darin, das Zeichen direkt in der vorgesehenen Neigung zu entwerfen
 (VSTENO verwendet im Fall der Grundschrift Stolze-Schrey 60 Grad).
\end_layout

\begin_layout Itemize
Steno Engine Revision 1 (SE1 rev1): Verwendet die gleiche Mittellinienmodellieru
ng und horizontale Punktverschiedbung wie die SE1 rev0.
 Zwei Features der SE2 wurden jedoch als Hacks rückportiert: (1) parallele
 Rotationsachsen, (2) orthogonale und proportionale Punktdrehung.
 Bei der Rückportierung reden wir ganz klar von einem Hack: Die SE1 war
 nicht dafür ausgelegt, solche Funktionalitäten zu integrieren! Beispielsweise
 werden in der SE1 rev0 nicht einzelne Zeichen geneigt, sondern es werden
 zunächst alle benötigten Zeichen aneinandergefügt und danach das ganze
 Wort geneigt (unter Verwendung der horizontalen Punktverschiebung).
 Die einzige Möglichkeiten, die Funktionen (1) und (2) zu integrieren, besteht
 deshalb darin, (a) die Zeichen einzeln zu neigen (wobei die SE1 rev0 immer
 noch glaubt, es seien nicht geneigte Zeichen) und (b) die Zeichen dann
 zusammenzufügen und nicht mehr zu neigen (die SE1 rev0 wendet dann eine
 Neigung um 0 Grad an).
 Die Umsetzung von (a) und (b) impliziert weitere Komplikationen: Koordinaten
 für parallele Rotationsachsen und für neue Punkttypen müssen im starren
 Datengerüst der SE1 rev0 unergebracht werden.
 Da dort praktisch kein freier Platz mehr besteht, müssen die zusätzlichen
 Informationen zum Teil bitweise mit bestehenden Elementen verknüpft (und
 nachher wieder ausgelesen werden).
 All diese Komplikationen führen dazu, dass die SE1 rev1 bis jetzt nur unzuverlä
ssig funktioniert und deshalb in der Version 0.1rc deaktiviert wurde.
 
\end_layout

\begin_layout Itemize
Steno Engine 2: Hier wird ausgehend von einer Mittellinie (wie in der SE1)
 ein Umriss des Zeichens modelliert.
 Jedes Zeichen ist also eine Fläche, die von Bezier-Kurven (Splines) umschlossen
 wird.
 Dadurch können viel sauberere Übergänge gestaltet und die Treppenbildung
 wie in der SE1 vermieden werden (allerdings zum Preis einer wesentliche
 grösseren Komplexität).
 Ebenfalls bietet die SE2 nebst der horizontalen Punktverschiebung (wie
 in der SE1) zwei weitere Möglichkeiten, Zeichen zu neigen: so genannte
 (1) orthogonale und proportionale Knots (Punkte).
 Beide Punkte stehen vertikal auf einer Rotationsachse (und rotieren mit
 ihr), wobei bei den orthogonalen Knots die Abstände vom Rotationspunkt
 und zur Rotationsachse nicht korrigiert werden (das Zeichen verliert dann
 durch die Neigung an Höhe, ausserdem können sich gewisse Punkte durch die
 Drehung unter die Grundlinie verschieben).
 Proportionale Knots korrigieren den Abstand vom Rotationspunkt (das Zeichen
 wird bei der Drehung also länger, was z.B.
 bedeutet, dass der Kopfpunkt eines proportional modellierten Punktes exakt
 auf der Schreiblinie bleibt).
 Da bestimmte Teile gewisser Zeichen mehrere Rotationsachsen haben können,
 offeriert die SE2 auch die Möglichkeit für jeden orthogonalen oder proportional
en Knot eine parallele Rotationsachse zu definieren.
 Die Funktionalitäten der SE2 funktionieren in VPAINT zu ca.
 95%, dennoch ist die SE2 bis heute nicht als PHP-Code innerhalb von VSTENO
 implementiert.
 
\end_layout

\begin_layout Part*
Linguistischer Teil
\end_layout

\begin_layout Standard
In diesem Teil geht es darum, wie Sie mithilfe von VSTENO ein eigenes Stenografi
e-System definieren können.
 VSTENO verwendet hierfür eine eigene Formelsprache: Einerseits müssen die
 Zeichen definiert werden, andererseits benötigt VSTENO auch Regeln, anhand
 derer es einen Langschrifttest zu einer Folge von Stenogrammen umschreiben
 kann.
 Wichtig: Sie müssen nicht programmieren können, um solche Regeln zu erstellen.
 Allerdings müssen sie die Formelsprache von VSTENO beherrschen: Diese besteht
 aus einer speziellen Syntax, um die Zeichen zu definieren, sowie einem
 an REGEX angelehnten Wenn-Dann-Parser (der jeden Text, Wort für Wort und
 Zeichen für Zeichen umschreibt).
\end_layout

\begin_layout Standard
Dies alles wird im Folgenden detailliert und anhand von Beispielen aus dem
 System Stolze-Schrey (welches der Grundversion von VSTENO standardmässig
 beiliegt) erklärt.
 Sie können die Beispiele auch selber ausprobieren, indem Sie auf der Webseite
 www.vsteno.ch ein Benutzerkonto anlegen und das Modell custom abändern oder
 neu erstellen.
\end_layout

\begin_layout Section*
Benutzerkonto
\end_layout

\begin_layout Standard
Gehen Sie auf die Seite www.vsteno.ch und wählen Sie aus der linken Navigationslei
ste Konto anlegen.
 Vervollständigen Sie die Angaben (Benutzername und Passwort müssen mindestens
 8 Zeichen lang sein) und lösen Sie das Captcha
\begin_inset Foot
status open

\begin_layout Plain Layout
Falls Sie das System Stolze-Schrey nicht kennen, melden Sie sich bei mir
 via E-Mail (m.maci@gmx.ch).
 Gerne erstelle ich Ihnen ein persönliches Konto, mit dem Sie anschliessend
 ihr eigenes Stenografie-System definieren können.
 Die Abfrage eines Captchas ist notwendig, damit nur stenokundige Benutzer/innen
 Zugang zu den Datenbanken erhalten.
\end_layout

\end_inset

.
 Wenn Sie zum ersten Mal ein Konto eröffnen, werden Sie anschliessend direkt
 eingeloggt und können zwischen dem Stenografie-System (in VSTENO Modell
 genannt) Standard und Custom wählen.
 Wählen Sie custom, indem Sie auf den Knopf standard ganz links unten klicken.
 Sie arbeiten nun mit dem custom Modell und können dieses editieren (im
 Unterschied zum Standard-Modell, das nicht editierbar ist).
\end_layout

\begin_layout Standard
Detailliertere Informationen zum Anlegen eines Kontos inklusive grafischer
 Screenshots finden Sie auch unter: 
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/mitmachen_bei_vsteno.pdf"

\end_inset

.
\end_layout

\begin_layout Section*
Stenografische Zeichen
\end_layout

\begin_layout Standard
Sie sind also ein/e passionierte/r Stenograf/in, schreiben ein System, das
 VSTENO noch nicht beherrscht (z.B.
 DEK, Stiefografie oder Varianten von Stolze-Schrey wie Eil-/Redeschrift
 oder andere Sprachen wie Französisch, Spanisch, Englisch), und möchten
 gerne wissen, wie Sie VSTENO dazu bringen, Texte in diesem System auszugeben.
 
\end_layout

\begin_layout Standard
Als erstes müssen Sie VSTENO hierfür beibringen, wie die Zeichen in Ihrem
 System aussehen.
 Dies ist durchaus grafisch zu verstehen, das heisst: Sie müssen VSTENO
 beibringen, welche Linien es schreiben muss, damit ein Zeichen so aussieht,
 wie es aussehen soll.
 Auch können Zeichen unter Umständen (je nach System) schattiert werden
 können.
 
\end_layout

\begin_layout Standard
Dies alles müssen Sie VSTENO beibringen.
 In gewissem Sinne werden Sie also zu einem/r Stenografie-Lehrer/in - und
 VSTENO wiederum ist Ihr/e Stenografie-Schüler/in.
 Das einzige, was Sie nun noch brauchen für Ihren Unterricht, ist die (gemeinsam
e) Sprache: Also, wie bringen Sie VSTENO bei, wo es wann den Stift ansetzen
 und wie es ihn bewegen (und wie fest es 
\begin_inset Quotes eld
\end_inset

drücken
\begin_inset Quotes erd
\end_inset

) muss, damit die gewünschten Zeichen entstehen?
\end_layout

\begin_layout Standard
Vermutlich kennen Sie jene Kindermalbücher mit Zeichnungen, die aus vielen
 nummerierten Punkten bestehen.
 Die Punkte dienen dazu, dass ein Kind, das u.U.
 noch nicht so gut zeichnen kann, relativ simpel einen Elefanten, eine Giraffe
 (oder was immer vorgegeben ist) zeichnen kann.
 Die Zeichnung entsteht, indem man den Stift bei Punkt 1 ansetzt und dann
 alle folgenden Punkte verbindet.
 
\end_layout

\begin_layout Standard
Die gute Nachricht ist nun: VSTENO funktioniert im Prinzip genau gleich!
 Jedes Zeichen ist als eine 
\begin_inset Quotes eld
\end_inset

Folge von Punkten
\begin_inset Quotes erd
\end_inset

 definiert.
 Der einzige Unterschied zu den Kinderzeichnungen besteht darin, dass VSTENO
 die Punkte nicht einfach mit einer geraden Linie verbindet, sondern so
 genannte Bezier-Kurven durch diese Punkte legt - und zwar so, dass die
 Übergänge je nachdem möglichst 
\begin_inset Quotes eld
\end_inset

sanft
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

spitz
\begin_inset Quotes erd
\end_inset

 verlaufen.
\end_layout

\begin_layout Subsection*
Ein erstes Zeichen ...
\end_layout

\begin_layout Standard
Aber der Reihe nach.
 Beginnen wir mit einem ganz einfachen Zeichen: dem 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 in der Grundschrift Stolze-Schrey.
 Dieses besteht aus nur einem Strich 
\begin_inset Quotes eld
\end_inset

von oben nach unten
\begin_inset Quotes erd
\end_inset

.
 D.h.
 wir können zwei Punkte definieren - einen 
\begin_inset Quotes eld
\end_inset

oberen
\begin_inset Quotes erd
\end_inset

 und einen 
\begin_inset Quotes eld
\end_inset

unteren
\begin_inset Quotes erd
\end_inset

 - und diese dann durch eine gerade Linie verbinden.
 Der entsprechende Code hierfür sieht folgendermassen aus:
\end_layout

\begin_layout LyX-Code
"T" => { /*header*/ 6, 0.5, 0, 0, 3, 3, 0, "" 
\end_layout

\begin_layout LyX-Code
/**/ ,"","","","",0,0,0,0, 
\end_layout

\begin_layout LyX-Code
/**/ 0,0,0,0,0,0,0,0, 
\end_layout

\begin_layout LyX-Code
/*data*/ 0, 20, 0, 1, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 0, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Nun gut: Auf den ersten Blick sieht das vielleicht nun doch relativ verwirrlich
 aus, deshalb vereinfachen wir die Sache gleich noch etwas, indem wir das,
 was wir für das Verständnis nicht benötigen, weglassen.
 Ausserdem können Sie alles zwischen den Zeichen /* und */ ignorieren: Hierbei
 handelt es sich um Kommentare, die für VSTENO keine weitere Bedeutung haben
\begin_inset Foot
status open

\begin_layout Plain Layout
Eine weitere Möglichkeit sind Kommentare mit //: diese sind im Unterschied
 zu /* und */ jedoch auf eine Zeile beschränkt.
\end_layout

\end_inset

.
 In diesem Fall weisen die Kommentare /*header*/ und /*data*/ darauf hin,
 dass es sich bei den folgenden Zahlen um Header-Informationen (= allgemeine
 Angaben zum Zeichen) und um eigentliche Daten (hier: Punkte oder 
\begin_inset Quotes eld
\end_inset

Knoten
\begin_inset Quotes erd
\end_inset

, die das Zeichen definieren) handelt.
 Wenn wir den Header vorerst mal weglassen, ergibt sich:
\end_layout

\begin_layout LyX-Code
"T" => { /*data*/ 0, 20, 0, 1, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 0, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Damit verbleiben also zwei so genannte Datentupel - eines nach /*data*/
 und eines nach /**/, die je aus 8 Werten bestehen.
 Das erste Datentupel, welches dem ersten Punkt entspricht, enthält die
 folgenden Werte:
\end_layout

\begin_layout LyX-Code
 0, 20,  0,  1, 1.0,  0,  0,  0
\end_layout

\begin_layout LyX-Code
x1, y1, t1, d1,  th, dr, d2, t2 
\end_layout

\begin_layout Standard
Auf der zweiten Zeile habe ich die Bedeutung der einzelnen Werte notiert.
 Wichtig sind für uns im Moment vor allem die Werte x1 und y1, welche die
 Koordinaten des ersten Punktes (0,20) markieren.
 Der Vollständigkeit halber dokumentieren wir aber gleich alle Bedeutungen
\begin_inset Foot
status open

\begin_layout Plain Layout
Nur, bitte, tun Sie mir den Gefallen und vergessen Sie Werte, die wir nicht
 benötigen, gleich wieder; wir haben später Gelegenheit, darauf zurückzukommen!
\end_layout

\end_inset

:
\end_layout

\begin_layout Itemize
x1, y1: x- und y-Koordinate des Punktes
\end_layout

\begin_layout Itemize
t1, t2: Spannungen (tensions) im Anschluss an den Punkt (t1) und vor dem
 folgenden Punkt (t2)
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Bedeutung der tension wird später erklärt.
 Sie gibt bei einer Bezier-Kurve an, ob der Punkt 
\begin_inset Quotes eld
\end_inset

spitz
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

sanft
\begin_inset Quotes erd
\end_inset

 (rund) verbunden werden soll.
 Der Wert 0 gibt hier an, dass die Verbindung spitz sein soll, wie es das
 Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 verlangt.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
d1, d2: Art des Punktes (der Wert d1 = 1 bedeutet, dass es sich um einen
 so genannten entry-point handelt - also den ersten Punkt des Zeichens).
\end_layout

\begin_layout Itemize
th: Dicke (thickness) - dieser Wert wird vor allem für Schattierungen verwendet
 und hat im Moment keine weitere Bedeutung.
\end_layout

\begin_layout Itemize
dr: Der so genannte draw-Wert (Zeichnungswert), der bestimmt, ob der Punkt
 verbunden oder abgesetzt gezeichnet werden soll (der Wert 0 bedeutet, dass
 der Punkt verbunden wird).
\end_layout

\begin_layout Standard
Es mag sein, dass die vielen Informationen Ihnen im Moment wie etwas viele
 Bäume im Wald vorkommen, aber wie bereits erwähnt geht es im Moment nur
 um die x- und y-Koordinaten.
 Wie man sehen kann wird im ersten Datentupel der Punkt 1=(0,20) und im
 zweiten Datentupel der Punkt 2=(0,0) definiert.
 Dies bedeutet nichts anderes als die Umsetzung dessen, was wir weiter oben
 vermerkt haben: Das Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 ist die Verbindung zwischen einem 
\begin_inset Quotes eld
\end_inset

oberen
\begin_inset Quotes erd
\end_inset

 Punkt (0,20) und einem 
\begin_inset Quotes eld
\end_inset

unteren
\begin_inset Quotes erd
\end_inset

 Punkt (0,0).
\end_layout

\begin_layout Standard
An dieser Stelle weise ich gleich auf zwei weitere wichtige Aspekte hin:
 (1) Stenografie-Zeichen werden senkrecht (also ohne Neigung) definiert
\begin_inset Foot
status open

\begin_layout Plain Layout
Wenn sie, wie im System Stolze-Schrey, geneigt sein sollen, so kann VSTENO
 das geneigte Zeichen anhand des senkrechten selbständig berechnen.
\end_layout

\end_inset

 und (2) das Koordinatensystem von VSTENO verläuft auf der x-Achse von links
 nach rechts und auf der y-Achse von unten nach oben.
 Die Grösse der Zeichen können Sie als Linguist/in im Prinzip frei wählen
 (da es sich um Vektorkoordinaten handelt, lassen sich die Zeichen später
 beliebig und verlustfrei vergrössern oder verkleinern).
 Es wird aber empfohlen, eine gut lesbare und intuitiv verständliche Standardgrö
sse zu verwenden.
 Im vorliegenden Fall verwenden wir 10 Punkte für eine Stufe des Systems
 Stolze-Schrey.
 Da das Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 zwei Stufen hoch ist, ergibt dies für die y-Koordinate den Wert 20.
 Beachten Sie, dass alle Werte Fliesskommazahlen sind, d.h.
 Sie können auch Koordinaten mit Kommastellen - z.B.
 19.5 oder 19.999999 - verwenden.
\end_layout

\begin_layout Standard
Wenn Sie sehen möchten, wie das Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 aussieht, dann gehen Sie am besten zur Webseite www.vsteno.ch und geben Wörter
 mit 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 ein, z.B.
 
\begin_inset Quotes eld
\end_inset

beten
\begin_inset Quotes erd
\end_inset

.
 Standardmässig ist eine Neigung von 60° voreingestellt, weshalb das Zeichen
 nicht senkrecht, sondern um 60 Grad geneigt erscheint.
 Wenn Sie das Zeichen so sehen möchten, wie wir es oben definiert haben,
 dann geben Sie im Formular unter Optionen 90° ein: Sowohl der Buchstabe
 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 als auch 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 werden nun senkrecht dargestellt.
 Machen Sie sich im Moment noch keine Gedanken über den Vokal 
\begin_inset Quotes eld
\end_inset

E
\begin_inset Quotes erd
\end_inset

 oder die Endkürzung 
\begin_inset Quotes eld
\end_inset

EN
\begin_inset Quotes erd
\end_inset

.
 Widmen wir uns nun als nächstes dem Buchstaben 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

.
 Dieser weist im Unterschied zu 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 eine Rundung am unteren Ende auf.
 
\end_layout

\begin_layout Subsection*
Rund oder spitzig?
\end_layout

\begin_layout Standard
Im ersten Abschnitt haben wir den denkbar einfachsten Fall behandelt: ein
 Zeichen, das mit zwei Punkten definiert wird, die spitzig miteinander verbunden
 werden sollen.
 Die Art und Weise, wie die Punkte verbunden werden sollen, ist im Datenfeld-Ten
sion definiert.
 Betrachten wir noch einmal die zwei Punkte von 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
"T" => { 0, 20, /*p1t1*/ 0, 1, 1.0, 0, 0, /*p1t2*/ 0, 
\end_layout

\begin_layout LyX-Code
/**/ /*p2t1*/ 0, 0, 0, 0, 1.0, 0, 1, /*p2t2*/ 0 }
\end_layout

\begin_layout Standard
Zur Veranschaulichung habe ich Kommentare eingefügt.
 Wie man sieht, enthält jeder Punkt (p1 und p2) zwei Tensions (t1 und t2).
 Bevor wir über die Bedeutung dieser Tensions weiterreden, empfehle ich
 Ihnen am besten, die folgende Internet-Seite zu besuchen: Sie enthält eine
 interaktive Demo so genannter Splines.
 Ein Spline ist nichts anderes als eine Folge von Punkten (wie wir sie in
 unseren Zeichen, z.B.
 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

, definieren).
 Sie können nun mit den Tension der verschiedenen Punkte (im Englischen
 manchmal auch knots genannt) herumspielen und so ein intuitives Verständnis
 dafür bekommen, welchen Einfluss die Spannung auf den Verlauf von Bezier-Kurven
 haben:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset CommandInset href
LatexCommand href
target "http://scaledinnovation.com/analytics/splines/aboutSplines.html"

\end_inset


\end_layout

\begin_layout Standard
Vereinfacht gesagt ergibt die Spannung mit dem Wert 0 eine spitze Verbindung,
 die Spannung mit dem Wert 0.5 eine runde Verbindung (es sind natürlich auch
 andere Werte - also 
\begin_inset Quotes eld
\end_inset

stärkere
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

schwächere
\begin_inset Quotes erd
\end_inset

 Spannungen - möglich).
 Wichtig zu wissen ist, dass die Kurve zwischen zwei Punkten P1 zu P2 durch
 zwei Spannungen definiert wird: Die Spannung p1t1 gibt die Spannung nach
 dem Punkt P1 (Richtung P2) an, die Spannung p1t2 gibt die Spannung vor
 dem Punkt P2 (aus Richtung P1) an.
 Wir verwenden diese Spannungen nun, um das Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 zu definieren:
\end_layout

\begin_layout LyX-Code
"B" => { /*data p1*/ 0, 10, 0, 1, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 0, 2, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 2.5, 0, 0.5, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p4*/ 5, 2, 0.5, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Wiederum haben wir aus Gründen der Übersichtlichkeit den Header weggelassen.
 Wenn wir nur die Koordinaten aus den Tupeln anschauen, wird das Zeichen
 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 mit 4 Punkten definiert: P1(0,10), P2(0,2), P3(2.5,0), P4(5,2).
 Zur Veranschaulichung können Sie z.B.
 ein Blatt Papier nehmen, die Punkte auf einem Koordinatensystem eintragen
 und diese dann - wie eingangs anhand der Kinderzeichnungen erwähnt - verbinden.
 Beachten Sie, dass dieses Zeichen nur 10 Punkte hoch ist (im Unterschied
 zu 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 ist 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 einstufig).
\end_layout

\begin_layout Standard
Der ganze mathematische Hokuspokus - bzw.
 die Magie ;-) - liegt nun in den Tensions.
 Sie betragen für die Punkte 1-4: T1(0,0.5), T2(0.5,0.5), T3(0.5,0.5), T4(0.5,0).
 Das bedeutet, dass beim Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 nur der erste Punkt spitz (Wert 0) verbunden wird.
 Alle anderen Punkte werden danach rund (mit der Spannung 0.5) verbunden.
 Die letzte Spannung T4 enthält in diesem Beispiel wieder den Wert 0: Dieser
 hat keine Bedeutung, denn wenn wir das Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 mit einem weiteren Zeichen verbinden, so können wir nicht wissen, ob die
 Verbindung mit dem folgenden Zeichen rund oder spitzig sein muss (im Falle
 von 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 spitzig, im Falle von 
\begin_inset Quotes eld
\end_inset

M
\begin_inset Quotes erd
\end_inset

 hingegen rund).
 Anders gesagt: Dieser Wert hängt vom Folgezeichen ab - und es ist somit
 völlig egal, welchen Wert Sie hier eintragen (er wird später überschrieben).
\end_layout

\begin_layout Subsection*
Schattierungen
\end_layout

\begin_layout Standard
Bis jetzt haben wir Zeichen als Folge von Punkten definiert, die spitz oder
 rund miteinander verbunden werden.
 Damit lässt sich schon einiges machen! Allerdings verlangen gewisse Stenografie
-Systeme - darunter auch Stolze-Schrey -, dass man Zeichen schattieren kann.
 Auch diese Funktion können wir durch Setzen der entsprechenden Werte innerhalb
 der Datentupel erreichen.
 Nehmen wir noch einmal unser einfaches Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

, wie wir es definiert haben:
\end_layout

\begin_layout LyX-Code
"T" => { /*data p1*/ 0, 20, 0, 1, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 0, 0, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
An der 5.
 Stelle sehen wir hier den Wert 1.0.
 Dieser Wert entspricht der Dicke (thickness) und bedeutet also, dass das
 Zeichen immer mit der Standarddicke gezeichnet werden soll.
 Genau genommen ist der Wert 1.0 ein Multiplikationsfaktor in Bezug zu einer
 (vom/von der Nutzer/in vorgegebenen) Grunddicke: Werte >1.0 geben eine dickere,
 Werte <1.0 eine dünnere Linie an.
 Es können - wie für alle anderen Werte - Fliesskommazahlen verwendet werden
 (also auch 0.77 ist eine gültige Liniendicke).
 Wir passen diesen Wert nun an:
\end_layout

\begin_layout LyX-Code
"T" => { /*data p1*/ 0, 20, 0, 1, 2.5, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 0, 0, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Wie man sieht, habe ich im ersten Datentupel (= Punkt 1) als Dicke den Wert
 2.5 eingetragen.
 Dies bedeutet nun Folgendes: Wenn das Zeichen schattiert werden soll, dann
 wird ausgehend vom ersten Punkt P1 die Linie (genauer: Bezier-Kurve) zum
 Punkt P2 mit der 2.5-fachen Dicke gezeichnet.
 Bitte beachten Sie: Für das Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 genügt es, nur diesen einen Wert zu ändern, um das Zeichen zu schattieren.
 Würden wir auch im Punkt P2 den Wert auf 2.5 erhöhen, so würde dies bedeuten,
 dass auch die Verbindungslinie zum nächsten Zeichen schattiert würde (was
 wir nicht wollen).
 Sie können diese Schattierung sehen, indem Sie in der Demoversion das Wort
 
\begin_inset Quotes eld
\end_inset

Tat
\begin_inset Quotes erd
\end_inset

 eingeben: Das erste 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 wird normal gezeichnet, das zweite schattiert.
\end_layout

\begin_layout Standard
Leider ist es aber nicht immer so einfach mit den Schattierungen wie beim
 Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

, das mit einem spitzen Punkt beginnt und endet.
 Speziell bei Zeichen, die mit Rundungen beginnen und/oder aufhören, sieht
 es unschön aus, wenn wir einfach ab einem bestimmten Punkt eine wesentlich
 dickere Linie definieren.
 Bei runden Zeichen empfiehlt es sich also, die Schattierung in mehrere
 Schritte abgestuft beginnen und/oder enden zu lassen.
 Zur Illustration zeigen wir dies an unserem zweiten Beispielzeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

, welches einen spitzen Anfang und ein rundes Ende aufweist:
\end_layout

\begin_layout LyX-Code
"B" => { /*data p1*/ 0, 10, 0, 1, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 0, 2, 0.5, 0, 1.75, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 2.5, 0, 0.5, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p4*/ 5, 2, 0.5, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Da unser Zeichen mit einem spitzen Punkt beginnt, können wir hier problemlos
 direkt die Dicke 2.5 einsetzen.
 Die Kurve von P1 zu P2 wird also 
\begin_inset Quotes eld
\end_inset

maximal dick
\begin_inset Quotes erd
\end_inset

 gezeichnet.
 Danach setzen wir ab Punkt P2 eine mittlere Dicke von 1.75 ein.
 Die Kurve von P2 zu P3 wird also 
\begin_inset Quotes eld
\end_inset

weniger dick
\begin_inset Quotes erd
\end_inset

 gezeichnet.
 Schliesslich bleibt noch die Verbindung von P3 zu P4: Hier kehren wir zur
 
\begin_inset Quotes eld
\end_inset

normalen
\begin_inset Quotes erd
\end_inset

 Dicke von 1.0 zurück.
 
\end_layout

\begin_layout Subsection*
Intermediate shadow points
\end_layout

\begin_layout Standard
Die soeben dargestellte Abstufung der Schattierungen funktioniert relativ
 gut, wenn das Zeichen selbst bereits aus mehreren Punkten besteht, die
 eine abgestufte Definition der Schattierung zulassen.
 Schwieriger wird es, wenn das Zeichen als solches zu wenige Punkte enthält,
 um eine optisch einigermassen gelungene Abstufung zu erreichen.
 In diesem Fall besteht zwar die Möglichkeit, zusätzliche Punkte in die
 Zeichendefinition einzufügen, um mehr Zwischenschritte in der Schattierung
 zu erhalten.
 Diese Zwischenpunkte können jedoch den Nachteil haben, dass sie das optische
 Bild in der unschattierten Variante stören, da der kontinuierliche Lauf
 der Bezier-Kurve unterbrochen wird.
 Die von VSTENO verwendete Lösung besteht hier in so genannten 
\begin_inset Quotes eld
\end_inset

intermediate shadow points
\begin_inset Quotes erd
\end_inset

.
 Dies sind Zwischenpunkte, die nur dann gezeichnet werden, wenn das Zeichen
 schattiert dargestellt werden soll.
 In der normalen Zeichendarstellung werden diese Punkte ignoriert.
 Als Beispiel zeigen wir das Zeichen 
\begin_inset Quotes eld
\end_inset

R
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Da der Laut 
\begin_inset Quotes eld
\end_inset

R
\begin_inset Quotes erd
\end_inset

 im System Stolze-Schrey zwei Ausführungsvarianten hat, unterscheiden wir
 zwischen 
\begin_inset Quotes eld
\end_inset

AR
\begin_inset Quotes erd
\end_inset

 (= Anlaut-R) und 
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

 (= vokalisches R).
 Das 
\begin_inset Quotes eld
\end_inset

vokalische R
\begin_inset Quotes erd
\end_inset

 ist somit jenes, das im Uhrzeigersinn ausgeführt wird und nach Vokal steht.
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
"VR" => { /*data*/  /*1*/ 2.5, 5, 0.5, 1, 1.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*2*/ 3.75, 4, 0.7, 5, 2.5, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*3*/ 5, 2.5, 0.7, 0, 3.0, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*4*/ 4.5, 0.5, 0.7, 5, 2, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*5*/ 3.25, 0.15, 0.7, 5, 1.5, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*6*/ 2.5, 0, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*7*/  0, 2.5, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*8*/ 2.5, 5, 0.5, 0, 1.0, 0, 1, 0.0 }
\end_layout

\begin_layout Standard
Der Einfachheit halber wurden die Punkte 1-9 innerhalb von Kommentaren nummerier
t.
 Für die Definition des nicht schattierten Zeichens 
\begin_inset Quotes eld
\end_inset

R
\begin_inset Quotes erd
\end_inset

 reichen im Prinzip die folgenden Punkte aus: 1=(2.5,5), 3=(5,2.5), 6=(2.5,0),
 7=(0,2.5), 8=(2.5,5).
 Wie man sehen kann, markieren diese 5 Punkte, die Eckpunkte eines geschlossenen
 Kreises, die jeweils rund - d.h.
 mit Tensions zwischen 0.5-0.7 - verbunden werden.
 Würde man allerdings nur diese 5 Punkte für das schattierte Zeichen verwenden,
 so stünden für die Schattierung lediglich die Strecken von Punkt 1 - 3
 und von Punkt 3 - 6 zur Verfügung.
 Aus diesem Grund wurden die übrigen Punkte - also 2, 4, 5 - als intermediate
 shadow points eingefügt.
 Erkennbar ist dies am Wert 5 an der 4.
 Stelle im Datatupel.
 Wie wir weiter oben schon angedeutet hatten, steht der Wert in der 4.
 Position für den 
\begin_inset Quotes eld
\end_inset

Typ
\begin_inset Quotes erd
\end_inset

 des Punktes.
 Wir haben hier schon den entry point (mit Wert 1) und den normalen Punkt
 (mit Wert 0) kennen gelernt.
 Der intermediate shadow point ist also einfach ein weiterer Typ, den ein
 Punkt annehmen kann.
\end_layout

\begin_layout Standard
Wie bereits erwähnt würde das Zeichen 
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

 unschön aussehen, wenn diese Zwischenpunkte auch für das unschattierte
 Zeichen verwendet werden (dies ist hier besonders deutlich, weil Kreise
 kontinuierliche Kurven sind, wo es besonders auffällt, wenn sie durch weitere
 Punkte unterbrochen werden).
 Aus diesem Grund lässt der Zeichenalgorithmus von VSTENO diese Zusatzpunkte
 weg, wenn das Zeichen nicht schattiert ist.
\end_layout

\begin_layout Subsection*
Punkttypen
\end_layout

\begin_layout Standard
An dieser Stelle ist es nun an der Zeit, die verschiedenen Punkttypen in
 ihrer Vollständigkeit vorzustellen.
 Wiederum: Vergessen Sie bitte sämtliche Punkttypen, die hier vorgestellt
 werden und die noch nicht anhand von Beispielen erklärt werden.
 Im Moment genügt es, wenn Sie ein erstes Mal gehört haben, dass diese Punkttype
n existieren.
\end_layout

\begin_layout Standard
Wichtig im Zusammenhang mit diesen Punkttypen ist zu wissen, dass es im
 Datentuplet zwei Stellen gibt, wo diese definiert werden.
 Hier noch einmal das Datentuplet des ersten Punktes, das wir für das Zeichen
 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 definiert hatten:
\end_layout

\begin_layout LyX-Code
0,  20,  0,  1, 1.0,  0,  0,  0
\end_layout

\begin_layout LyX-Code
x1, y1, t1, d1,  th, dr, d2, t2 
\end_layout

\begin_layout Standard
Das Feld d1 steht für die Eingangs-Information (entry information), d.h.
 die Information, die angibt, wie das Zeichen verbunden wird.
 Es kann folgende Werte annehmen:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wert
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bedeutung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
normaler Punkt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
entry point (Anfangspunkt = erster Punkt des Zeichens)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pivot point (Drehpunkt)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
conditional pivot point (bedingter Drehpunkt)
\begin_inset Foot
status open

\begin_layout Plain Layout
Wird in der jetzigen Version nicht unterstützt und deshalb nicht weiter
 dokumentiert.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
connecting point (Verbindungspunkt)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
intermediate shadow point (Zwischenschattierungspunkt)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
98
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
late entry point (später Anfangspunkt)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Analog steht das Feld d2 für die Ausgangs-Information (exit information),
 d.h.
 die Information, die angibt, wie das Zeichen 
\begin_inset Quotes eld
\end_inset

beendet
\begin_inset Quotes erd
\end_inset

 wird.
 Die Werte sind ähnlich wie bei d1, aber mit einigen kleinen Unterschieden:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wert
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bedeutung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
normaler Punkt
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exit point (Endpunkt = letzter Punkt des Zeichens)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pivot point (Drehpunkt)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
conditional pivot point (bedingter Drehpunkt)
\begin_inset Foot
status open

\begin_layout Plain Layout
Wird in der jetzigen Version nicht unterstützt und deshalb nicht weiter
 dokumentiert.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
99
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
early exit point (früher Endpunkt)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Wie gesagt: Zerbrechen Sie sich nicht jetzt schon den Kopf über alle diese
 Punkttypen, wir werden sie einzeln mit Beispielen erläutern.
 Beginnen werden wir mit dem pivot point, also dem 
\begin_inset Quotes eld
\end_inset

Drehpunkt
\begin_inset Quotes erd
\end_inset

, mit dem Wert 2 in d1 oder d2.
\end_layout

\begin_layout Subsection*
Verbundene Rundungen
\end_layout

\begin_layout Standard
Zwei Stenozeichen mit spitzen Anfangs- und Endpunkten zu verbinden, ist
 trivial: Eine gerade Linie genügt! Schwieriger wird es jedoch, wenn eines
 - oder beide Zeichen - Rundungen als Anfangs- oder Endpunkt aufweisen.
 Möglich sind hier die Kombinationen spitz + rund (
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 + 
\begin_inset Quotes eld
\end_inset

M
\begin_inset Quotes erd
\end_inset

 im Wort 
\begin_inset Quotes eld
\end_inset

Thema
\begin_inset Quotes erd
\end_inset

), rund + spitz (
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 + 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 im Wort 
\begin_inset Quotes eld
\end_inset

beten
\begin_inset Quotes erd
\end_inset

) oder rund + rund (
\begin_inset Quotes eld
\end_inset

M
\begin_inset Quotes erd
\end_inset

 + 
\begin_inset Quotes eld
\end_inset

M
\begin_inset Quotes erd
\end_inset

 im Wort 
\begin_inset Quotes eld
\end_inset

Mumie
\begin_inset Quotes erd
\end_inset

).
 Zusätzlich kann im System Stolze-Schrey (das wir immer als Beispiel nehmen)
 das folgende Zeichen eng oder weit verbunden und hoch oder tiefgestellt
 werden.
 Während die Verbindung 
\begin_inset Quotes eld
\end_inset

eng
\begin_inset Quotes erd
\end_inset

 vs 
\begin_inset Quotes eld
\end_inset

weit
\begin_inset Quotes erd
\end_inset

 noch einigermassen überschaubar ist (2 Möglichkeiten) ergibt sich bei der
 Hoch- und Tiefstellung eine Vielzahl von Fällen: Zum einen bedeutet Hoch-
 und Tiefstellung nicht bei jedem Zeichen dasselbe (beim Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 bedeutet Hochstellung eine halbe Stufe höher, beim Zeichen 
\begin_inset Quotes eld
\end_inset

SCH
\begin_inset Quotes erd
\end_inset

 hingegen beträgt der Unterschied eine ganze Stufe), zum anderen können
 Zeichen halb-, ein-, zwei- oder dreistufig sein, was zu einer Unzahl von
 Verbindungsarten (damit meinen wir vor allem Länge, Winkel und allenfalls
 Verlauf der Verbindung) führt.
\end_layout

\begin_layout Standard
Aus diesem Grund besteht die Möglichkeit bei gerundeten Zeichen einen Drehpunkt
 zu definieren.
 Dieser Drehpunkt sollte sich im Fuss- oder Scheitelpunkt des Zeichens befinden
 und somit so gelegen sein, dass er das Zeichen in 2 (Zeichen mit einer
 Rundung) oder 3 Teile (Zeichen mit 2 Rundungen) auftrennt.
 D.h.
 dass solche Zeichen über einen fixen Mittel- oder Kernteil verfügen, an
 den sich die variablen Rundungen anschliessen.
 Der Drehpunkt markiert also den Übergang zwischen dem fixen und dem Variablen
 Teil eines Zeichens.
 Wir illustrieren dies am Beispiel 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

, welches eine Rundung am Fusse aufweist:
\end_layout

\begin_layout LyX-Code
"B" => { /*data*/ /*1*/0, 10, 0, 1, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*2*/ 0, 2, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*3*/ 2.5, 0, 0.5, 0, 1.0, 0, 2, 0.5, 
\end_layout

\begin_layout LyX-Code
/*4*/ 5, 2, 0.5, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Diese Definition ist identisch mit jener, die wir bereits weiter oben gegeben
 haben, mit dem einzigen Unterschied, dass der 3.
 Punkt als Drehpunkt definiert wird (Wert 2 im vorletzten Datentupel).
 Dies bedeutet nun, dass die Punkte 1-3 fix (also unveränderlich) sind,
 während der Punkt 4 (= exit point) variabel ist.
 Betrachten wir hier das Beispiel 
\begin_inset Quotes eld
\end_inset

Bohne
\begin_inset Quotes erd
\end_inset

: Hier trifft die Rundung von 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 mit der Tiefstellung des einstufigen Zeichens 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 zusammen, welches eng verbunden wird.
 Wie man leicht erkennen kann, befindet sich somit der Anschlusspunkt des
 Zeichens 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 unterhalb (!) des Endpunktes des Zeichens 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 (in Koordinaten gesprochen: der Endpunkt von 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 liegt bei y=2, der Anschlusspunkt von 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 liegt bei y=0).
 Mit anderen Worten: Würde das Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 ohne Anpassung verbunden, dann entstünde ein hässlicher 
\begin_inset Quotes eld
\end_inset

Schnörkel
\begin_inset Quotes erd
\end_inset

 anstelle einer kontinuierlichen Linie.
\end_layout

\begin_layout Standard
VSTENO passt in diesem Fall die Endpunkte beider Zeichen (auch 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 ist ein Zeichen, welches mit einer Rundung beginnt) an, sodass ein 
\begin_inset Quotes eld
\end_inset

sanfter
\begin_inset Quotes erd
\end_inset

 Übergang entsteht.
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Anpassung erfolgt im Moment als simple Gerade, d.h.
 VSTENO nimmt den Drehpunkt von 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 und den Drehpunkt von 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

, zieht eine Gerade zwischen den beiden und passt den Endpunkt von 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 und den Anfangspunkt von 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 so an, dass sie auf dieser Geraden liegen.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Early exit und late entry
\end_layout

\begin_layout Standard
Und es geht weiter mit einem neuen Punkttyp: dem early exit point oder dem
 vorzeitigen Endpunkt.
 Dieser wird im System Stolze-Schrey für Zeichen mit Unterschlaufe verwendet,
 die am Ende eines Wortes ohne Schlaufe geschrieben werden.
 Beispiele sind hier die Zeichen 
\begin_inset Quotes eld
\end_inset

NG
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

NS
\begin_inset Quotes erd
\end_inset

 (als einstufige Variante) oder 
\begin_inset Quotes eld
\end_inset

SCH
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

SCHW
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

ZW
\begin_inset Quotes erd
\end_inset

 usw.
 (als zweistufige Variante).
 Der early exit point bedeutet also nichts anderes, als dass das Zeichen
 an diesem Punkt 
\begin_inset Quotes eld
\end_inset

vorzeitig
\begin_inset Quotes erd
\end_inset

 endet, wenn es am Ende eines Wortes steht.
 Hier das Zeichen 
\begin_inset Quotes eld
\end_inset

NS
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
"NS" => { /*data*/ 0.75, 5, 0.5, 1, 1.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 3.75, 8.5, 0.5, 2, 2.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 2.65, 10, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 1.75, 9, 0.5, 0, 3.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 1.75, 1, 0.5, 0, 3.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*late entry point*/ 0.75, 0, 0.5, 0, 2.5, 0, 99, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 2.25, 0.5, 0, 1.5, 0, 2, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 1.75, 3, 0.5, 0, 1.0, 0, 1, 0.5 }
\end_layout

\begin_layout Standard
Einen ähnlichen Fall gibt es bei Zeichen, die mit einer Rundung beginnen
 und wo in Verbindung mit anderen Zeichen ein Teil der Rundung zweimal gezeichne
t wird.
 Nehmen wir als Beispiel das Zeichen 
\begin_inset Quotes eld
\end_inset

V
\begin_inset Quotes erd
\end_inset

: In Zusammensetzungen wie 
\begin_inset Quotes eld
\end_inset

davon
\begin_inset Quotes erd
\end_inset

 - wo das Zeichen vom Fusspunkt der Kürzung 
\begin_inset Quotes eld
\end_inset

DA
\begin_inset Quotes erd
\end_inset

 - von unten her verbunden werden muss, wird der oberste Teil des Zeichens
 
\begin_inset Quotes eld
\end_inset

V
\begin_inset Quotes erd
\end_inset

 zweimal gezeichnet (einmal beim Hochfahren, einmal beim Herunterfahren).
 Dies ist in diesem Fall - d.h.
 wenn das Zeichen verbunden ist - richtig und somit kein Problem.
 Nehmen wir nun aber nur die Kürzung 
\begin_inset Quotes eld
\end_inset

VON
\begin_inset Quotes erd
\end_inset

 (welche dem Zeichen 
\begin_inset Quotes eld
\end_inset

V
\begin_inset Quotes erd
\end_inset

 alleine entspricht).
 Auch hier würde VSTENO den obersten Teil des Zeichens zweimal zeichnen
 - was nicht schön ist (wenn die beiden Kurven beim Hoch- und Herunterfahren
 nicht exakt übereinander liegen, dann erscheint das Kopfende dunkler).
 Deshalb existiert auch hier der late entry point oder eben der 
\begin_inset Quotes eld
\end_inset

späte Eintrittspunkt
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
"V" => { /*data*/ 1, 16, 0.5, 1, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 2, 18, 0.6, 2, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*late entry point*/ 6, 20, 0, 98, 0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 2, 18, 0.6, 0, 1.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 1, 16, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 14, 0.5, 0, 3.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 5, 0.5, 0, 3.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 1, 2, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 3, 0, 0.5, 4, 1.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 3, 0, 0.5, 0, 1.5, 0, 2, 0.5, 
\end_layout

\begin_layout LyX-Code
/**/ 5, 2, 0.5, 0, 1.0, 0, 1, 0.5 }
\end_layout

\begin_layout Standard
Der Wert 98 bedeutet hier also, dass die Punkte 1 und 2 nicht gezeichnet
 werden, wenn das Zeichen am Anfang steht.
 In diesem Fall wird der late entry point (also der 3.
 Punkt) als Anfangspunkt gesetzt.
\end_layout

\begin_layout Subsection*
Header
\end_layout

\begin_layout Standard
Bei all unseren Definitionen haben wir bis jetzt den Header der Einfachheit
 halber weggelassen.
 Dieser enthält Informationen, die das ganze Zeichen (also nicht nur einzelne
 Punkte) betreffen.
 In der aktuellen Version ist der Header 24 Felder lang, welche folgende
 Bedeutungen haben:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="25" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bedeutung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
token width (Zeichenbreite)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
delta-y before (Delta-Y vorher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
delta-y after (Delta-Y nachher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tension before (Spannung vorher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
additional x before (zusätzliches x vorher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
additional x after (zusätzliches x nachher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
additional delta-y (zusätzliches Delta-Y)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*rev1: 2nd parallel rotating axis
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Angaben mit Stern * sind nur für die SE1 rev1 gültig und wurden in Version
 0.1rc deaktiviert.
 Sie werden hier nur der Vollständigkeit halber erwähnt.
 Die erste Rotationsachse entspricht der Hauptachse, die durch den Ursprung
 (0,0) geht.
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*rev1: 3rd parallel rotating axis
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*rev1: 4th parallel rotating axis
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nicht verwendet
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nicht verwendet
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
token type (Zeichentyp)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
inconditional delta-y before (unbedingtes Delta-Y vorher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
inconditional delta-y after (unbedingtes Delta-Y nachher)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
alternative exit point x (alternativer Endpunkt x)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
alternative exit point y (alternativer Endpunkt y)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exit point to use (zu verwendender Endpunkt)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
interpretation y coordinates (Interpretation y-Koordinaten)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vertical (vertikale Höher-/Tieferstellung)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
distance (horizontaler Abstand)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
shadowed (schattiert)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
don't connect (nicht verbinden)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nicht verwendet
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Beachten Sie bitte, dass wir die Feldnummer als Offset bezeichnen und mit
 der Nummerierung bei 0 beginnen.
 Auch hier werden wir wieder Schritt für Schritt vorgehen und die Bedeutung
 der einzelnen Werte anhand von Beispielen zeigen.
 Wir beginnen mit den Feldern 19-21, welche die Höher-/Tieferstellung (Offset
 19), den horizontalen Abstand (Offset 20) und die Schattierung (Offset
 21) betreffen.
\end_layout

\begin_layout Subsection*
Vokale
\end_layout

\begin_layout Standard
Diese drei Felder können wir verwenden, um im System Stolze-Schrey die Vokale
 zu definieren.
 Im Unterschied zu Konsonantenzeichen entsprechen diese nämlich keinen real
 geschriebenen Zeichen, sondern werden durch die Art, wie Zeichen verbunden
 werden, dargestellt.
 Mit anderen Worten: Ein Vokal entspricht im System Stolze-Schrey einem
 
\begin_inset Quotes eld
\end_inset

leeren Zeichen
\begin_inset Quotes erd
\end_inset

 (= keine Punkte im Data-Bereich), das nur aus einem Header besteht.
 Als Beispiel der Vokal 
\begin_inset Quotes eld
\end_inset

E
\begin_inset Quotes erd
\end_inset

, der aus einer weiten Verbindung ohne Hochstellung und ohne Schattierung
 besteht:
\end_layout

\begin_layout LyX-Code
"E" => { /*header0-7*/ 0, 0, 0, 0, 0, 0, 0, "", 
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 2, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0,0,0,"no","wide","no",0,0, 
\end_layout

\begin_layout LyX-Code
/*data*/ }
\end_layout

\begin_layout Standard
Zunächst einmal weisen wir auf den Offset 12 hin, der dem Zeichentyp (token
 type) entspricht.
 Hier wurde der Wert 2 gesetzt, der 
\begin_inset Quotes eld
\end_inset

virtuelles Zeichen
\begin_inset Quotes erd
\end_inset

 bedeutet (dagegen bezeichnet der Wert 0 ein 
\begin_inset Quotes eld
\end_inset

normales
\begin_inset Quotes erd
\end_inset

 und der Wert 1 ein 
\begin_inset Quotes eld
\end_inset

unbedingt schattiertes
\begin_inset Quotes erd
\end_inset

 Zeichen, wie wir später sehen werden).
 
\begin_inset Quotes eld
\end_inset

Virtuell
\begin_inset Quotes erd
\end_inset

 bedeutet in diesem Fall nichts anderes, als dass das Zeichen keine grafische
 Entsprechung (als 
\begin_inset Quotes eld
\end_inset

Punktezeichnung
\begin_inset Quotes erd
\end_inset

) hat, sondern nur aus einem Header besteht.
\end_layout

\begin_layout Standard
Weiter weisen wir im Header-Untertupel 16-23 auf die Werte 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 (Offset 19), 
\begin_inset Quotes eld
\end_inset

wide
\begin_inset Quotes erd
\end_inset

 (Offset 20) und 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 (Offset 21) hin.
 Diese entsprechen somit der Angabe 
\begin_inset Quotes eld
\end_inset

keine Höher-/Tieferstellung
\begin_inset Quotes erd
\end_inset

 (also horizontale Verbindung), 
\begin_inset Quotes eld
\end_inset

weite Verbindung
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

nicht schattiert
\begin_inset Quotes erd
\end_inset

.
 Anbei die Liste der Werte, die Felder annehmen können:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wert & Bedeutung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 (horizontale Verbindung), 
\begin_inset Quotes eld
\end_inset

up
\begin_inset Quotes erd
\end_inset

 (Höherstellung), 
\begin_inset Quotes eld
\end_inset

down
\begin_inset Quotes erd
\end_inset

 (Tieferstellung)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

wide
\begin_inset Quotes erd
\end_inset

 (weite Verbindung), 
\begin_inset Quotes eld
\end_inset

narrow
\begin_inset Quotes erd
\end_inset

 (enge Verbindung), 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 (kein Abstand)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 (keine Schattierung), 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

 (Schattierung)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Ein weiteres Beispiel: Der Diphtong 
\begin_inset Quotes eld
\end_inset

AU
\begin_inset Quotes erd
\end_inset

 wird als 
\begin_inset Quotes eld
\end_inset

enge Verbindung
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

hochgestellt
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

schattiert
\begin_inset Quotes erd
\end_inset

 definiert:
\end_layout

\begin_layout LyX-Code
"AU" => { /*header0-7*/ 0, 0, 0, 0, 0, 0, 0, "", 
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 2, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0,0,0,"up","narrow","yes",0,0, 
\end_layout

\begin_layout LyX-Code
/*data*/ } 
\end_layout

\begin_layout Standard
Bitte beachten Sie, dass in beiden Fällen der Data-Bereich leer bleibt:
 Die Vokale enhalten also wie bereits erwähnt keine Punkte!
\end_layout

\begin_layout Subsection*
Hochstellung
\end_layout

\begin_layout Standard
Mit den Offsets 19-21 im Header können wir also die Verbindung von Zeichen
 und insbesondere deren Hoch- oder Tiefstellung (Offset 19) bestimmen.
 Allerdings bedeutet 
\begin_inset Quotes eld
\end_inset

Hochstellung
\begin_inset Quotes erd
\end_inset

 nicht in allen Fällen dasselbe: Bei den meisten Zeichen im System Stolze-Schrey
 bedeutet es, dass das Folgezeichen eine halbe Stufe höher (d.h.
 dass sich die y-Koordinate sich um den Wert 5 erhöht) geschrieben wird.
 Es gibt jedoch auch Zeichen - z.B.
 
\begin_inset Quotes eld
\end_inset

SCH
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Z
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

ZW
\begin_inset Quotes erd
\end_inset

 etc.
 -, welche eine ganze Stufe (als 10 Punkte) höher geschrieben werden müssen.
 Ausserdem unterscheiden sich diese Zeichen darin, wie ein weiteres Folgezeichen
 angeschlossen wird: Bei den meisten Zeichen werden weitere Folgezeichen
 ebenfalls eine halbe Stufe höher geschrieben, bei 
\begin_inset Quotes eld
\end_inset

SCH
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Z
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

ZW
\begin_inset Quotes erd
\end_inset

 etc.
 hingegen, muss nach der Hochstellung wieder zur Grundlinie zurückgekehrt
 werden.
 All dies kann im Header mit den Offsets 1 (delta-y before) und 2 (delta-y
 after) definiert werden:
\end_layout

\begin_layout LyX-Code
"SCH" => { /*header0-7*/ 9, 1,-1, 0.5, 0, 0, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data*/ /*...*/ }
\end_layout

\begin_layout Standard
Hier wird also im Offset 1 ein delta-y before mit dem Wert 1 (= 1 Stufe
 höher) und im Offset 2 ein delta-y after mit dem Wert -1 (= eine Stufe
 tiefer) definiert.
 Mit anderen Worten: Nachdem das Zeichen 
\begin_inset Quotes eld
\end_inset

SCH
\begin_inset Quotes erd
\end_inset

 eine Stufe höher an das Vorzeichen angeschlossen wird, wird die Schreiblinie
 danach wieder um den Wert -1 auf die ursprüngliche Linie zurückgesetzt.
 Im Vergleich dazu das Zeichen 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
"B" => { /*header0-7*/ 5, 0.5, 0, 0, 1, 1, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data*/ /*...*/ }
\end_layout

\begin_layout Standard
Hier wird die Schreiblinie vor dem Zeichen um eine halbe Stufe (Wert 0.5)
 erhöht und danach gleich belassen (der Wert 0 bedeutet, dass keine Veränderung
 vorgenommen wird).
\end_layout

\begin_layout Subsection*
Zeichenbreite
\end_layout

\begin_layout Standard
Bis jetzt haben wir Zeichen definiert, ohne uns Gedanken über deren Breite
 zu machen.
 Das sollten wir nun tun, denn es ist offensichtlich, dass jedes Zeichen
 eine Breite hat bzw.
 haben muss, um eine vernünftige und saubere Aneinanderreihung zu erreichen.
 Betrachten wir zum Beispiel noch einmal unser allererstes Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

, das aus einem einzigen senkrechten Strich besteht:
\end_layout

\begin_layout LyX-Code
"T" => { /*header0-7*/ 6, 0.5, 0, 0, 3, 3, 0, "", 
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 20, 0, 1, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 0, 0, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Da dieses Zeichen nur aus einem senkrechten Strich besteht, der in einer
 bestimmten Dicke gezeichnet wird, ist es per se nur so breit wie der Strich
 dick ist.
 Das macht aber wenig Sinn, da das Zeichen so unmittelbar auf ein vorhergehendes
 oder ein nachfolgendes Zeichen angeschlossen wird.
 Selbst bei 
\begin_inset Quotes eld
\end_inset

engem
\begin_inset Quotes erd
\end_inset

 bzw.
 
\begin_inset Quotes eld
\end_inset

keinem
\begin_inset Quotes erd
\end_inset

 Abstand zwischen den Zeichen, sollten sie ein Minimum voneinander entfernt
 sein.
 Dies können wir durch die Werte in den Offsets 4 (additional x before)
 und Offset 5 (additional x after), sowie dem Offset 1 (token width) erreichen.
 Der Wert in Offset 4 entspricht dabei dem 
\begin_inset Quotes eld
\end_inset

linken
\begin_inset Quotes erd
\end_inset

, Offset 5 dem 
\begin_inset Quotes eld
\end_inset

rechten
\begin_inset Quotes erd
\end_inset

 Leerraum, der auf das Zeichen folgt.
 Im obigen Beispiel wurde hier 3 Pixel für den linken und 3 Pixel für den
 rechten Abstand definiert, was für das Zeichen eine Gesamtbreite von 6
 Pixeln (Offset 0) ergibt.
\end_layout

\begin_layout Standard
Bitte beachten Sie, dass die Werte in den Offsets 4 und 5 zusätzlich zur
 jener Breite addiert werden muss, welche sich aus den Punkten, die das
 Zeichen definieren, ergibt:
\end_layout

\begin_layout LyX-Code
"Y" => { /*header0-7*/ 14, 0.5, 0, 0, 2, 2, 0, ""
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 10, 0, 1, 3.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 10, 0, 0, 0, 1.0, 0, 1, 0 /**/ } 
\end_layout

\begin_layout Standard
Das Zeichen 
\begin_inset Quotes eld
\end_inset

Y
\begin_inset Quotes erd
\end_inset

 - in Stolze-Schrey als gerader Strich von links oben P1(0,10) nach rechts
 unten P2(10,0) definiert, ist - rein von den Punkten her - bereits 10 Pixel
 breit.
 Wird nun in Offsets 4 und 5 ein zusätzlicher Leerabstand links und rechts
 von 2 Pixeln (also insgesamt 4 Pixel) definiert, so ist das Zeichen insgesamt
 14 Pixel breit.
\end_layout

\begin_layout Standard
Es empfiehlt sich, beim Erstellen neuer Zeichen, mit diesen Möglichkeiten
 etwas herumzuspielen, um optimale Werte zu finden, die in Verbindungen
 mit anderen Zeichen am besten aussehen
\begin_inset Foot
status open

\begin_layout Plain Layout
Im Laufe der Entwicklung der SE1 hat sich gezeigt, dass dieses Konzept der
 fixen Abstände (mit Vor/Nachbreite der Zeichen) ungenügend ist.
 Es ist zwar sinnvoll für Zeichen, die effektiven einen fixen Abstand haben
 (wie z.B.
 Buchstaben in handschriftlicher Blockschrift, die mit VSTENO ebenfalls
 umgesetzt werden können).
 Stenografie-Zeichen benötigen jedoch je nach Zeichen und Verbindung (eng/weit,
 hoch/tief) verschiedene Abstände.
 Dies wurde gelöst, indem für Stenografie-Zeichen prinzipiell nur noch eine
 
\begin_inset Quotes eld
\end_inset

Nettobreite
\begin_inset Quotes erd
\end_inset

 (Offset 0) und keine Vor/Nachbreite (Offsets 4/5) mehr angegeben wird.
 Die individuellen Abstände werden danach via REGEX-Regeln eingesetzt.
 Damit dies funktionierte, musste ein weiterer Zeichentyp (Offset 12 im
 Header) definiert werden.
 Der Wert 3 in Offset 12 bedeutet somit 
\begin_inset Quotes eld
\end_inset

spacer
\begin_inset Quotes erd
\end_inset

: VSTENO wird in diesem Fall nur die Breite (Offset 0) dieses Zeichens berücksic
htigen.
 Zu sehen ist das in den Spacer-Zeichen #1, #2, #3, ..., #9 in https://github.com/ma
rcelmaci/vsteno/blob/master/ling/grundschrift_stolze_schrey_redesign.txt.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Schreiblinienverschiebung
\end_layout

\begin_layout Standard
Es gibt auch Zeichen, bei welchen sich die Schreiblinie in jedem Fall -
 also unabhängig von Hoch- oder Tiefstellung - verschiebt.
 Im System Stolze-Schrey ist dies z.B.
 bei 
\begin_inset Quotes eld
\end_inset

RR
\begin_inset Quotes erd
\end_inset

 der Fall: Hier müssen Folgezeichen eine Stufe höher angeschlossen werden.
 Wir erreichen dies durch Setzen der Offsets 13 (inconditional y before)
 und 14 (inconditional y after):
\end_layout

\begin_layout LyX-Code
"RR" => { /*header0-7*/ 10, 0.5, 0, 0.5, 0, 0, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 1, 7.75, 0.5, 1, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 5, 10, 0.7, 0, 3.0, 0, 0, 0.8, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 10, 5, 0.8, 0, 3.0, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*p4*/ 5, 0, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p5*/ 0, 5, 0.5, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p6*/ 1, 7.75, 0.5, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p7*/ 5, 10, 0.5, 0, 1.0, 0, 1, 0.5, /**/ }
\end_layout

\begin_layout Standard
In diesem Zeichen sehen wir gleich zwei Phänomene: (1) Die Schreiblinie
 verschiebt sich nach dem Zeichen in Normalstellung um 1 Stufe nach oben
 (Offset 14 mit Wert 1) und (2) Wird das Zeichen höher gestellt, so beträgt
 die Höherstellung eine halbe Stufe (Wert 0.5 im Offset 1) und die Schreiblinie
 liegt 1.5 (d.h.
 die Summe aus Offset 1 und Offset 14) höher!
\begin_inset Foot
status open

\begin_layout Plain Layout
Falsch wäre hier, die Schreiblinienverschiebung in Offset 3 - z.B.
 mit dem Wert 0.5 - zu definieren: Dies würde zwar für höher gestellte 
\begin_inset Quotes eld
\end_inset

RR
\begin_inset Quotes erd
\end_inset

 gelten, normal gestellte 
\begin_inset Quotes eld
\end_inset

RR
\begin_inset Quotes erd
\end_inset

 würden jedoch falsch geschrieben, da sich bei 
\begin_inset Quotes eld
\end_inset

RR
\begin_inset Quotes erd
\end_inset

 die Schreibline in jedem Fall um eine Stufe erhöht!
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Unbedingte Schattierung
\end_layout

\begin_layout Standard
Und weiter geht's mit Besonderheiten des Systems Stolze-Schrey.
 Nebst allen präsentierten Anforderungen an stenografische Zeichen, gibt
 es auch Abkürzungen, in jedem Fall eine Schattierung verlangen.
 Ein Beispiel dafür ist die Abkürzung 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

, welche aus einem höher gestellt, schattierten 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

 besteht:
\end_layout

\begin_layout LyX-Code
"AUCH" => { /*header0-7*/ 5, 1,-1, 0.5, 0.5, 0.5, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 1, 1, 1, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 2.5, 10, 0.7, 2, 2.5, 0, 0, 0.8, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 5, 7, 0.8, 0, 3.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p4*/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p5*/ 3, -10, 0.5, 0, 2, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p6*/ 1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p7*/ 0, -7, 0.5, 0, 1.0, 0, 2, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p8*/ 5, 0, 0.5, 0, 1.0, 0, 1, 0.5 }
\end_layout

\begin_layout Standard
Definiert wird die Schattierung hier im Offset 12 durch den Wert 1.
 Wie wir bereits bei den Vokalen gesehen haben, steht der Offset 12 für
 den Zeichentyp (token type).
 Bei Vokalen haben wir hier den Wert 2 (virtuelles Zeichen) gesetzt, für
 alle anderen Zeichen den Wert 0 (normales Zeichen).
 Der Wert 1 nun bedeutet für VSTENO, dass das Zeichen in jedem Fall schattiert
 werden soll (also unabhängig davon, welcher Vokal oder welches Zeichen
 vorausgeht).
\end_layout

\begin_layout Standard
Bitte beachten Sie in diesem Zeichen 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

 eine weitere Besonderheit: Da 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

 einem hoch gestellten 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

 entspricht, konnte hier einfach die Definition von 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

 kopiert und in den Offsets 13 und 14 (inconditional y before/after), die
 wir bereits gesehen haben, der Wert +1 gesetzt werden (was bedeutet, dass
 das ursprüngliche Zeichen 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

 einfach um eine Stufe nach oben verschoben wird).
 Definitionen dieser Art sind sehr effizient, da man bereits definierte
 Zeichen wiederverwenden (und wie hier für eine Kürzung gebrauchen) kann.
 Wir werden später noch weitere Möglichkeiten sehen, um aus bereits definierten
 Zeichen zusätzliche - kombinierte oder verschobene - Zeichen zu erstellen.
\end_layout

\begin_layout Standard
Das Kopieren eines Zeichens hat aber auch den Nachteil, dass die Definition
 u.U.
 nicht optimal ist: Im Falle von 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

 verwendet das urprüngliche Zeichen 
\begin_inset Quotes eld
\end_inset

CH
\begin_inset Quotes erd
\end_inset

 z.B.
 einen early exit point in Punkt P6 (Wert 99 an vorletzter Stelle im Datentupel).
 Da die Kürzung 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

 immer alleine steht, kann man den early exit point auch durch einen normalen
 Endpunkt ersetzen und die Punkte P7 und P8 löschen:
\end_layout

\begin_layout LyX-Code
"AUCH" => { /*header0-7*/ 5, 1,-1, 0.5, 0.5, 0.5, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 1, 1, 1, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 2.5, 10, 0.7, 2, 2.5, 0, 0, 0.8, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 5, 7, 0.8, 0, 3.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p4*/ 5, -8, 0.5, 0, 2.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p5*/ 3, -10, 0.5, 0, 2, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p6*/ 1.5, -9, 0.5, 0, 1.5, 0, 1, 0.5 }
\end_layout

\begin_layout Standard
Eine letzte Bemerkung zur Kürzung 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

: Es ist VSTENO vollkommen egal, ob Sie nun eine Kürzung oder ein Zeichen
 definieren.
 VSTENO betrachtet alles, was gezeichnet werden kann, als Zeichen.
 Die Namen der Zeichen können einen oder beliebig viele Buchstaben lang
 sein (auch die Kürzung 
\begin_inset Quotes eld
\end_inset

VIELLEICHT
\begin_inset Quotes erd
\end_inset

 wird - obwohl es in der Langschrift 10 Buchstaben lang ist - von VSTENO
 als 1 Zeichen betrachtet).
 Auch das Aneinanderreihen von Buchstaben und/oder Kürzungen macht für VSTENO
 keinen Unterschied: Das Wort 
\begin_inset Quotes eld
\end_inset

dafür
\begin_inset Quotes erd
\end_inset

 zum Beispiel wird von VSTENO als zwei Kürzungen betrachtet, welche als
 zwei Zeichen (schattiertes D + normales F) aneinandergereiht wird.
 Wir werden später bei den Regeln sehen, wie Kürzungen - und die Übertragung
 derselben aus der Langschrift - definiert werden können.
\end_layout

\begin_layout Subsection*
Alternative exit points
\end_layout

\begin_layout Standard
Man würde nun vielleicht denken, dass wir langsam alle Besonderheiten stenografi
scher Zeichen abgedeckt haben, aber dem ist nicht so: Es gibt weitere Zeichen,
 die nach Spezialfunktionen verlangen und dazu gehören jene, welche Folgezeichen
 auf zwei verschiedene Arten anschliessen können: entweder (1) 
\begin_inset Quotes eld
\end_inset

normal
\begin_inset Quotes erd
\end_inset

: also auf der gleichen Schreiblinie wie bei 95% der Fälle) oder aber (2)
 
\begin_inset Quotes eld
\end_inset

anders
\begin_inset Quotes erd
\end_inset

: in ganz wenigen Fällen.
 Zu diesen Zeichen gehört z.B.
 das vokalische R 
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

, welches Folgezeichen normalerweise auf der Grundlinie anschliesst (vgl.
 
\begin_inset Quotes eld
\end_inset

gern
\begin_inset Quotes erd
\end_inset

: die Zeichen r und n stehen auf der gleichen Linie), die Endungskürzungen
 
\begin_inset Quotes eld
\end_inset

(D)EN
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

(D)EM
\begin_inset Quotes erd
\end_inset

 hingegen am oberen Ende anschliesst (vgl.
 
\begin_inset Quotes eld
\end_inset

äusseren
\begin_inset Quotes erd
\end_inset

: das Zeichen r steht auf der Grundlinie, die Endung en hingegen eine halbe
 Stufe höher.
 Dies können wir mit dem Offset 16 alternative exit point (alternativer
 Endpunkt) im Header definieren
\begin_inset Foot
status open

\begin_layout Plain Layout
Der Einfachkeit halber werden in der Definition die intermediate shadow
 points weggelassen.
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
"VR" => { /*header0-7*/ 5, 0.5, 0, 0.5, 2, 2, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 2.5, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 5, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 2.5, 5, 0.5, 1, 1.5, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 5, 2.5, 0.7, 0, 3.0, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 2.5, 0, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p4*/ 0, 2.5, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p5*/ 2.5, 5, 0.5, 0, 1.0, 0, 1, 0.0 }
\end_layout

\begin_layout Standard
Wie wir sehen können, enthält der Header im Offset 16 den Wert 5.
 Dies bedeutet nun, dass der 
\begin_inset Quotes eld
\end_inset

alternative Endpunkt
\begin_inset Quotes erd
\end_inset

 auf der y-Achse 5 Pixel höher liegen soll.
 Dies entspricht dem y-Wert des letzten Punktes P5 - also dem Kopfende des
 Zeichens 
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

.
 Die Definition einer x-Koordinate ist nicht nötig, da diese automatisch
 beim Aneinanderfügen der Zeichen errechnet wird.
 
\end_layout

\begin_layout Standard
Die Frage ist nun: Wann kommt dieser alternative Endpunkt zum Einsatz.
 Hierzu sehen wir uns die Definition der Endung 
\begin_inset Quotes eld
\end_inset

EN
\begin_inset Quotes erd
\end_inset

 an:
\end_layout

\begin_layout LyX-Code
"EN" => { /*header0-7*/ 5, 0, 0, 0.5, 0, 0, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 1, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data*/ 5, 0, 0, 1, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/**/ 5, 0, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Der entscheidende Wert steht hier im Offset 17 des Headers: Dieser Wert
 entspricht dem exit point to use (zu verwendender Endpunkt).
 VSTENO handhabt dies nun folgendermassen: Verlangt ein Zeichen - wie in
 diesem Fall die Kürzung 
\begin_inset Quotes eld
\end_inset

EN
\begin_inset Quotes erd
\end_inset

 - nach einem alternativen Endpunkt, so prüft VSTENO, ob das vorhergehende
 Zeichen einen solchen definiert.
 Ist dies der Fall (wie beim Zeichen 
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

), dann wird er verwendet.
 Bietet das vorhergehende Zeichen keinen alternativen Endpunkt an, so wird
 der normale Endpunkt verwendet (was das richtige Ergebnis liefert, vgl.
 z.B.
 
\begin_inset Quotes eld
\end_inset

laufen
\begin_inset Quotes erd
\end_inset

: hier wird die Endung 
\begin_inset Quotes eld
\end_inset

EN
\begin_inset Quotes erd
\end_inset

 auf der Grundlinie angeschlossen).
\end_layout

\begin_layout Standard
Bietet ein Zeichen einen alternativen Endpunkt an und das Folgezeichen verlangt
 nicht danach, so wird der alternative Endpunkt ignoriert.
\end_layout

\begin_layout Subsection*
Absolute Koordinaten
\end_layout

\begin_layout Standard
Eine weitere Frage betrifft die Koordinaten: Wie werden diese von VSTENO
 gehandhabt? Prinzipiell können diese als absolute oder relative Werte betrachte
t werden.
 Deshalb muss VSTENO angegeben werden, wie es die Koordinaten verrechnen
 soll.
 Dies geschieht im Offset 18, der für die 
\begin_inset Quotes eld
\end_inset

Interpretation y-Koordinate
\begin_inset Quotes erd
\end_inset

 steht.
 Das Feld kann zwei Werte annehmen:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wert
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bedeutung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y-Koordinaten sind relativ (standard)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y-Koordinaten sind absolut
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Diese Einstellung tut genau das, was der Name sagt: Sämtliche Zeichen, die
 wir bis jetzt definiert haben, verwenden relative Koordinaten (Standardeinstell
ung, Wert 0), was bedeutet, dass die Zeichen bei Höher- oder Tieferstellung
 automatisch 
\begin_inset Quotes eld
\end_inset

mitverschoben
\begin_inset Quotes erd
\end_inset

 werden.
 Wird hier der Wert 1 gesetzt, so wird die y-Koordinaten in den Punkten
 absolut gesetzt.
 Dies kann verwendet werden, wenn Zeichen unter keinen Umständen verschoben
 werden sollen
\begin_inset Foot
status open

\begin_layout Plain Layout
Wir fügen hier kein Beispiel an, weil das Phänomen in der Grundschrift kaum
 vorkommt.
 In der Eilschrift hingegen gibt es die Kürzung 
\begin_inset Quotes eld
\end_inset

Ding(e)
\begin_inset Quotes erd
\end_inset

, welche dem Zeichen 
\begin_inset Quotes eld
\end_inset

NG
\begin_inset Quotes erd
\end_inset

 in unschattierter Höherstellung entspricht.
 Dieses Zeichen muss unbedingt abgetrennt und in Höherstellung geschrieben
 werden.
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Unverbundene Zeichen
\end_layout

\begin_layout Standard
Zeichen können verbunden (mit Vorzeichen) oder unverbunden sein.
 Dies trifft zum Beispiel auf Zahlen zu.
 Diese werden - auch in einem stenografischen Text - als normale Zahlen
 in Blockschrift geschrieben (und dürfen somit nicht an das vorangehende
 Zeichen angeschlossen werden).
 Als Beispiel hier die Definition der Zahl 1 (die wir wiederum deshalb wählen,
 weil sie nur aus zwei geraden Strichen besteht und damit sehr einfach ist):
\end_layout

\begin_layout LyX-Code
"1" => { /*header0-7*/ 7, 0, 0, 0, 4, 0, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 1, 0, 0, 0, 1, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 11, 0, 1, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 7, 19, 0, 0, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 7, 1, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Der Wert 1 im Offset 22 bedeutet also 
\begin_inset Quotes eld
\end_inset

dieses Zeichen nicht verbinden
\begin_inset Quotes erd
\end_inset

 (der Wert 0 - den wir bis jetzt immer verwendet haben - bedeutet hingegen
 
\begin_inset Quotes eld
\end_inset

dieses Zeichen verbinden
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Standard
Alternativ können Sie auch das Feld dr (draw) im Datentupel des ersten Punktes
 P1 auf den Wert 5 (= don't connect) setzen:
\end_layout

\begin_layout LyX-Code
"1" => { /*header0-7*/ 7, 0, 0, 0, 4, 0, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 1, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 11, 0, 1, 1.0, 5, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 7, 19, 0, 0, 1.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 7, 1, 0, 0, 1.0, 0, 1, 0 }
\end_layout

\begin_layout Standard
Zu guter Letzt: Wenn Sie auf Nummer sicher gehen wollen, können Sie sowohl
 1 im Header also auch 5 im draw-Feld des Punktes eintragen ...
 ;-)
\begin_inset Foot
status open

\begin_layout Plain Layout
Zu bevorzugen ist in diesem Fall die Variante 
\begin_inset Quotes eld
\end_inset

Header
\begin_inset Quotes erd
\end_inset

: Es handelt sich hier ja um eine Information, die das ganze Zeichen betrifft.
 Das draw-Feld des Punktes hingegen sollte verwendet werden, wenn INNERHALB
 eines Zeichens gewisse Punkte nicht miteinander verbunden werden.
 WICHTIGER HINWEIS: Mit der SE1 rev1 wurde das dr-Feld neu definiert: Grundsätzl
ich wurde der Integer-Wert innerhalb des 8er-Datentupels umgedeutet.
 Der alte dr-Wert der SE1 rev0 entspricht nun den bits 0-3.
 Die höheren Bits (4-15) werden dazu verwendet, Informationen bzgl.
 orthogonal und proportional Knots (sowie deren dazugehörigen parallelen
 Rotationsachsen) unterzubringen.
 Diese Lösung war deshalb nötig, weil innerhalb des 8er-Tupels nirgendwo
 mehr Platz war, um weitere Informationen unterzubringen.
 Da die Rückwärtskompatibilität aufgrund der Komplexität der SE1 (in der
 zusätzlichen Interaktion mit VPAINT) nur teilweise erreicht wurde, bleiben
 diese Funktionen in der Version 0.1rc deaktiviert (sie werden hier somit
 nur der Vollständigkeit halber erwähnt).
 Eine genaue Dokumentation der Verwendung der einzelnen dr-Bits findet sich
 als Kommentar im File https://github.com/marcelmaci/vsteno/blob/master/php/se1_b
ackports.php.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Anfangsspannung
\end_layout

\begin_layout Standard
Wie wir gesehen haben, müseen bei Bezier-Kurven für den Anfangs- und Endpunkt
 je zwei Spannungen (tensions) definiert werden: eine Eingans- und eine
 Ausgangsspannung.
 Die Spannungen stehen in den Felder t1 und t2 der 8er-Datentupel: 
\end_layout

\begin_layout LyX-Code
x1, y1, t1, d1, th, dr, d2, t2
\end_layout

\begin_layout Standard
Hierbei bezeichnet t1 die Ausggangsspannung des Punktes und t2 die Eingangsspann
ung des folgenden Punktes.
 Logischerweise fehlt bei dieser Art der Datenspeicherung die Eingangsspannung
 des ersten Punktes.
 Um diesen Mangel zu beheben wird deshalb die Eingangsspannung des allerersten
 Punktes in den Offset 3 des Headers geschrieben.
\end_layout

\begin_layout Standard
Die Standardregel für diesen Wert lautet: Zeichen, die mit einer Rundung
 beginnen (z.B.
 
\begin_inset Quotes eld
\end_inset

M
\begin_inset Quotes erd
\end_inset

), sollten hier den Wert 0.5 (oder ähnlich) enthalten, Zeichen die spitz
 beginnen (z.B.
 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

), den Wert 0.
\end_layout

\begin_layout Subsection*
Zeichenteile
\end_layout

\begin_layout Standard
Ursprunglich konnten in der SE1 nur einzelne Zeichen definiert werden.
 Es kann jedoch auch Sinn machen, Zeichen als eine Folge (Aneinanderreihung)
 von einzelnen (und für verschiedene Zeichen verwendbare) Teile zu definieren.
 Dies wird erreicht, indem im Header im Offset 12 (Zeichentyp) der Wert
 4 gesetzt wird: Die nachfolgenden Daten werden dann als 
\begin_inset Quotes eld
\end_inset

Zeichenteile
\begin_inset Quotes erd
\end_inset

 betrachtet.
 Zeichenteile unterscheiden sich von Zeichen dadurch, dass sie miteinander
 verbunden (joined) werden können.
\end_layout

\begin_layout Standard
Nehmen wir z.B.
 das Zeichen SP in Stolze-Schrey: Wir könnten dieses als Zeichen mit drei
 Einzelteilen betrachten: SP1 = runder Anfangsbogen, SP2 = gerader Strich
 (direkt auf den Bogen folgend) und SP3 = runder Endbogen (direkt auf den
 geraden Strich folgend).
 Wenn wir diese Bestandteile nun als 
\begin_inset Quotes eld
\end_inset

Teile
\begin_inset Quotes erd
\end_inset

 (Wert 4 in Offset 12) definieren, so wird VSTENO sie nahtlos aneinanderfügen.
 Das heisst zum Beispiel, dass der Endpunkt von SP1 und der Anfangspunkt
 von SP2 nur einmal eingefügt wird (da sie zusammenfallen, genau gleich
 bei SP2 und SP3).
 Der verbundene (joined) Punkt zwischen SP1 und SP2 erhält die Eingangsspannung
 von SP1 und die Ausgangsspannung von SP2.
\end_layout

\begin_layout Standard
Der Punkttyp wurde eingefügt in der Annahme, dass sich Zeichenverbindungen
 einfacher und präziser modellieren lassen (indem der Parser z.B.
 genau weiss, wie ein Zeichen endet oder anfängt, da Anfänge und Enden als
 separate Zeichenteile definiert sind).
 Allerdings verkompliziert dies den Parser und es zeigte sich auch, dass
 die Zeichenabstände durch Kategorisierung der Zeichen bereits relativ präzis
 definiert werden können.
\end_layout

\begin_layout Standard
Die Funktion, Zeichenteile aneinanderfügen zu können, kann dennoch für den
 einen oder anderen Fall nützlich sein und wird drum in der SE1 rev0 belassen.
\end_layout

\begin_layout Subsection*
Stenofont
\end_layout

\begin_layout Standard
Nachdem wir nun gesehen haben, wie man ein Zeichen definiert, stellt sich
 die Frage: Wohin mit diesen Informationen, damit VSTENO sich auch verarbeiten
 kann? Betrachten wir noch einmal die komplette Definition des Zeichens
 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Sie weicht von den obigen leicht ab: z.B.
 verwendet sie als Vor/Nachbreite des Zeichens den Wert 0 (da der Abstand
 zwischen den Zeichen später von der Funktion 
\begin_inset Quotes eld
\end_inset

Spacer
\begin_inset Quotes erd
\end_inset

 eingefügt wird)
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
"T" => { /*h*/ 0, 0.5, 0, 0, 0, 0, 0, "", 
\end_layout

\begin_layout LyX-Code
/**/ "", "", "", "", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*d*/ 0, 20, 0, 1, 3, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/**/ 0, 0, 0, 0, 1, 0, 1, 0,
\end_layout

\begin_layout LyX-Code
/**/ 0, 2.5, 0, 4, 1, 0, 0, 0.5 } 
\end_layout

\begin_layout Standard
Diese Definition ist somit eines von vielen Zeichen, die wir zu einem so
 genannten Font (Schriftart) zusammenfassen.
 Ein Font wiederum ist Teil eines so genannten Modells (das einem Stenografische
n System entspricht).
 Ein Modell enthält nebst dem Font (Zeichendefinitionen) auch Regeln (rules),
 die angeben, wie die Zeichen verwendet werden sollen, sowie einen Header
 (Kopf), der allgemeine Informationen zum Modell enthält
\begin_inset Foot
status open

\begin_layout Plain Layout
In der SE1 rev0 ist der Header prinzipiell leer, kann aber dazu verwendet
 werden, Kommentare zum Modell zu machen.
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
VSTENO liest die Angaben für ein Modell - also das Font und die Regeln -
 aus der Datenbank.
 Wenn Sie ein eigenes Font (Modell) erstellen wollen, benötigen Sie deshalb
 als erstes ein Benutzer/innen-Konto.
 Loggen Sie sich mit diesem Konto ein und wählen Sie das Modell custom,
 indem Sie links unten auf den Button standard klicken.
 Zur Erinnerung: Das Modell custom ist jener Datenbank-Eintrag, den Sie
 für Ihr persönliches Modell verwenden können (das Modell Standard hingegen
 kann nicht überschrieben werden).
\end_layout

\begin_layout Standard
Wählen Sie nun, wenn Sie das Modell custom gewählt haben, unter dem Punkt
 Edit (nur sichtbar, wenn Sie eingeloggt sind) jenen Bereich des Modells
 aus, den Sie editieren wollen:
\end_layout

\begin_layout Itemize
Header: Enthält allgemeine Informationen zum Modell.
\end_layout

\begin_layout Itemize
Zeichen: Enhält das Font, bestehend aus Zeichen (base), kombinierten Zeichen
 (combiner) und verschobener Zeichen (shifter).
\end_layout

\begin_layout Itemize
Regeln: Enhält die Rules, also die Regeln mit denen VSTENO einen Langsschrifttex
t in Kurzschrift umschreibt.
\end_layout

\begin_layout Standard
Wenn Sie auf einen dieser Bereich klicken, dann öffnet VSTENO einen Texteditor
 mit den Informationen (Definitionen) aus dem entsprechenden Bereich.
 Wichtig ist nun, dass diese Bereiche in Sections und SubSections eingeteilt
 sind, die mit den Schlüsselwörtern #BeginSection() - #EndSection() und
 #BeginSubSection() - #EndSubSection() abgetrennt sind.
 Innerhalb der Klammern wird angegeben, um welchen Teil des sich handelt:
 
\end_layout

\begin_layout Itemize
Die Sections entsprechen den oben genannten Teilen, also: #BeginSection(header)
 - #EndSection(header); #BeginSection(font) - #EndSection(font); #BeginSection(r
ules) - #EndSection(rules)
\end_layout

\begin_layout Itemize
Die SubSections wiederum bedeutet:
\end_layout

\begin_deeper
\begin_layout Itemize
Innerhalb der Section font: den Teilen base, combiner und shifter, die durch
 #BeginSubSection(base) - #EndSubSection(base); #BeginSubSection(combiner)
 - #EndSubSection(combiner); #BeginSubSection(shifter) - #EndSubSection(shifter)
 abgegrenzt sind.
\end_layout

\begin_layout Itemize
Innerhalb der Section rules: jeweils einer sogenannten function (Funktion),
 also Regelteilen, die als logische Einheiten betrachtet und abgerbeitet
 werden (z.B.
 #BeginSubSection() - #EndSubSection(bundler); für jene Regeln, die mehrere
 Zeichen zu einem Zeichen bündeln).
\end_layout

\end_deeper
\begin_layout Standard
Am besten, Sie werfen einen Blick auf das Modell der Grundschrift Stolze-Schrey
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/marcelmaci/vsteno/blob/master/ling/grundschrift_stolze_schrey_redesign.txt"

\end_inset


\end_layout

\end_inset

.
 Sie sehen dort, wie die Subsections abgetrennt werden.
\end_layout

\begin_layout Standard
Die Zeichendefinitionen, die wir bis jetzt angeschaut haben, gehören somit
 in die Section font, und innerhalb der Section font in die Subsection base
 (da es sich um Basisdefinitionen handelt, also Zeichen, die als Grundzeichen
 definiert werden).
\end_layout

\begin_layout Standard
Wir werden nun sehen, wie diese Grundzeichen mithilfe des Combiners und
 Shifters verwendet werden können, um weitere kombinierte und verschobene
 Zeichen zu generieren.
\end_layout

\begin_layout Subsection*
Kombinierte Zeichen
\end_layout

\begin_layout Standard
Nachdem wir nun die Struktur eines Modells in den grossen Zügen kennen (und
 wissen, wohin wir die Definitionen speichern müssen, damit sie von VSTENO
 verwendet werden können), widmen wir uns noch einmal den Zeichen (also
 dem Font), um ein paar weitere, sehr hilfreiche Funktionen zu erläutern.
\end_layout

\begin_layout Standard
Im System Stolze-Schrey gibt es bekanntlich Zeichen, welche sich mit anderen
 
\begin_inset Quotes eld
\end_inset

kombinieren
\begin_inset Quotes erd
\end_inset

 können.
 Es sind dies vor allem R und L in Verbindung mit verschiedenen Konsonantenzeich
en wie z.B.
 T, B etc.
 Wir könnten nun für diese Kombinationen einfach neue Zeichen definieren.
 D.h.
 in unserer Gesamtliste an Zeichen würden wir zuerst ein Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 definieren, dann ein Zeichen 
\begin_inset Quotes eld
\end_inset

T+R
\begin_inset Quotes erd
\end_inset

 und schliesslich ein Zeichen 
\begin_inset Quotes eld
\end_inset

T+L
\begin_inset Quotes erd
\end_inset

.
 Das Problem hierbei: Wir betreiben damit doppelt und dreifachen Aufwand!
 Es wäre viel effizienter, wenn VSTENO eine Funktion anböte, um gewisse
 Zeichen automatisch zu kombinieren - und eine solche Funktion existiert
 in der Tat: Sie nennt sich TokenCombiner.
\end_layout

\begin_layout Standard
Damit der TokenCombiner zwei Zeichen verbinden kann, muss er jedoch wissen,
 wo (d.h.
 an welcher Stelle) Zeichen miteinander verbunden werden können und auf
 welche Zeichen dies angewandt werden soll.
 VSTENO stellt hier die Funktion so genannter connection points (Verbindungspunk
te) zur Verfügung: Ein Verbindungspunkt ist ein Punkt eines Zeichens, der
 im Datentupel-Feld d1 (= Offset 3) den Wert 4 enthält.
 Als Beispiel zeigen wir wieder unser Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
"T" => { /*header*/ 0, 0.5, 0, 0,4,2.5, 0, "",
\end_layout

\begin_layout LyX-Code
/**/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/**/  0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 20, 0, 1, 3.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*p2*/ 0, 0, 0, 0, 1.0, 0, 1, 0, 
\end_layout

\begin_layout LyX-Code
/*p3*/ 0, 2.5, 0, 4, 1.0, 0, 0, 0.5 } 
\end_layout

\begin_layout Standard
Wir haben hier das Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 also um einen zusätzlichen dritten Punkt P3 ergänzt, welcher die Koordinanten
 (0,2.5) aufweist.
 Dieser Punkt liegt also auf halber Höhe eines halbstufigen Zeichens - und
 ist somit der ideale Ansatzpunkt, um ein 
\begin_inset Quotes eld
\end_inset

R
\begin_inset Quotes erd
\end_inset

 einzufügen.
\end_layout

\begin_layout Standard
Das Problem ist hier jedoch, dass wir nicht die bereits definierten r (d.h.
 
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

AR
\begin_inset Quotes erd
\end_inset

) verwenden können, da diese entweder oben bzw.
 bei 12 Uhr (
\begin_inset Quotes eld
\end_inset

VR
\begin_inset Quotes erd
\end_inset

) oder unten bzw.
 bei 6 Uhr (
\begin_inset Quotes eld
\end_inset

AR
\begin_inset Quotes erd
\end_inset

) beginnen.
 Deshalb definieren wir hier ein spezielles R, welches bei 3 Uhr - also
 rechts auf Viertelhöhe, d.h.
 genau bei der Koordinate (0,2.5) - beginnt:
\end_layout

\begin_layout LyX-Code
"@R" => { /*header0-7*/ 5, 0.5, 0, 0.5, 0, 1, 0, "",
\end_layout

\begin_layout LyX-Code
/*8-15*/ "","","","", 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*16-23*/ 0, 0, 0, 0, 0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
/*data p1*/ 0, 0, 0.7, 0, 1.0, 0, 0, 0.7, 
\end_layout

\begin_layout LyX-Code
/*p2*/ -2, 2, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p3*/ -4, 0, 0.7, 0, 1.0, 0, 0, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p4*/ -2, -2, 0.5, 0, 1.0, 0, 2, 0.5, 
\end_layout

\begin_layout LyX-Code
/*p5*/ 0, 0, 0.5, 0, 1.0, 0, 1, 0.7 }
\end_layout

\begin_layout Standard
Beachten Sie nun, dass wir dieses spezielle R - das wir 
\begin_inset Quotes eld
\end_inset

@R
\begin_inset Quotes erd
\end_inset

 nennen, nun nicht an der Koordinate (0,2.5) - wo das Zeichen letztlich eigentlic
h hinkommen soll -, sondern an der Ursprungskoordinate (0,0) beginnen.
 Mit anderen Worten: Sämtliche Koordinaten dieses 
\begin_inset Quotes eld
\end_inset

Verbundzeichens
\begin_inset Quotes erd
\end_inset

 sind als relativ zu verstehen.
 Beim Einfügen werden hier also jeweils die Koordinaten des connection point
 - im dem Falle also (0,2.5) - dazuaddiert.
 Die Punkte P1-P5 definieren einen Kreis im Gegenuhrzeigersinn, der im Ursprung
 endet (wo er begonnen hat).
 Beachten Sie auch, dass der Punkt P4 als Drehpunkt definiert wird: Dadurch
 wird sichergestellt, dass Zeichen, die tiefergestellt werden (wie z.B.
 in 
\begin_inset Quotes eld
\end_inset

Thron
\begin_inset Quotes erd
\end_inset

) später elegant angeschlossen werden.
\end_layout

\begin_layout Standard
Nachdem wir unsere beiden Einzel-Zeichen nun definiert haben, brauchen wir
 VSTENO nur noch zu sagen, dass wir die Zeichen kombinieren wollen.
 Wir tun dies, indem wir dem TokenCombiner vier Informationen übergeben:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 => { 
\begin_inset Quotes eld
\end_inset

@R
\begin_inset Quotes erd
\end_inset

, 0, 0 }
\end_layout

\begin_layout Standard
Die 4 Informationen, die der TokenCombiner benötigt sind somit: (1) erstes
 Zeichen: 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

, (2) zweites Zeichen: 
\begin_inset Quotes eld
\end_inset

@R
\begin_inset Quotes erd
\end_inset

, (3) Vorgängiges Delta-y: 0, (4) Nachträgliches Delta-y: 0.
\end_layout

\begin_layout Standard
Diese Zeile genügt also, um das neue Zeichen 
\begin_inset Quotes eld
\end_inset

T@R
\begin_inset Quotes erd
\end_inset

 zu generieren.
 Beachten Sie hierbei, dass der Name des kombinierten Zeichens immer die
 Zusammenfügung von 
\begin_inset Quotes eld
\end_inset

Zeichen1
\begin_inset Quotes erd
\end_inset

 + 
\begin_inset Quotes eld
\end_inset

Zeichen2
\begin_inset Quotes erd
\end_inset

 ist (hier also 
\begin_inset Quotes eld
\end_inset

T@R
\begin_inset Quotes erd
\end_inset

).
 Die Werte vorgängiges und nachträgliches Delta-y werden in den Header des
 neuen Zeichens geschrieben.
 Genauer gesagt: Der TokenCombiner verwendet den Header des ersten Zeichens
 als Basis und ersetzt dann nur diese beiden Felder durch die angegebenen
 Werte.
 Ebenfalls passt der TokenCombiner die Breite des neuen Zeichens automatisch
 an (die Breite des neuen Zeichens entspricht der Summe der beiden Zeichenbreite
n).
 Zu guter Letzt: Wenn wir zwei Zeichen kombinieren, besteht natürlich die
 Gefahr, dass das neue Zeichen mehrere Anfangs- und Endpunkte hat.
 Der TokenCombiner analysiert deshalb das neue Zeichen, löscht überflüssige
 Anfangs- oder Endpunkte (indem er sie in 
\begin_inset Quotes eld
\end_inset

normale
\begin_inset Quotes erd
\end_inset

 Punkte umwandelt) und behält nur den ersten und letzten Punkt des Zeichens
 als Anfangs- und Endpunkt.
\end_layout

\begin_layout Standard
Der TokenCombiner ist ein ungemein praktisches Werkzeug, um im Handumdrehen
 neue Zeichenkombinationen zu generieren.
 Z.B.
 genügt es, beim Zeichen 
\begin_inset Quotes eld
\end_inset

D
\begin_inset Quotes erd
\end_inset

 einen Verbindungspunkt P3 = 0, 2.5, 0, 4, 1.0, 0, 0, 0.5 wie im Zeichen 
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 einzusetzen und den TokenCombiner zu ergänzen:
\end_layout

\begin_layout Standard
In #SubSection(base):
\end_layout

\begin_layout LyX-Code
     "D" => { /*header*/ 0, 0.5, 0, 0, 2 ,3, 0, "",
\end_layout

\begin_layout LyX-Code
     /**/ "","","","",0,0,0,0, 
\end_layout

\begin_layout LyX-Code
     /*++*/ 0,0,0,0,0,0,0,0, 
\end_layout

\begin_layout LyX-Code
     /*data*/ 0, 10, 0, 1, 3.0, 0, 0, 0, 
\end_layout

\begin_layout LyX-Code
     /**/ 0, 0, 0, 0, 1.0, 0, 1, 0, 
\end_layout

\begin_layout LyX-Code
     /*connection point*/ 0, 2.5, 0, 4, 1.0, 0, 0, 0.5 }   // neue Zeile
\end_layout

\begin_layout Standard
In #SubSection(combiner):
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

T
\begin_inset Quotes erd
\end_inset

 => {
\begin_inset Quotes eld
\end_inset

@R
\begin_inset Quotes erd
\end_inset

, 0, 0 }
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

D
\begin_inset Quotes erd
\end_inset

 => {
\begin_inset Quotes eld
\end_inset

@R
\begin_inset Quotes erd
\end_inset

, 0, 0 }
\end_layout

\begin_layout Standard
Zwei Zeilen genügen somit, um das neue Zeichen 
\begin_inset Quotes eld
\end_inset

D@R
\begin_inset Quotes erd
\end_inset

 zu generieren.
 Da dieses - wie die übrigen Grundzeichen - ins Hauptfont von VSTENO geschrieben
 wird, können Sie es danach ohne Einschränkung wie jedes andere Zeichen
 verwenden!
\end_layout

\begin_layout Subsection*
Verschobene Zeichen
\end_layout

\begin_layout Standard
Ähnlich wie der TokenCombiner funktioniert auch der TokenShifter: Dieser
 ermöglicht es, Zeichen horizontal oder vertikal zu verschieben.
 Im System Stolze-Schrey kann dies z.B.
 dazu verwendet werden, Anschlüsse von Zeichen an ein Aufstrich-T zu definieren,
 ohne das entsprechende Zeichen noch einmal neu eingeben zu müssen.
 Wir tragen in die #Subsection(shifter) also folgende Zeile ein:
\end_layout

\begin_layout LyX-Code
"N" => { "&TN", 4, 15, 0, 1.5 }
\end_layout

\begin_layout Standard
Der TokenShifter benötigt 6 Informationen, die folgendes bedeuten: (1) zu
 verschiebendes Zeichen: 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

, (2) Name des neuen Zeichens: 
\begin_inset Quotes eld
\end_inset

&TN
\begin_inset Quotes erd
\end_inset

, (3) Verschiebung auf x-Achse: 4 Pixel nach rechts, (4) Verschiebung auf
 y-Achse: 15 Pixel (= 1.5 Stufen) nach oben, (5) vorgängiges Delta-y: 0 (Schreibz
eile verschiebt sich nicht), (6) nachträgliches Delta-y: 15 (Schreibzeile
 verschiebt sich um 15 Pixel bzw.
 1.5 Stufen nach oben).
 Das Grundzeichen 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 wird durch diese Anweisung also um 1.5 Stufen nach oben und 4 Pixel nach
 rechts verschoben.
 Das neue Zeichen heisst 
\begin_inset Quotes eld
\end_inset

&TN
\begin_inset Quotes erd
\end_inset

 und die Schreiblinie verschiebt sich nach dem Zeichen um 1.5 nach oben.
 Wenn nun dieses Zeichen im Wort 
\begin_inset Quotes eld
\end_inset

Zentner
\begin_inset Quotes erd
\end_inset

 vom Grundlinien-N aus verbunden wird, so entspricht 
\begin_inset Quotes eld
\end_inset

&TN
\begin_inset Quotes erd
\end_inset

 einem Aufstrich-T.
 Die neue Schreiblinie befindet sich am Fusspunkt des Zeichens 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Auch dies ist eine sehr effiziente Art, neue Zeichen zu generieren.
 Für das neue Zeichen 
\begin_inset Quotes eld
\end_inset

&TENS
\begin_inset Quotes erd
\end_inset

, welches einem Aufstricht-T verbunden mit dem Grundzeichen 
\begin_inset Quotes eld
\end_inset

NS
\begin_inset Quotes erd
\end_inset

 entspricht, genügt z.B.
 die folgende zusätzliche Zeile in #SubSection(shifter):
\end_layout

\begin_layout LyX-Code
    "N" => { "&TN", 4, 15, 0, 1.5 }
\end_layout

\begin_layout LyX-Code
    "NS" => { "&TENS", 4, 10, 0, 1 }    
\end_layout

\begin_layout Standard
Soll statt dem Aufstrich-T die Kürzung 
\begin_inset Quotes eld
\end_inset

HEIT
\begin_inset Quotes erd
\end_inset

 verwendet werden, genügt eine grössere Verschiebung auf der x-Achse:
\end_layout

\begin_layout LyX-Code
    "N" => { "&TN", 4, 15, 0, 1.5 }
\end_layout

\begin_layout LyX-Code
    "NS" => { "&TENS", 4, 10, 0, 1 } 
\end_layout

\begin_layout LyX-Code
    "NS" =>{ "&EITENS", 18, 10, 0, 1 } 
\end_layout

\begin_layout Standard
Beachten Sie dass die vertikale Verschiebung hier nur 10 Pixel beträgt,
 da das Zeichen 
\begin_inset Quotes eld
\end_inset

NS
\begin_inset Quotes erd
\end_inset

 im Unterschied zu 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 einstufig ist.
 Aus diesem Grund kommt auch die neue Schreiblinie nur 1 Stufe höher zu
 liegen (also eine halbe Stufe tiefer als bei 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

)
\begin_inset Foot
status open

\begin_layout Plain Layout
Abschliessend ist zu erwähnen, dass dies nur eine Möglichkeit ist, das Aufstrich
-T mit anschliessendem Zeichen zu definieren.
 Wenn die Stenozeichen nur noch mit einer Nettobreite (also ohne Vor/Nachbreite)
 definiert werden, kann auf die Kreierung eines weiteren Zeichens via Shifter
 vollständig verzichtet werden.
 Stattdessen wir einfach ein Aufstrich-T definiert, welches nur den Punkt
 (18,10) als Eingangs- und Endpunkt enhält.
 Aufgrund der 
\begin_inset Quotes eld
\end_inset

Nettobreite
\begin_inset Quotes erd
\end_inset

 der Zeichen, wird das Folgezeichen nun unmittelbar angeschlossen.
 Man muss dann einzig noch darauf achten, dass die Schreibzeilenverschiebung
 richtig gehandhabt wird (kann z.B.
 direkt über verschiedene Definitionen des Aufstrich-T mit verschiedenen
 Schreiblinien erreicht werden).
 Dies ist inzwischen auch das Schöne an VSTENO: Die SE1 rev0 bietet hinsichtlich
 des Parsers (Regeln) und der Zeichendefinitionen z.T.
 mehrere Möglichkeiten, um die eine oder andere spezifische Eigenschaft
 eines Stenosystems umzusetzen.
 Gleiches gilt hier z.B.
 für die Kürzung 
\begin_inset Quotes eld
\end_inset

AUCH
\begin_inset Quotes erd
\end_inset

: wir haben diese weiter oben mithilfe der Header-Felder inconditional_y_before
 realisiert.
 Es wäre aber u.U.
 auch möglich gewesen, hier den Shifter zu verwenden (einziges Problem das
 hier zusätzlich zu betrachten ist, wäre hier die Endschlaufe).
\end_layout

\end_inset

.
\end_layout

\begin_layout Part*
Regeln
\end_layout

\begin_layout Standard
Nach den Zeichendefinitionen kommen wir nun zu den so genannten Regeln,
 welche einzelne Wörter der Langschrift Schritt um Schritt so umwandeln,
 dass sie am Schluss durch Aneinanderfügen der definierten Zeichen als Stenogram
me dargestellt werden können.
 Diese 
\begin_inset Quotes eld
\end_inset

Übertragung
\begin_inset Quotes erd
\end_inset

 findet in mehreren Schritten statt und um diese sichtbar zu machen, können
 Sie in der Demoversion die Funktion 
\begin_inset Quotes eld
\end_inset

Debug
\begin_inset Quotes erd
\end_inset

 anwählen.
 Für das Wort 
\begin_inset Quotes eld
\end_inset

baten
\begin_inset Quotes erd
\end_inset

 sehen Sie dann
\begin_inset Foot
status open

\begin_layout Plain Layout
Die Angaben können leicht von der aktuellen Version abweichen, da das Modell
 für Stolze-Schrey ständig angepasst wird.
 Wichtig ist hier einfach das Prinzip, dass VSTENO mehrere (z.T.
 recht viele) Regeln sequentiell anwendet, um ein Stenogramm zu generieren.
 Ebenfalls wichtig: Die Debug-Funktion! Nutzen Sie diese unbedingt, wenn
 Sie eigene Stenografie-Systeme erstellen wollen.
 Sie hilft Ihnen dabei herauszufinden, welche Regeln angewandt wurden und
 welche nicht, und Sie können damit Fehler in Ihren Regeln - und zum Beispiel
 in der Abarbeitung derselben - leichter finden!
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
ORIGINAL: baten 
\end_layout

\begin_layout LyX-Code
[1] WORD: bat{EN} FROM: rule: (?<!(^[Ww])|i)en$ => {EN}
\end_layout

\begin_layout LyX-Code
[2] WORD: bAt{EN} FROM: rule: a => A 
\end_layout

\begin_layout LyX-Code
[3] WORD: BAt{EN} FROM: rule: b => B 
\end_layout

\begin_layout LyX-Code
[4] WORD: BAT{EN} FROM: rule: t => T 
\end_layout

\begin_layout LyX-Code
NUMBER OF RULES APPLIED: 4
\end_layout

\begin_layout Standard
Beim Wort 
\begin_inset Quotes eld
\end_inset

baten
\begin_inset Quotes erd
\end_inset

 wird also zuerst die Endkürzung -en erkannt und durch {EN} markiert (Schritt
 1), danach wird der Vokal a erkannt und mit dem Grossbuchstaben A markiert
 (Schritt 2).
 Analog dazu werden auch die Konsonanten b und t erkannt und mit den Grossbuchst
aben B und T markiert (Schritte 3+4).
 Die so entstanden Folge - die VSTENO intern als TokenList (Zeichenliste)
 bezeichnet - kann danach sehr simpel zu einem Stenogramm verarbeitet werden,
 indem die Zeichendefinitionen aus der Variable $steno_tokens_master ausgelesen
 und die einzelnen Zeichen aneinandergefügt werden.
\end_layout

\begin_layout Standard
Das obige Beispiel ist natürlich relativ simpel, da alle Zeichen ohne grosse
 Veränderungen verwendet werden können.
 Gewisse Zeichen müssen aber je nach Kontext anders geschrieben werden.
 So z.B.
 das Aufstrich-T, wie es in 
\begin_inset Quotes eld
\end_inset

bunt
\begin_inset Quotes erd
\end_inset

 vorkommt:
\end_layout

\begin_layout LyX-Code
ORIGINAL: bunt 
\end_layout

\begin_layout LyX-Code
[1] WORD: bun[&T] FROM: rule: ([bcdfghjklmnpqrvwxyz])t => $1[&T] 
\end_layout

\begin_layout LyX-Code
[2] WORD: bUn[&T] FROM: rule: u => U 
\end_layout

\begin_layout LyX-Code
[3] WORD: BUn[&T] FROM: rule: b => B 
\end_layout

\begin_layout LyX-Code
[4] WORD: BUN[&T] FROM: rule: n => N 
\end_layout

\begin_layout LyX-Code
NUMBER OF RULES APPLIED: 4
\end_layout

\begin_layout Standard
Alle diese Dinge müssen VSTENO anhand von Regeln genauestens 
\begin_inset Quotes eld
\end_inset

erklärt
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Wenn man dieses Verb im Zusammenhang mit einem Computer verwenden kann ...
 ;-) Aber wir haben VSTENO weiter oben ja in der Tat als unseren digitalen
 Stenoschüler definiert und in diesem Sinne ist die Analogie triftig: Der
 Computer bzw.
 das Programm VSTENO ist unser Discipulus, dem wir als Linguisten Stenografie
 beibringen (und 
\begin_inset Quotes eld
\end_inset

erklären
\begin_inset Quotes erd
\end_inset

).
\end_layout

\end_inset

 bzw.
 beigebracht werden.
 Damit VSTENO die Anweisungen versteht, müssen müssen sie in einer klar
 definierten Formelsprache abgefasst werden.
 Im Falle von VSTENO ist dies REGEX, eine Formelsprache die standardmässig
 in PHP integriert ist.
 Regex ist ein sehr mächtiges Instrument, das einige Tücken aufweist ...
 das aber - richtig angewandt - sämtlichen linguistischen Bedürfnissen gerecht
 werden kann.
\end_layout

\begin_layout Standard
Beachten Sie bitte, dass Regeln nach dem Format 
\begin_inset Quotes eld
\end_inset

Wenn A, dann B
\begin_inset Quotes erd
\end_inset

 funktionieren.
 In den obigen Beispielen bedeutet 
\begin_inset Quotes eld
\end_inset

b => B
\begin_inset Quotes erd
\end_inset

 also: 
\begin_inset Quotes eld
\end_inset

Wenn du innerhalb des Wortes den Kleinbuchstaben b findest, dann erstetze
 ihn durch den Grossbuchstaben B
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection*
REGEX
\end_layout

\begin_layout Standard
Die Möglichkeiten von REGEX (Abkürzung für so genannte 
\begin_inset Quotes eld
\end_inset

regular expressions
\begin_inset Quotes erd
\end_inset

) auch nur ansatzweise darzustellen, würde den Rahmen dieses Tutorial sprengen
 - schliesslich gibt es ganze Bücher, die sich ausschliesslich mit REGEX
 beschäftigen! Wir werden uns also damit begnügnen, hier nur einige wesentliche
 Elemente zu erklären.
 Für den Rest verweisen wir Sie auf die folgenden Seiten, die Ihnen weiterhelfen
 können:
\end_layout

\begin_layout Standard
Ein guter Start, um einen Überblick zu REGEX zu erhalten, sind die beiden
 Wikipedia-Seiten auf Deutsch und auf Englisch:
\end_layout

\begin_layout Itemize
Deutsch: 
\begin_inset CommandInset href
LatexCommand href
target "https://de.wikipedia.org/wiki/Regul%C3%A4rer_Ausdruck"

\end_inset


\end_layout

\begin_layout Itemize
Englisch: 
\begin_inset CommandInset href
LatexCommand href
target "https://en.wikipedia.org/wiki/Regular_expression"

\end_inset


\end_layout

\begin_layout Standard
Ebenfalls sehr zu empfehlen ist der folgende REGEX-Tester:
\end_layout

\begin_layout Itemize
Online-REGEX-Tester: 
\begin_inset CommandInset href
LatexCommand href
target "https://regex101.com/"

\end_inset


\end_layout

\begin_layout Standard
Er erlaubt es Ihnen, einzelne REGEX-Ausdrücke direkt im Webbrowser zu testen
 und so Fehler in bzw.
 falsch forumlierte Formeln zu finden und zu korrigieren.
\end_layout

\begin_layout Standard
REGEX kann man durchaus als 
\begin_inset Quotes eld
\end_inset

learning by doing
\begin_inset Quotes erd
\end_inset

 lernen: Spielen Sie also mit den Elementen die wir im Folgenden vorstellen
 im REGEX-Tester etwas herum und Sie werden bald ein relativ intuitives
 Verständnis dafür erlangen, wie REGEX funktioniert!
\end_layout

\begin_layout Subsection*
Wortgrenzen und Lookaround-Expressions
\end_layout

\begin_layout Standard
Hier nun also einige wenige Grundregeln und Prinzipien von REGEX, die Sie
 für linguistische Regeln mit Sicherheit benötigen werden.
 Beginnen wir mit den Zeichen ^ und $.
 Sie markieren den Anfang und das Ende eines Wortes:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

^hab$
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Bedeutet also: Falls das Wort genau der Zeichenfolge 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 entspricht (bzw.
 sich vor 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 der Wortanfang und nach 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 das Wortende befindet), dann ersetze die Zeichenfolge 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 durch 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset

.
 Beachten Sie, dass die Ausdrücke ^hab$ und {HAB} innerhalb von Anführungszeiche
n 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

 gesetzt werden müssen, da es sich dabei um Strings (Zeichenfolgen) handelt.
 Diese Regel kann also verwendet werden, um die Kürzung HAB zu definieren.
 Sie ist allerdings schlecht formuliert: Sie berücksichtigt z.B.
 nicht, dass das Verb 
\begin_inset Quotes eld
\end_inset

haben
\begin_inset Quotes erd
\end_inset

 auch am Wortanfang stehen kann (was bedeutet, dass 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 dann mit einem Grossbuchstaben beginnt).
 Ausserdem wird die Kürzung HAB auch in längeren Wörtern angewendet (wie
 z.B.
 
\begin_inset Quotes eld
\end_inset

Inhaber
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

habt
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

haben
\begin_inset Quotes erd
\end_inset

 etc.).
 Auch diese Fälle würden nicht berücksichtigt, da die Regel verlangt, dass
 das Wort nach 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 zu Ende ist.
 Wir formulieren die Regel deshalb um:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

[Hh]ab
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Beachten Sie bitte gleich hier, dass 
\begin_inset Quotes eld
\end_inset

[Hh]ab
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset


\backslash
[Hh
\backslash
]ab
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset

 nicht dasselbe ist.
 
\begin_inset Quotes eld
\end_inset

[Hh]ab
\begin_inset Quotes erd
\end_inset

 bedeutet 
\begin_inset Quotes eld
\end_inset

H oder h
\begin_inset Quotes erd
\end_inset

, es könnte in REGEX auch 
\begin_inset Quotes eld
\end_inset

(H|h)ab
\begin_inset Quotes erd
\end_inset

 geschrieben werden.
 Das 
\begin_inset Quotes eld
\end_inset

escapte
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset


\backslash
[Hh
\backslash
]ab
\begin_inset Quotes erd
\end_inset

 hingegen würde bedeuten: das Zeichen [ und ] muss vorhanden sein (würde
 also auf 
\begin_inset Quotes eld
\end_inset

[Hh]ab
\begin_inset Quotes erd
\end_inset

 zutreffen).
 Kurzum: REGEX ist ebenso effizient wie heimtückisch; kleine Zeichen - besonders
 wenn es ums Escaping mit 
\backslash
 geht - können eine ganz andere Bedeutung haben ...
 Ebenfalls zu beachten ist die Tatsache, dass in PHP Zeichen nur auf der
 IF-Seite escaped werden müssen!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die eckige Klammer [] bedeutet hier: 
\begin_inset Quotes eld
\end_inset

einer der aufgelisteten Buchstaben
\begin_inset Quotes erd
\end_inset

 (die Liste kann beliebig lang sein - z.B.
 [aeiou] für die 5 Grundvokale - oder man kann auch weitere Ausdrücke verwenden
 wie z.B.
 [a-z] oder [A-Z] für Kleinbuchstaben und Grossbuchstaben, [0-9] für Ziffern
 etc.).
 Da wir die Zeichen ^ und $ (Wortanfang und Wortende) entfernt haben, trifft
 diese Regel nun auf die oben genannten Fälle zu: 
\begin_inset Quotes eld
\end_inset

Inhaber
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

habt
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

haben
\begin_inset Quotes erd
\end_inset

 werden zum Beispiel in 
\begin_inset Quotes eld
\end_inset

In{HAB}er
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

{HAB}t
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

{HAB}en
\begin_inset Quotes erd
\end_inset

 umgewandelt.
 Allerdings ist auch diese Regel zu ungenau formuliert, da auch Wörter wie
 
\begin_inset Quotes eld
\end_inset

schaben
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Haber
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Wir meinen hier das umganssprachliche Wort für 
\begin_inset Quotes eld
\end_inset

Hafer
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset

 in 
\begin_inset Quotes eld
\end_inset

sc{HAB}en
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

{HAB}er
\begin_inset Quotes erd
\end_inset

 umgewandelt werden, was wiederum falsch ist ...
\end_layout

\begin_layout Standard
Dies können wir korrigieren, indem wir eine so genannte Lookaround-Expression
 (zu Deutsch etwa: Schau-dich-um-Ausdruck) verwenden.
 Es gibt zwei Arten von Lookaround-Expressions: die Lookbehind-Expression
 (sie sucht nach Zeichenfolgen vor dem Wort) und die Lookahead-Expression
 (für Zeichenfolgen nach dem Wort).
 Ausserdem können Lookaround-Expressions positiv (= die Zeichenfolge muss
 vorkommen) oder negativ (= die Zeichenfolge darf nicht vorkommen) sein.
 Im Folgenden verwenden wir eine negative Lookbehind-Expression.
 Diese steht in einer runden Klammer vor dem Wort und beginnt mit ?<!:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

(?<![Ss]c)[Hh]ab
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Diese Regel bedeutet also: Ersetze 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 - egal ob mit Gross- oder Kleinbuchstaben beginnend - an einer beliebigen
 Stelle des Wortes durch {HAB}, sofern nicht 
\begin_inset Quotes eld
\end_inset

sc
\begin_inset Quotes erd
\end_inset

 oder 
\begin_inset Quotes eld
\end_inset

Sc
\begin_inset Quotes erd
\end_inset

 vorausgeht.
 Oder anders formuliert: Ersetze 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 nur dann, wenn das H nicht Teil von SCH ist.
 Diese Regel löst also das Problem von 
\begin_inset Quotes eld
\end_inset

schaben
\begin_inset Quotes erd
\end_inset

, nicht aber jenes von 
\begin_inset Quotes eld
\end_inset

Haber
\begin_inset Quotes erd
\end_inset

.
 Wir könnten natürlich auch hier eine negative Lookahead-Expression verwenden:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

[Hh]ab(?=!er)
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Allerdings würde dann das Wort 
\begin_inset Quotes eld
\end_inset

Inhaber
\begin_inset Quotes erd
\end_inset

 ebenfalls nicht mehr in 
\begin_inset Quotes eld
\end_inset

In{HAB}er
\begin_inset Quotes erd
\end_inset

 umgewandelt.
\end_layout

\begin_layout Standard
Man sieht also: Das Formulieren von präzisen linguitischen Regeln - die
 wirklich nur auf jene Wörter angewandt wird, auf die die Regel wirklich
 zutrifft - ist zum Teil recht anspruchsvoll.
 Es lohnt sich aber, hier Zeit zu investieren, denn je präziser die Regel
 ist, umso weniger 
\begin_inset Quotes eld
\end_inset

Ausnahmen
\begin_inset Quotes erd
\end_inset

 müssen später zusätzlich (in einem Wörterbuch beispielsweise) definiert
 werden.
\end_layout

\begin_layout Subsection*
Klammern, Quantoren und Variablen
\end_layout

\begin_layout Standard
Quantoren sind Zeichen, welche angeben, wie oft ein Zeichen vorkommen muss.
 REGEX kennt hier z.B.
 die Zeichen ? (= 0 oder 1 Mal vorkommend), + (= mindestens 1 Mal vorkommen),
 * beliebig oft vorkommend.
 Diese können auf einzelne Zeichen angewandt werden oder es können mehrere
 Zeichen zu einer Gruppe zusammengefasst werden, für die der Quantor gilt.
 Als Beispiel betrachten wir folgende Regel:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

^([Uu]n)?[Zz]uver
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

$1{ZU}{VER}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Hier wurde also der Ausdruck [Uu]n durch die Klammern () zu einer Gruppe
 zusammengefasst.
 Der Quantor ? nach ([Uu]n) bedeutet, dass die Vorsilbe un- (die am Anfang
 des Wortes - markiert durch das Zeichen ^ - gross oder klein geschrieben
 werden kann) 0 oder 1 Mal vorkommen kann.
 Dieses 
\begin_inset Quotes eld
\end_inset

Muster
\begin_inset Quotes erd
\end_inset

 (oder pattern, wie es auf Englisch genannt wird) trifft z.B.
 auf Wörter wie 
\begin_inset Quotes eld
\end_inset

unzuverlässig
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Unzuverlässigkeit
\begin_inset Quotes erd
\end_inset

 zu (hier kommt un- 1 Mal vor), aber auch auf Wörter wie 
\begin_inset Quotes eld
\end_inset

zuverlässig
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Zuversichtlichkeit
\begin_inset Quotes erd
\end_inset

 usw.
 
\end_layout

\begin_layout Standard
Auf der rechten Seite (der Folge-Seite der Regel) steht der Ausdruck $1
 für die 
\begin_inset Quotes eld
\end_inset

Variable in der ersten Position
\begin_inset Quotes erd
\end_inset

.
 Mit Position ist gemeint: 
\begin_inset Quotes eld
\end_inset

Der x-te Klammerausdruck von links beginnend
\begin_inset Quotes erd
\end_inset

, in unserem Fall also ([Uu]n).
 
\end_layout

\begin_layout Standard
Diese Regel nimmt somit folgende Ersetzungen vor: 
\begin_inset Quotes eld
\end_inset

unzuverlässig
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

un{ZU}{VER}lässig
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Unzuverlässigkeit
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

Un{ZU}{VER}lässigkeit
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Zuversicht
\begin_inset Quotes erd
\end_inset

 => {ZU}{VER}sicht, 
\begin_inset Quotes eld
\end_inset

zuverlässig
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{ZU}{VER}lässig.
 Beachten Sie hierbei, dass die Variable $1 den Klammerausdruck exakt so
 wiedergibt, wie er im Wort vorgefunden wird, als 
\begin_inset Quotes eld
\end_inset

Un
\begin_inset Quotes erd
\end_inset

 (mit grossem Anfangsbuchstaben) im Substantiv 
\begin_inset Quotes eld
\end_inset

Unzuverlässigkeit
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

un
\begin_inset Quotes erd
\end_inset

 (mit Kleinbuchstaben) im Adjektiv 
\begin_inset Quotes eld
\end_inset

unzuverlässig
\begin_inset Quotes erd
\end_inset

.
 Nicht so hingegen beim Ausdruck 
\begin_inset Quotes eld
\end_inset

[Zz]u
\begin_inset Quotes erd
\end_inset

 (wo wir keine Variable verwenden): Hier wird also sowohl 
\begin_inset Quotes eld
\end_inset

Zu
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

zu
\begin_inset Quotes erd
\end_inset

 durch 
\begin_inset Quotes eld
\end_inset

{ZU}
\begin_inset Quotes erd
\end_inset

 ersetzt.
\end_layout

\begin_layout Standard
Da Variablen nummeriert sind, kann man auch mehrere hintereinander verwenden:
 
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

^([Uu]n)?([Zz]u)ver
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

$1$2{VER}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
In dieser Regel z.B.
 wird nur das Präfix ver- durch {VER} ersetzt.
 Wie bei un- weiter oben wird nun auch in diesem Beispiel die zweite Vorsilbe
 
\begin_inset Quotes eld
\end_inset

zu
\begin_inset Quotes erd
\end_inset

 exakt so übertragen, wie sie im Wort steht (also 
\begin_inset Quotes eld
\end_inset

Zu
\begin_inset Quotes erd
\end_inset

 bei einem Substantiv, 
\begin_inset Quotes eld
\end_inset

zu
\begin_inset Quotes erd
\end_inset

 bei klein geschriebenen Wörtern).
 
\end_layout

\begin_layout Standard
Im Unterschied zu ? bezeichnet der Quantor + einen Ausdruck der mindestens
 1 Mal (oder mehr) vorkommen muss.
 Die Regel
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

^([Zz]u)+
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

$1|
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Trennt eine oder mehrere Vorsilben zu- durch einen vertikalen Strich vom
 Rest des Wortes ab: 
\begin_inset Quotes eld
\end_inset

zugeben
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

zu|geben
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

zuzugeben
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

zuzu|geben
\begin_inset Quotes erd
\end_inset

.
 Bitte beachten Sie, dass dies wiederum eine linguistisch zu unpräzis formuliert
e Regel ist, da sie auch auf Wörter wie 
\begin_inset Quotes eld
\end_inset

Zuzug
\begin_inset Quotes erd
\end_inset

 zutrifft (hier findet die Regel 2 Vorsilben zu-, dabei enthält das Wort
 nur 1 Vorsilbe - der zweite Teil gehört zum Stamm des Wortes).
 Auch trifft die Regel theoretisch auf inexistente Wörter zu wie 
\begin_inset Quotes eld
\end_inset

zuzuzukumi
\begin_inset Quotes erd
\end_inset

 (hier fände die Regel 3 Vorsilben).
 
\end_layout

\begin_layout Subsection*
Wildcards und Greediness
\end_layout

\begin_layout Standard
REGEX definiert den Punkt .
 als so genannte Wildcard
\begin_inset Foot
status open

\begin_layout Plain Layout
Wir auch Joker genannt.
\end_layout

\end_inset

: Dieses Zeichen kann also für 
\begin_inset Quotes eld
\end_inset

irgend ein
\begin_inset Quotes erd
\end_inset

 Zeichen stehen.
 Auch den Punkt können wir mit Quantoren kombinieren, wobei hier ein neuer
 Aspekt ins Spiel kommt: die so genannte greediness (zu Deutsch in etwa:
 Gefrässigkeit).
 Quantoren können also 
\begin_inset Quotes eld
\end_inset

greedy
\begin_inset Quotes erd
\end_inset

 (gefrässig) oder non-greedy (ungefrässig oder genügsam) sein.
 Im ersten Fall versucht REGEX den Ausdruck auf die grösstmögliche Zeichenfolge
 anzuwenden, im letzten Fall hingegen wird der kürzeste Ausdruck gesucht,
 der auf das Muster zutrifft.
\end_layout

\begin_layout LyX-Code
[1] Bett(.*)en => Bett$1{EN}
\end_layout

\begin_layout LyX-Code
[2] Bett(.*?)en => Bett$1{EN}
\end_layout

\begin_layout Standard
Im Wort 
\begin_inset Quotes eld
\end_inset

Bettenkapazitäten
\begin_inset Quotes erd
\end_inset

 (welches 2 x die Endung -en enthält), findet die erste Regel (mit dem 
\begin_inset Quotes eld
\end_inset

gefrässigen
\begin_inset Quotes erd
\end_inset

 Ausdruck *) die LETZTE Endung und ersetzt das Wort somit durch 
\begin_inset Quotes eld
\end_inset

Bettenkapazität{EN}
\begin_inset Quotes erd
\end_inset

.
 In der zweiten Regel (mit dem 
\begin_inset Quotes eld
\end_inset

genügsamen
\begin_inset Quotes erd
\end_inset

 Ausdruck *?) findet REGEX hingegen der ERSTEN Ausdruck, sodass das Resultat
 hier 
\begin_inset Quotes eld
\end_inset

Bett{EN}kapazitäten
\begin_inset Quotes erd
\end_inset

 lautet.
\end_layout

\begin_layout Standard
Passen Sie deshalb mit Quantoren besonders auf: Sie können eine total andere
 Bedeutung haben als man - von einer intuitiven, sprachlichen Logik her
 denkend - glauben würde ...
\end_layout

\begin_layout Subsection*
Logisches Oder
\end_layout

\begin_layout Standard
Wir haben bereits die eckigen Klammern [] kennengelernt, welche eine Reihe
 von Zeichen zusammenfasst, von denen wenigtens eines zutreffen muss.
 In der Logik entspricht dieses einem Oder: Im Ausdruck [abcd] muss also
 entweder a oder b oder c oder d vorkommen.
 Ein weiterer Ausdruck um ein logisches Oder wiederzugeben ist der vertikale
 Strich:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

(ck|kk)
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

[CK]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Diese Regel bedeutet also, dass 
\begin_inset Quotes eld
\end_inset

Zucker
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

Zu[CK]er
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

Mokka
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

Mo[CK]a
\begin_inset Quotes erd
\end_inset

 wird.
 Beachten Sie in diesem Zusammenhang unbedingt, dass die eckige Klammer
 auf der linken Seite (Bedingung) der Regel nicht die gleiche Bedeutung
 hat wie auf der rechten Seite (Folge):
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

[Ää]
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

[Ä]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

(Ä|ä)
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

[Ä]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Diese beiden Regeln sind gleichbedeutend!
\begin_inset Foot
status open

\begin_layout Plain Layout
...
 theoretisch.
 Aus irgendeinem unerfindlichen Grund - vermutlich hat es mit dem Sonderzeichen
 Ä zu tun - funktioniert, zumindest in meiner Systemkonfiguration, nur die
 Variante (Ä|ä).
 Dasselbe gilt auch für Üü, Öö, ÄU ...
 Ich empfehle deshalb, für diese Sonderzeichen, die Variante in runden Klammern
 zu verwenden.
\end_layout

\end_inset

 Die eckige Klammer auf der linken Seite bedeutet also wie erwähnt 
\begin_inset Quotes eld
\end_inset

eines dieser Zeichen
\begin_inset Quotes erd
\end_inset

 (also Ä oder ä) auf der rechten Seite bedeutet es jedoch 
\begin_inset Quotes eld
\end_inset

ersetzen durch das Klammerzeichen
\begin_inset Quotes erd
\end_inset

 (offen oder geschlossen).
 Diese Regel transformiert die Wörter 
\begin_inset Quotes eld
\end_inset

Kläger
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

KlÄger
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

Kl[Ä]ger
\begin_inset Quotes erd
\end_inset

!
\end_layout

\begin_layout Standard
Wenn Sie auf der linken Seite nach einer eckigen Klammer suchen möchten,
 dann müssen Sie das Zeichen 
\begin_inset Quotes eld
\end_inset

escapen
\begin_inset Quotes erd
\end_inset

 (wir übersetzen mal frei: 
\begin_inset Quotes eld
\end_inset

seiner REGEX-Bedeutung entheben
\begin_inset Quotes erd
\end_inset

).
 Dies geschieht indem der Backslash 
\backslash
 vorangestellt wird:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset


\backslash
[Ää
\backslash
]
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{Ää}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Diese Regel würde die Zeichenfolge 
\begin_inset Quotes eld
\end_inset

ABC[Ää]XYZ
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

ABC{Ää}XYZ
\begin_inset Quotes erd
\end_inset

 umschreiben!
\end_layout

\begin_layout Standard
Auch hier: Passen Sie bei Zeichen, die in REGEX eine spezielle Bedeutung
 haben, sehr gut auf, ob Sie sie wörtlich (als Literal oder Buchstabe) oder
 in der Bedeutung von Regex verwenden wollen.
 Dies trifft prinzipiell auf alle Zeichen zu, die in REGEX eine spezielle
 Bedeutung haben.
 Sicherheitshalber listen wir die wichtigsten im Folgenden noch einmal auf.
\end_layout

\begin_layout Subsection*
Escaping
\end_layout

\begin_layout Standard
Folgende Zeichen MÜSSEN in PHP-Regex 
\begin_inset Quotes eld
\end_inset

escaped
\begin_inset Quotes erd
\end_inset

 werden, wenn Sie 
\begin_inset Quotes eld
\end_inset

wörtlich
\begin_inset Quotes erd
\end_inset

 (= als genau dieses Zeichen) verwendet werden sollen: 
\end_layout

\begin_layout LyX-Code
.
 als 
\backslash
.
\end_layout

\begin_layout LyX-Code
^ als 
\backslash
^
\end_layout

\begin_layout LyX-Code
$ als 
\backslash
$
\end_layout

\begin_layout LyX-Code
* als 
\backslash
*
\end_layout

\begin_layout LyX-Code
+ als 
\backslash
+
\end_layout

\begin_layout LyX-Code
? als 
\backslash
?
\end_layout

\begin_layout LyX-Code
( als 
\backslash
(
\end_layout

\begin_layout LyX-Code
) als 
\backslash
)
\end_layout

\begin_layout LyX-Code
[ als 
\backslash
[
\end_layout

\begin_layout LyX-Code

\backslash
 als 
\backslash

\backslash

\end_layout

\begin_layout LyX-Code
| als 
\backslash
|
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Die geschwungenen Klammern {} KÖNNEN in PHP-REGEX 
\begin_inset Quotes eld
\end_inset

escaped
\begin_inset Quotes erd
\end_inset

 werden (oder nicht)
\begin_inset Foot
status open

\begin_layout Plain Layout
Ich empfehle sie nicht zu escapen, da die Regeln dadurch etwas übersichtlicher
 werden.
\end_layout

\end_inset

.
 Speziell weisen wir auch auf das Zeichen ^ hin.
 Es hat innerhalb der eckigen Klammern die Bedeutung von 
\begin_inset Quotes eld
\end_inset

nicht
\begin_inset Quotes erd
\end_inset

 (logische Negation):
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

^[Zz]u([^m])
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{ZU}$1
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Dieses Regelbeispiel bedeutet also: Ersetze die Vorsilbe zu- am Anfang eines
 Wortes durch {ZU}, sofern das darauffolgende Zeichen kein m ist (in Stolze-Schr
ey wird in diesem Fall keine Kürzung verwendet).
 Beachten Sie, dass hier die beiden Zeichen ^ verschiedene Bedeutungen haben:
 Das erste bedeutet 
\begin_inset Quotes eld
\end_inset

Wortanfang
\begin_inset Quotes erd
\end_inset

, das zweite bedeutet 
\begin_inset Quotes eld
\end_inset

nicht m
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Wenn Sie das Zeichen ^wortwörtlich (also als Zeichen) suchen möchten, müssen
 Sie es 
\begin_inset Quotes eld
\end_inset

escapen
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

ABC
\backslash
^XYZ
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

ABC{circonflex}XYZ
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Wandelt die Zeichenkette 
\begin_inset Quotes eld
\end_inset

ABC^XYZ
\begin_inset Quotes erd
\end_inset

 in 
\begin_inset Quotes eld
\end_inset

ABC{circonflex}XYZ
\begin_inset Quotes erd
\end_inset

 um!
\end_layout

\begin_layout Standard
Es kann nicht genug betont werden, wie wichtig diese unscheinbaren Unterschiede
 sind: REGEX ist deshalb so 
\begin_inset Quotes eld
\end_inset

kompliziert
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

tricky
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

kryptisch
\begin_inset Quotes erd
\end_inset

 - oder wie immer Sie es bezeichnen möchten - weil ein einziges Zeichen
 je nach Art und Weise, wie es verwendet wird, eine total andere Bedeutung
 haben kann! Verwenden Sie in diesem Fall den erwähnten REGEX-Tester und
 vergewissern Sie sich, dass Ihre Regel auch wirklich das heisst, was Sie
 meinen ...
 
\end_layout

\begin_layout Subsection*
Regeln in VSTENO
\end_layout

\begin_layout Standard
Die Regeln, die wir uns bis jetzt angesehen haben, entsprachen dem Standard-Sche
ma der REGEX-Replace-Funktion, nämlich: Wenn A, dann (ersetze durch) B.
 VSTENO erweitert den Regelformalismus um eine weitere Möglichkeit: Wenn
 A, dann B, ausser C (oder D):
\end_layout

\begin_layout LyX-Code
A => B                       normale REGEX-Regel
\end_layout

\begin_layout LyX-Code
A => { B, C, D ..., X }      erweiterte Regel
\end_layout

\begin_layout Standard
In VSTENO können diese Formeln genau in dieser Weise notiert werden.
 Wir verwenden noch einmal die Kürzung 
\begin_inset Quotes eld
\end_inset

HAB
\begin_inset Quotes erd
\end_inset

, die wir bereits weiter oben gesehen haben:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

(?<![Ss]c)[Hh]ab
\begin_inset Quotes erd
\end_inset

 => { 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

^Haber
\begin_inset Quotes erd
\end_inset

 }
\end_layout

\begin_layout Standard
Diese Regel bedeutet also: Ersetz die Zeichenfolge 
\begin_inset Quotes eld
\end_inset

hab
\begin_inset Quotes erd
\end_inset

 (oder 
\begin_inset Quotes eld
\end_inset

Hab
\begin_inset Quotes erd
\end_inset

) an einer beliebigen Stelle des Wortes durch 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset

, AUSSER das Muster 
\begin_inset Quotes eld
\end_inset

Haber
\begin_inset Quotes erd
\end_inset

 (mit Grossbuchstaben) steht am Anfang des Wortes.
 Diese Regel nimmt in den folgenden Beispielwörtern folgende Transformationen
 vor:
\end_layout

\begin_layout LyX-Code
Inhaber => In{HAB}er
\end_layout

\begin_layout LyX-Code
haben => {HAB}en
\end_layout

\begin_layout LyX-Code
habt => {HAB}t
\end_layout

\begin_layout LyX-Code
schaben => schaben
\end_layout

\begin_layout LyX-Code
Haber => Haber
\end_layout

\begin_layout LyX-Code
Habermacher => Habermacher
\end_layout

\begin_layout Standard
Beachten Sie, dass das zweite Element des Folgearrays 
\begin_inset Quotes eld
\end_inset

^Haber
\begin_inset Quotes erd
\end_inset

 von VSTENO ebenfalls als REGEX-Muster interpretiert wird, weshalb es auch
 auf 
\begin_inset Quotes eld
\end_inset

Habermacher
\begin_inset Quotes erd
\end_inset

 zutrifft (sonst müsste dort 
\begin_inset Quotes eld
\end_inset

^Haber$
\begin_inset Quotes erd
\end_inset

 stehen).
\end_layout

\begin_layout Standard
Auch diese Kürzungsregel für 
\begin_inset Quotes eld
\end_inset

HAB
\begin_inset Quotes erd
\end_inset

 ist nicht perfekt, da z.B.
 das Wort 
\begin_inset Quotes eld
\end_inset

Habicht
\begin_inset Quotes erd
\end_inset

 ebenfalls zu 
\begin_inset Quotes eld
\end_inset

{HAB}icht
\begin_inset Quotes erd
\end_inset

 gekürzt wird.
 Mit dem erweiterten Regelformalismus von VSTENO können wir weitere Ausnahmen
 aber sehr einfach im Folge-Array hinzufügen:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

(?<![Ss]c)[Hh]ab
\begin_inset Quotes erd
\end_inset

 => { 
\begin_inset Quotes eld
\end_inset

{HAB}
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

^Haber
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Habicht
\begin_inset Quotes erd
\end_inset

 }
\end_layout

\begin_layout Standard
Auch hier hat die REGEX-Notation wieder den Vorteil, dass sämtliche Fälle
 (z.B.
 Genetiv 
\begin_inset Quotes eld
\end_inset

Habichts
\begin_inset Quotes erd
\end_inset

) erfasst werden.
\end_layout

\begin_layout Subsection*
Gross-/Kleinbuchstaben
\end_layout

\begin_layout Standard
VSTENO bietet eine weitere, sehr nützliche Erweiterung des Standard-REGEX-Regelf
ormalismus, um Gross- in Kleinbuchstaben umzuwandeln (und umgekehrt):
\end_layout

\begin_layout LyX-Code
"([A-Z])" => "strtolower()";
\end_layout

\begin_layout LyX-Code
"([a-z])" => "strtoupper()";
\end_layout

\begin_layout Standard
Hier wird also mit ([A-Z]) und ([a-z]) nach Gross- und Kleinbuchstaben gesucht.
 Anschliessend wird die gefundene Zeichenkette mit strtolower() udn strtoupper()
; in Klein- und Grossbuchstaben umgewandelt.
 Beachten Sie bitte die runde Klammer (die obligatorisch ist): Sie markiert
 jenen Teil des Wortes, der umgewandelt werden soll.
\end_layout

\begin_layout Standard
Beachten Sie bitte, dass die obige Regel die Umlaute (ä, ö, ü) oder andere
 Zeichen (z.B.
 mit Zirkumflex) ausser Acht lässt!
\end_layout

\begin_layout Standard
VSTENO bzw.
 die Regeln für Stolze-Schrey verwendet diese Umwandlungen mehrmals: Wenn
 man z.B.
 das Übertragen konsequent mit Kleinbuchstaben beginnt und alle Umwandlungen
 mit Grossbuchstaben vornimmt, dann weiss man genau, welche Teile des Wortes
 bereits umgeschrieben sind (alle Grossbuchstaben) und welche noch umgeschrieben
 werden müssen (alle Kleinbuchstaben).
\end_layout

\begin_layout Section*
Funktionen
\end_layout

\begin_layout Standard
Mit dem Debug-Modus konnten wir bereits einen Eindruck gewinnen, wie (in
 welcher Reihenfolge) VSTENO die Regeln innerhalb der Section Rules abarbeitet.
 Die Standardreihenfolge ist im Prinzip von oben nach unten.
 Aber es gibt auch Möglichkeiten, Gruppen von Regeln zu so genannten Funktionen
 zusammenzufassen und die Abarbeitungsreihenfolge dieser Funktionen selber
 zu definieren bzw.
 von Bedingungen abhängig zu machen.
 Aber der Reihe nach - betrachten wir zunächst ein Beispiel:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(relancer)		
\end_layout

\begin_layout LyX-Code
     "^(.*?)$" => "strtolower()";	// all to low 		
\end_layout

\begin_layout LyX-Code
	 "({.*?})" => "strtoupper()";    // {..} to upper again	  
\end_layout

\begin_layout LyX-Code
     "(
\backslash
[.*?
\backslash
])" => "strtoupper()";  // [..] to upper again
\end_layout

\begin_layout LyX-Code
#EndSubSection(relancer)
\end_layout

\begin_layout Standard
Dies Sequenz fasst 3 Regeln zur Funktion 
\begin_inset Quotes eld
\end_inset

relancer
\begin_inset Quotes erd
\end_inset

 zusammen: (1) alle Zeichen werden zu Kleinbuchstaben umgewandelt, (2) +
 (3) Kürzungen {..} und gebündelte Zeichen [..] werden wieder zu Grossbuchstaben
 umgewandelt.
 Beispiel: {VER}LO[VR]{EN} wird zu: {VER}lo[VR]{EN}
\begin_inset Foot
status open

\begin_layout Plain Layout
Der relancer macht sich hier das vorhin erklärte Prinzip zunutze und markiert
 Wortteile, die nicht mehr umgeschrieben werden müssen als Grossbuchstaben,
 und alles, was noch umgeschrieben werden muss, als Kleinbuchstaben.
\end_layout

\end_inset

.
\end_layout

\begin_layout Section*
Stages
\end_layout

\begin_layout Standard
Seit der letzten Dokumentation wurde ein komplett neues Konzept in VSTENO
 eingeführt: so genannte Stages.
 Diese definieren, auf welchen Teil des Textes sich die Regeln beziehen:
\end_layout

\begin_layout LyX-Code
stage 0: gesamter Text
\end_layout

\begin_layout LyX-Code
stage 1: Wörterbuch und linguistische Analyse
\begin_inset Foot
status open

\begin_layout Plain Layout
Der linguistical analyzer wurde ebenfalls neu eingeführt und wird unter
 anderem hier erläutert: https://www.vsteno.ch/docs/gel_speiende_spiegel.pdf
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
stage 2: ganzes Wort (können mehrere zusammengesetzte Wörter sein)
\end_layout

\begin_layout LyX-Code
stage 3: jedes Teilwort (= zusammengesetzte Wörter)
\end_layout

\begin_layout LyX-Code
stage 4: ganzes Wort
\end_layout

\begin_layout Standard
Einige Anwendungsbeispiele:
\end_layout

\begin_layout Itemize
Stage 0: Die Ellipse 
\begin_inset Quotes eld
\end_inset

...
\begin_inset Quotes erd
\end_inset

 beinhaltet drei Punkte.
 Da VSTENO Satzzeichen 
\begin_inset Quotes eld
\end_inset

herausfiltern
\begin_inset Quotes erd
\end_inset

 muss, um die Wörter zu bearbeiten, wären die 3 Punkte für die Regeln grundsätzl
ich nicht sichtbar.
 Dank der Einführung der Stage 0 können die Regeln aber auf den noch unverändert
en Original-Text (inklusive Satzzeichen) angewandt werden.
 Dadurch ist es zum Beispiel auch möglich, Regeln zu schreiben, die auf
 mehrere Wörter angewandt werden: Z.B.
 könnte 
\begin_inset Quotes eld
\end_inset

das heisst
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

dh
\begin_inset Quotes erd
\end_inset

 verkürzt werden (auch hier wären mehrere Wörter bzw.
 das Leerzeichen für VSTENO nicht sichtbar, da der Text unter Verwendung
 der Leerzeichen standardmässig in einzelne Wörter aufgeteilt wird).
\end_layout

\begin_layout Itemize
Stage 1: Hier 
\begin_inset Quotes eld
\end_inset

sieht
\begin_inset Quotes erd
\end_inset

 VSTENO nur einzelne Wörter und Satzzeichen werden herausgefiltert.
 
\begin_inset Quotes eld
\end_inset

Teetasse.
\begin_inset Quotes erd
\end_inset

 aus dem Originaltext, wird also zu 
\begin_inset Quotes eld
\end_inset

Teetasse
\begin_inset Quotes erd
\end_inset

.
 Dieses 
\begin_inset Quotes eld
\end_inset

Rohwort
\begin_inset Quotes erd
\end_inset

 (bare word) wird anschliessend ans Wörterbuch gesandt.
 Findet VSTENO einen Eintrag für das Wort, so wird die Bearbeitung mit dem
 Eintrag fortgesetzt (kann entweder die LNG-, STD- oder PRT-Form sein, siehe
 später).
 Wird kein Eintrag gefunden, wendet VSTENO anschliessend eine linguistische
 Analyse an (auf die ebenfalls später genauer eingegangen wird).
 In unserem Fall wird dabei 
\begin_inset Quotes eld
\end_inset

Teetasse
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

Tee|tasse
\begin_inset Quotes erd
\end_inset

 (d.h.
 VSTENO erkennt, dass es sich um ein zusammengesetztes Wort mit zwei Teilen
 handelt).
\end_layout

\begin_layout Itemize
Stage 2: VSTENO sieht hier das gleiche wie in Stage 1, also das gesamte
 Wort 
\begin_inset Quotes eld
\end_inset

Tee|tasse
\begin_inset Quotes erd
\end_inset

.
 Der einzige Unterschied: Das Wort wurde nun im Wörterbuch nachgeschlagen
 oder linguistisch analysiert und enthält zusätzliche Informationen.
 In unserem Fall ist dies das Zeichen |, welche eine Wortgrenze angibt.
 Wir könnten nun in Stage 2 eine Regel der Form 
\begin_inset Quotes eld
\end_inset

Tee|tasse
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

Tee
\backslash

\backslash
tasse
\begin_inset Quotes erd
\end_inset

 schreiben, um VSTENO dazu zu bringen, das Wort getrennt zu schreiben.
\end_layout

\begin_layout Itemize
Stage 3: Hier sieht VSTENO jede Teilwort (bei zusammengesetzten Wörtern)
 einzeln.
 Nehmen wir z.B.
 das Wort 
\begin_inset Quotes eld
\end_inset

Vertragsvermittler
\begin_inset Quotes erd
\end_inset

.
 VSTENO wird hier zwei Teilwörter erkennen: 
\begin_inset Quotes eld
\end_inset

Vertrags
\begin_inset Quotes erd
\end_inset

 + 
\begin_inset Quotes eld
\end_inset

Vermittler
\begin_inset Quotes erd
\end_inset

.
 Wenn wir nun eine Regel der Form 
\begin_inset Quotes eld
\end_inset

^Ver
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{VER}
\begin_inset Quotes erd
\end_inset

 in Stage 3 schreiben, so wird die Kürzung ver- auf BEIDE Vorsilben angewandt:
 
\begin_inset Quotes eld
\end_inset

{VER}trags|{VER}mittler
\begin_inset Quotes erd
\end_inset

.
 Schreiben wir die gleiche Regel in Stage 2, so wird nur die erste (am Wortanfan
g wegen des REGEX-Zeichens ^) ersetzt: 
\begin_inset Quotes eld
\end_inset

{VER}trags|vermittler
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Stage 4: Hier kehren wird zur gleichen Stufe wie in Stage 2 zurück, d.h.
 wir sehen wieder das ganze Wort, inklusive Wortgrenze |.
 Wir können dies nutzen, um z.B.
 Wörter zu trennen.
 Die Regel 
\begin_inset Quotes eld
\end_inset


\backslash
[&T
\backslash
]
\backslash
|
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

[&T]
\backslash

\backslash

\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
Beachten Sie, dass bestimmte Zeichen - wie [ und 
\backslash
 - in REGEX 
\begin_inset Quotes eld
\end_inset

escaped
\begin_inset Quotes erd
\end_inset

 werden müssen: 
\backslash
[ is also gleichbedeutend mit [ und 
\backslash

\backslash
 bedeutet 
\backslash
.
\end_layout

\end_inset

 trennt zum Beispiel Teilwörter, die auf Aufstrich-t (= [&T]) enden, vom
 folgenden Wort ab.
 
\end_layout

\begin_layout Standard
Wie aber definiere ich, welche Regeln in welcher Stage angewandt werden
 sollen? Hierfür werden die #BeginSubSection() und #EndSubSection()-Statements
 mit dem Stage-Schlüsselwort #>stageX kombiniert.
 X steht dabei für die Nummer der Stage:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(shortener,#>stage3) 
\end_layout

\begin_layout LyX-Code
   // hier beginnen Kürzungsregeln
\end_layout

\begin_layout LyX-Code
   // sie werden auf jedes Teilwort einzeln angewendet
\end_layout

\begin_layout LyX-Code
   
\begin_inset Quotes eld
\end_inset

^ver
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{VER}
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
#EndSubSection(shortener,#>stage4)
\end_layout

\begin_layout Standard
Das Beispiel zeigt also die oben bereits erwähnte Kürzungsregel
\begin_inset Foot
status open

\begin_layout Plain Layout
Bitte beachten Sie, dass das Beispiel - der Übersichtlichkeit halber - stark
 vereinfacht ist.
 Eine so formulierte Regel würde viele falsche Wörter generieren (z.B.
 würde 
\begin_inset Quotes eld
\end_inset

Vers
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

{VER}s
\begin_inset Quotes erd
\end_inset

) und müsste präziser als 
\begin_inset Quotes eld
\end_inset

^[Vv]er
\backslash
+
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{VER}
\begin_inset Quotes erd
\end_inset

 geschrieben werden (d.h.
 die Kürzung wird nur angewandt, wenn ver- von der linguistischen Analyse
 als Vorsilbe - mit einer darauffolgenden Morphemgrenze (+) - erkannt wurde.
\end_layout

\end_inset

.
 #BeginSubSection(shortener,#>stage3) bedeutet also 
\begin_inset Quotes eld
\end_inset

die folgende Regel wird in Stage 3 ausgeführt).
 Die Zeile #EndSubSection(shortener,#>stage4) bedeutet 
\begin_inset Quotes eld
\end_inset

hier endet die Stage 3 und die folgende Regel wird in Stage 4 ausgeführt
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Bitte beachten Sie folgende zusätzliche Regeln im Umgang mit Stages:
\end_layout

\begin_layout Itemize
Stages müssen der Reihe nach abgearbeitet werden (Sie können also nicht
 von Stage 0 zu Stage 4 springen und anschliessend wieder zu Stage 3 zurückkehre
n).
\end_layout

\begin_layout Itemize
Stages müssen nahtlos aufeinanderfolgen (d.h.
 wenn Stage 2 endet - z.B.
 mit #EndSubSection(accentizer,#>stage2) - so muss die folgende Zeile mit
 #BeginSubSection(shortener,#>stage3) beginnen).
\end_layout

\begin_layout Itemize
Die Wörterbuch-Variablen dürfen nicht in Stage 3 definiert werden, da sie
 sonst nicht das ganze Wort enthalten (weisen Sie sie deshalb in Stage 4
 zu!)
\end_layout

\begin_layout Standard
Jede andere Verwendung der Stages für zu unvorhersehbaren Resultaten
\begin_inset Foot
status open

\begin_layout Plain Layout
You've been warned ...
 ! :)
\end_layout

\end_inset

!
\end_layout

\begin_layout Section*
Linguistische Analyse
\end_layout

\begin_layout Standard
Die linguistische Analyse - und die ihr zugrunde liegenden Algorithmen -
 werden in einem separaten Dokument näher beschrieben
\begin_inset Foot
status open

\begin_layout Plain Layout
Siehe hier: 
\begin_inset CommandInset href
LatexCommand href
name "Gel speiende Spiegel und andere (linguistische) Probleme"
target "https://www.vsteno.ch/docs/gel_speiende_spiegel.pdf"

\end_inset


\end_layout

\end_inset

.
 Wichtig ist an dieser Stelle nur zu wissen:
\end_layout

\begin_layout Enumerate
Dass die linguistische Analyse automatisch in Stage 1 vorgenommen wird.
\end_layout

\begin_layout Enumerate
Dass die linguistische Analyse fehlerhafte Resultate produzieren kann.
\end_layout

\begin_layout Enumerate
Wie und wo die linguistische Analyse so angepasst werden kann, dass sie
 möglichst viele richtige Resultate produziert (und falsche Resultate korrigiert
 werden können).
\end_layout

\begin_layout Standard
Aber der Reihe nach:
\end_layout

\begin_layout Standard
Zu Punkt 1: Es ist zu präzisieren, dass die linguistische Analyse nur dann
 vorgenommen wird, wenn kein Eintrag im Wörterbuch gefunden wird (sonst
 wird die LNG-, STD- oder PRT-Form aus dem Wörterbuch verwendet).
\end_layout

\begin_layout Standard
Zu Punkt 2: Zusammengesetzte Wörter sowie Silben- und Morphemgrenzen zu
 erkennen ist für einen Computer alles andere als einfach.
 Der Computer findet zuweilen absurde 
\begin_inset Quotes eld
\end_inset

Kombinationen
\begin_inset Quotes erd
\end_inset

 wie: Spiegel (Verb 
\begin_inset Quotes eld
\end_inset

spie
\begin_inset Quotes erd
\end_inset

 + Substantiv 
\begin_inset Quotes eld
\end_inset

Gel
\begin_inset Quotes erd
\end_inset

), Museum (Substantiv 
\begin_inset Quotes eld
\end_inset

Muse
\begin_inset Quotes erd
\end_inset

 + Präposition 
\begin_inset Quotes eld
\end_inset

um
\begin_inset Quotes erd
\end_inset

), anderen (Präposition 
\begin_inset Quotes eld
\end_inset

an
\begin_inset Quotes erd
\end_inset

 + Relativpronomen 
\begin_inset Quotes eld
\end_inset

deren
\begin_inset Quotes erd
\end_inset

) etc.
\end_layout

\begin_layout Standard
Zu Punkt 3: Es bestehen grundsätzlich zwei Möglichkeiten, falsche Resultate
 zu vermeiden: (1) indem man die linguistische Analyse mit zusätzlichen
 Daten zu Präfixen, Stämmen und Suffixen versorgt und (2) indem man falsche
 Resultate mit REGEX-Regeln korrigiert.
 Beides wird im folgenden kurz erläutert.
\end_layout

\begin_layout Subsection*
(1) Parameter und Variablen
\end_layout

\begin_layout Standard
Zunächst einmal kann das Verhalten der linguistischen Analyse durch allgemeine
 Parameter gesteuert werden, die über die Eingabemaske 
\begin_inset Quotes eld
\end_inset

Maxi
\begin_inset Quotes erd
\end_inset

 verfügbar sind.
 Es sind dies
\begin_inset Foot
status open

\begin_layout Plain Layout
Einige Parameter, wie Sprache und Markierung von Satzanfängen und Substantiven,
 können im Moment noch nicht eingestellt werden.
 Sie werden der Vollständigkeit halber dennoch bereits jetzt in die Dokumentatio
n aufgenommen.
\end_layout

\end_inset

:
\end_layout

\begin_layout Itemize
Sprache: Definiert die Sprache, die für das Wörterbuch (hunspell) und den
 Silbentrenner (phpSyllable) verwendet werden
\begin_inset Foot
status open

\begin_layout Plain Layout
Im Moment ist hier fix 
\begin_inset Quotes eld
\end_inset

de_ch
\begin_inset Quotes erd
\end_inset

 (Deutsch nach Schweizer Norm) für hunspell und 
\begin_inset Quotes eld
\end_inset

ch
\begin_inset Quotes erd
\end_inset

 (Deutsch allgemein) für phpSyllable voreingestellt.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Silben: Wenn angewählt, wendet VSTENO eine Silbentrennung an (Silben werden
 durch das Zeichen - abgetrennt).
 
\end_layout

\begin_layout Itemize
Wörter: Wenn angewählt, versucht VSTENO Teilwörter (zusammengesetzte Wörter)
 zu finden (die Teilwörter werden durch | abgetrennt).
\end_layout

\begin_layout Itemize
Trennen: Gibt an, bei welcher Länge Wörter abgetrennt werden (im Moment
 deaktiviert).
\end_layout

\begin_layout Itemize
Leim: Gibt an, bei welcher Länge Wörter nicht abgetrennt werden (im Moment
 deaktiviert).
\end_layout

\begin_layout Standard
Da im Moment die meisten Funktionen (noch) deaktiviert sind, kann man hier
 nur einstellen, ob man Silben- und Wörtertrennung will oder nicht (werden
 sowohl Silben- als auch Wörtererkennung abgewählt, nimmt VSTENO keine linguisti
sche Analyse vor).
\end_layout

\begin_layout Standard
Die zweite Möglichkeit, das Verhalten der linguistischen Analyse zu verändert,
 besteht darin, eigene Präfixe, Stämme und Suffixe zu definieren.
 Hierzu muss im Header-Teil ein SubSection 
\begin_inset Quotes eld
\end_inset

session
\begin_inset Quotes erd
\end_inset

 definiert werden:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(session) 
\end_layout

\begin_layout LyX-Code
  "prefixes_list" := "an, ver, ge";
\end_layout

\begin_layout LyX-Code
  "stems_list" := "gan-?gen, nann-?t(?:e[rsnm]?)?";
\end_layout

\begin_layout LyX-Code
  "suffixes_list" := "[kh]ei-?t(?:s|en)?, li-?ch(?:(?:e-?r)(?:e[srn]?)?)?";
 #EndSubSection(session)
\end_layout

\begin_layout Standard
Session bedeutet hier nichts anderes, als dass wir Session-Variablen der
 Programmes verändern können (wie bei Inline-Option-Tags).
 Die Session-Variablen für Präfixe, Stämme und Suffixe heissen prefixes_list,
 stems_list und suffixes_list.
 Gesetzt werden die Werte durch den Operator :=
\begin_inset Foot
status open

\begin_layout Plain Layout
Pascal lässt grüssen ...
 :)
\end_layout

\end_inset

 und die einzelnen Präfixe, Suffixe und Stämme stehen innerhalb von Anführungsze
ichen und mit Komma (falls es mehrere sind).
 Im obigen Beispiel werden als drei Präfixe definiert (an-, ver- und ge-),
 sowie die zusätzlichen (unregelmässigen) Stämme -gangen (z.B.
 in 
\begin_inset Quotes eld
\end_inset

gegangen
\begin_inset Quotes erd
\end_inset

) und -nannte in verschiedenen Varianten (genannte, genannter, genanntes
 etc.) und letztlich auch die Suffixe -keit/-heit und -lich in verschiedenen
 Varianten.
\end_layout

\begin_layout Standard
Wie leicht zu erkennen ist, kann auch hier der REGEX-Formalismus verwendet
 werden, allerdings gibt es eine absolut wichtige Einschränkung zu beachten:
 Es dürfen nur so genannte 
\begin_inset Quotes eld
\end_inset

non capturing groups
\begin_inset Quotes erd
\end_inset

 - Zeichen (?:) statt () - verwendet werden.
 Der Grund hierfür ist, dass VSTENO diese Formeln in eine 
\begin_inset Quotes eld
\end_inset

Superformel
\begin_inset Quotes erd
\end_inset

 einbettet, die einzelnen Element erkennt und entsprechend kopiert und wieder
 einfügt.
 Hierfür - für das Kopieren und Einfügen - muss die Superformel ihrerseits
 capturing groups verwenden.
 Werden in den 
\begin_inset Quotes eld
\end_inset

Unterformeln
\begin_inset Quotes erd
\end_inset

 also ebenfalls capturing groups verwendet, dann werden die Variablen falsch
 zugewiesen und das Chaos ist vorprogrammiert!
\end_layout

\begin_layout Standard
Was bewirken nun die obigen Zeilen? Wir erläutern dies mit einigen Beispielen:
\end_layout

\begin_layout Itemize
Präfixe: Die linguistische Analyse von VSTENO wird als erstes eine Silbentrennun
g und dann eine Worterkennung vornehmen.
 Dadurch wird das Wort 
\begin_inset Quotes eld
\end_inset

angeben
\begin_inset Quotes erd
\end_inset

 zum Beispiel zuerst in 
\begin_inset Quotes eld
\end_inset

an-ge-ben
\begin_inset Quotes erd
\end_inset

 und dann in zwei separate Wörter 
\begin_inset Quotes eld
\end_inset

an|ge-ben
\begin_inset Quotes erd
\end_inset

 umgewandelt.
 Dank der prefix_list, weiss die linguistische Analyse nun jedoch, dass
 
\begin_inset Quotes eld
\end_inset

an
\begin_inset Quotes erd
\end_inset

 am Wortanfang als Präfix zu behandeln ist.
 Also wird in einem dritten Schritt 
\begin_inset Quotes eld
\end_inset

an|ge-ben
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

an+ge-ben
\begin_inset Quotes erd
\end_inset

 umgewandelt.
 Bitte beachten Sie, dass Präfixe nur dann als Präfixe behandelt werden,
 wenn sie zuvor als separate Wörter erkannt wurden: In 
\begin_inset Quotes eld
\end_inset

angeln
\begin_inset Quotes erd
\end_inset

 zum Beispiel wird kein Präfix erkannt (weil *geln kein eigentständiger
 Wortteil ist
\begin_inset Foot
status open

\begin_layout Plain Layout
In 
\begin_inset Quotes eld
\end_inset

Angel
\begin_inset Quotes erd
\end_inset

 hingegen wird ein falsches Präfix erkannt, weil 
\begin_inset Quotes eld
\end_inset

an
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

Gel
\begin_inset Quotes erd
\end_inset

 eigentständige Wortteile sind.
 Dies ist einer der Fälle, die nachträglich korrigiert werden müssen.
\end_layout

\end_inset

).
 Etwas unterschiedlich funktioniert das Wort 
\begin_inset Quotes eld
\end_inset

gegeben
\begin_inset Quotes erd
\end_inset

: Während bei 
\begin_inset Quotes eld
\end_inset

angeben
\begin_inset Quotes erd
\end_inset

 die Vorsilbe 
\begin_inset Quotes eld
\end_inset

an
\begin_inset Quotes erd
\end_inset

 als eigenes Wort erkannt wird (weil 
\begin_inset Quotes eld
\end_inset

an
\begin_inset Quotes erd
\end_inset

 als Präposition im Wörterbuch von hunspell vorhanden ist), ist dies bei
 
\begin_inset Quotes eld
\end_inset

ge
\begin_inset Quotes erd
\end_inset

 nicht der Fall.
 Hier weiss VSTENO als nur dank der prefix_list, dass ge als Vorsilbe betrachtet
 werden kann.
\end_layout

\begin_layout Itemize
Stämme: Bei 
\begin_inset Quotes eld
\end_inset

angeben
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

gegeben
\begin_inset Quotes erd
\end_inset

 funktioniert die linguistische Analyse, wie wir gesehen haben, sehr gut
 (weil 
\begin_inset Quotes eld
\end_inset

geben
\begin_inset Quotes erd
\end_inset

 im Wörterbuch existiert).
 Betrachten wir das Wort 
\begin_inset Quotes eld
\end_inset

gegangen
\begin_inset Quotes erd
\end_inset

 hingegen, so wird VSTENO zunächst keine Vorsilbe finden (da *gangen kein
 eigentständiges Wort ist).
 Auch hier können wir der linguistischen Analyse auf die Sprünge helfen,
 indem wir 
\begin_inset Quotes eld
\end_inset

gangen
\begin_inset Quotes erd
\end_inset

 als eigenständigen Stamm definieren.
 Dadurch schlagen wir gleich zwei (oder zuweilen noch mehr) Fliegen auf
 eine Klappe: nicht nur 
\begin_inset Quotes eld
\end_inset

ge+gangen
\begin_inset Quotes erd
\end_inset

 wird nun erkannt, sondern auch 
\begin_inset Quotes eld
\end_inset

ver+gan-gen
\begin_inset Quotes erd
\end_inset

 (weil ver- in der prefix_list steht).
\end_layout

\begin_layout Itemize
Suffixe: Funktionieren nach dem gleichen Prinzip wie Präfixe, mit dem einzigen
 Unterschied, dass sie durch # abgetrennt werden: 
\begin_inset Quotes eld
\end_inset

som-mer#lich
\begin_inset Quotes erd
\end_inset

.
 Im Unterschied zu Präfixen können sich Suffixe verändert (z.B.
 durch Konjugation, Deklination).
 Hier hilft uns REGEX, um die verschiedenen Fälle abzudecken: 
\begin_inset Quotes eld
\end_inset

li-?ch(?:(?:e-?r)(?:e[srn]?)?)?
\begin_inset Quotes erd
\end_inset

 erkennt 
\begin_inset Quotes eld
\end_inset

som-mer#lich
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

sommer#lich-e
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

sommer#lich-es
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

som-mer#lich-er
\begin_inset Quotes erd
\end_inset

 etc.
\end_layout

\begin_layout Standard
Sie ahnen es vielleicht: Die Sache kann ziemlich schnell kompliziert werden,
 sodass man hier wirklich sehr gute Regeln austüfteln muss, um optimale
 Resultate zu erhalten.
 Dennoch ist die linguistische Analyse und das 
\begin_inset Quotes eld
\end_inset

Kalibrieren
\begin_inset Quotes erd
\end_inset

 derselben mit zusätzlichen Variablen ein sehr potentes Mittel, um Wortteile
 mit guter Trefferquote zu erkennen - und dadurch das Formulieren der nachfolgen
den Stenoregeln zu vereinfachen!
\end_layout

\begin_layout Standard
Aber so gut man die Regeln auch wählt, es werden immer falsche Resultate
 generiert werden.
 Diese können nun aber mit einem sogenannten Postprocessing (Nachbearbeitung)
 wiederum korrigiert werden.
\end_layout

\begin_layout Subsection*
(2) Postprocessing
\end_layout

\begin_layout Standard
Ich gebe zu, dass ich Ihnen oben eine etwas heile Welt untergejubelt habe:
 das Beispiel 
\begin_inset Quotes eld
\end_inset

angeben
\begin_inset Quotes erd
\end_inset

 würde tatsächlich nicht zu 
\begin_inset Quotes eld
\end_inset

an+ge-ben
\begin_inset Quotes erd
\end_inset

 aufgelöst, sondern zu 
\begin_inset Quotes eld
\end_inset

an+ge+ben
\begin_inset Quotes erd
\end_inset

.
 Warum? Ganz einfach: Weil Ben ein Eigenname ist, der im Wörterbuch vorkommt
 ...
 VSTENO wird also denken: Wenn 
\begin_inset Quotes eld
\end_inset

Ben
\begin_inset Quotes erd
\end_inset

 existiert und 
\begin_inset Quotes eld
\end_inset

ge-
\begin_inset Quotes erd
\end_inset

 eine Vorsilbe sein kann, dann muss (weil auch an- als selbständiges Wort
 existiert) auch ge- ein Präfix sein!
\begin_inset Foot
status open

\begin_layout Plain Layout
Man wäre hier vielleicht versucht, das Problem dadurch zu lösen, indem man
 definiert, dass Präfixe strikte am Wortanfang stehen müssen, aber das wird
 der Problemstellung nicht gerecht: 
\begin_inset Quotes eld
\end_inset

angegeben
\begin_inset Quotes erd
\end_inset

 zum Beispiel - hier werden die Vorsilben an- und ge- tatsächlich kombiniert
 (und es können auch noch mehr Vorsilben kombiniert werden: 
\begin_inset Quotes eld
\end_inset

unangefochten
\begin_inset Quotes erd
\end_inset

 zum Beispiel hat deren drei ...)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Kurzum: Die linguistische Analyse wird uns mit dem falschen Resultat 
\begin_inset Quotes eld
\end_inset

an+ge+ben
\begin_inset Quotes erd
\end_inset

 beglücken.
 Hier setzt nun das Postprocessing (Nachbearbeitung) an, die als SubSection
 mit dem Namen analyzer ebenfalls im Header stehen muss:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(analyzer)
\end_layout

\begin_layout LyX-Code
   
\begin_inset Quotes eld
\end_inset

(
\backslash
||
\backslash
+)(ben)$
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

-$2
\begin_inset Quotes erd
\end_inset

;
\end_layout

\begin_layout LyX-Code
#EndSubSection(analyzer)
\end_layout

\begin_layout Standard
Diese Regel definiert nun, dass 
\begin_inset Quotes eld
\end_inset

ben
\begin_inset Quotes erd
\end_inset

 am Wortende nie als eigenständiges Wort (Eigenname) betrachtet wird, wenn
 voraus eine Wort- oder eine Morphemgrenze steht.
 Mit anderen Worten: 
\begin_inset Quotes eld
\end_inset

an+ge+ben
\begin_inset Quotes erd
\end_inset

 wird umgeschrieben zu 
\begin_inset Quotes eld
\end_inset

an+ge-ben
\begin_inset Quotes erd
\end_inset

 (Silbengrenze).
 Diese Regel hat noch weitere ungeahnte Auswirkungen: 
\begin_inset Quotes eld
\end_inset

sie|ben
\begin_inset Quotes erd
\end_inset

 zum Beispiel (ja, auch hier hat VSTENO geflissentlich
\begin_inset Foot
status open

\begin_layout Plain Layout
...
 aber ohne zu wissen, was es tut ...
 ;-)
\end_layout

\end_inset

 ein Pronomen 
\begin_inset Quotes eld
\end_inset

sie
\begin_inset Quotes erd
\end_inset

 und den Eigennamen 
\begin_inset Quotes eld
\end_inset

Ben
\begin_inset Quotes erd
\end_inset

 erkannt.
 Auch dies wird nun 
\begin_inset Quotes eld
\end_inset

zurückgeschrieben
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

sie-ben
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Postprocessing Regeln sind also REGEX-Regeln, die im Header steht und -
 ähnlich wie in Stage 2 und 4 - auf das ganze Wort (inklusive Satzzeichen,
 Morphem- und Silbengrenzen) angewendet werden!
\end_layout

\begin_layout Subsection*
Wörterbuch
\end_layout

\begin_layout Standard
In Stage 1 schickt VSTENO das zu berechnende Wort zuerst zum Wörterbuch.
 Dort wird es entweder gefunden oder nicht.
 Wenn es gefunden wird, enthält das Wörterbuch drei Einträge namens LNG
 (linguistical form), STD (standard form) und PRT (print form).
 Der Unterschied zwischen STD und PRT ist grundsätzlich, dass STD eine Standard-
Version von Stenogrammen darstellt.
 PRT wiederum entspricht quasi 1:1 dem Stenogramm, wie es am Ende generiert
 werden soll
\begin_inset Foot
status open

\begin_layout Plain Layout
Weitere Hinweise zur STD und PRT Form finden sich hier: 
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/mitmachen_bei_vsteno.pdf"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Es können nun drei Fälle auftreten: 
\end_layout

\begin_layout Enumerate
Das Wörterbuch enthält nur LNG
\end_layout

\begin_layout Enumerate
Das Wörterbuch enthält sowohl LNG als auch STD
\end_layout

\begin_layout Enumerate
Das Wörterbuch enthält sowohl LNG als auch STD als auch PRT
\end_layout

\begin_layout Standard
Ist das Wort in der PRT Form enthalten, werden keine weiteren Regeln mehr
 abgearbeitet, sondern direkt ein Stenogramm generiert.
 Ist das Wort in der STD Form enthalten, wird die STD-Form vom Parser in
 die PRT überführt, indem er einen Teil der Regeln anwendet.
 Ist nur die LNG-Form enthalten, wird zuerst die STD- und danach die PRT-Form
 generiert.
 Damit dies funktioniert, muss im Parser eine Funktion mit folgendem Format
 definiert sein:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(bundler)
\end_layout

\begin_layout LyX-Code
     // Regeln
\end_layout

\begin_layout LyX-Code
#EndSubSection(bundler,=:std)
\end_layout

\begin_layout Standard
Das Symbol 
\begin_inset Quotes eld
\end_inset

=:
\begin_inset Quotes erd
\end_inset

 bedeutet hier 
\begin_inset Quotes eld
\end_inset

weise zu
\begin_inset Quotes erd
\end_inset

.
 Die Zuweisung erfolgt hier der Variable std, welche der STD-Form entspricht.
 Jede Regelsammlung, die ein Stenografie-System definiert, sollte also eine
 Funktion enthalten, wo im End-Teil der Variablen STD ein Wert zugewiesen
 wird (damit diese für das Wörterbuch verwendet werden kann).
\end_layout

\begin_layout Standard
Das Gleiche gilt für die PRT-Form, die ganz am Ende der Regelsammlung zugewiesen
 werden sollte:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(spacer)
\end_layout

\begin_layout LyX-Code
    // Regeln
\end_layout

\begin_layout LyX-Code
#EndSubSection(spacer,=:prt)
\end_layout

\begin_layout Standard
Die Zuweisung der LNG-Form erfolgt in VSTENO automatisch: Sie ist jene Form,
 die direkt der linguistischen Analyse + Postprocessing entstammt.
\end_layout

\begin_layout Section*
Verzweigungen
\end_layout

\begin_layout Standard
Funktionen können auch definieren, welche Regeln bzw.
 welche Funktion als nächstes ausgeführt werden soll.
 Wird nichts angegeben, wird einfach die nächste Regel (aus der folgenden
 Funktion) ausgeführt.
 Alternativ kann eine bedingte Verzweigung angegeben werden:
\end_layout

\begin_layout LyX-Code
#BeginSubSection(trickster)
\begin_inset Foot
status open

\begin_layout Plain Layout
Hier also nochmals der berüchtigte Trickster - es bleibt zu hoffen, dass
 VSTENO sich dieses unseligen Compagnons bis zur finalen Version 0.1 definitiv
 entledigen kann ...
 Der Trickster eignet sich deshalb als Beispiel, weil er gleich zwei bedingte
 Verzweigungen enthält.
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
     // Regeln
\end_layout

\begin_layout LyX-Code
#EndSubSection(trickster,=>decapitalizer,!>filter) 
\end_layout

\begin_layout Standard
Diese Funktion definiert folgende bedingte Verzweigungen:
\end_layout

\begin_layout Enumerate
Wenn sich das Wort nach Ausführung des Trickster nicht geändert hat, verzweige
 zu Funktion decapitalizer.
\end_layout

\begin_layout Enumerate
Wenn sich das Wort nach Ausführung von Trickster verändert hat, verzweige
 zu Funktion filter.
\end_layout

\begin_layout Standard
Verglichen wird also das Wort am Anfang und am Ende der Funktion.
 Bedingte und unbedingte Verzweigungen können in VSTENO mit folgenden Zeichen
 definiert werden:
\end_layout

\begin_layout Itemize
=>: 
\begin_inset Quotes eld
\end_inset

verzweige wenn gleich
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
!>: 
\begin_inset Quotes eld
\end_inset

verzweige wenn nicht gleich
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
>>: 
\begin_inset Quotes eld
\end_inset

verzweige in jedem Fall
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection*
Gross- und Kleinbuchstaben
\end_layout

\begin_layout Standard
Dieses Thema haben wir bis jetzt stillschweigend übergangen bzw.
 nur hie und da kurz angedeutet.
 Es geht um die Frage, wie Klein- und Grossbuchstaben in VSTENO verwendet
 werden.
\end_layout

\begin_layout Standard
Tatsache ist, dass Gross- und Kleinschreibung durchaus einen Unterschied
 machen können: das Substantiv 
\begin_inset Quotes eld
\end_inset

Waren
\begin_inset Quotes erd
\end_inset

 und das Verb 
\begin_inset Quotes eld
\end_inset

waren
\begin_inset Quotes erd
\end_inset

 werden in Stolze-Schrey z.B.
 völlig unterschiedlich geschrieben.
 Dies ist der Grund, warum VSTENO zu Beginn der ParserChain die Gross- und
 Kleinschreibung beibehält - und zwar bis und mit Shortener.
 Wenn Sie also im Shortener die Regel:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

war
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

{WAR}
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
definieren, so wird diese nur auf das Verb 
\begin_inset Quotes eld
\end_inset

waren
\begin_inset Quotes erd
\end_inset

 (ergibt 
\begin_inset Quotes eld
\end_inset

{WAR}en
\begin_inset Quotes erd
\end_inset

) nicht aber auf 
\begin_inset Quotes eld
\end_inset

Waren
\begin_inset Quotes erd
\end_inset

 (bleibt 
\begin_inset Quotes eld
\end_inset

Waren
\begin_inset Quotes erd
\end_inset

) angewendet
\begin_inset Foot
status open

\begin_layout Plain Layout
Eine andere Sache ist natürlich, wenn das Verb 
\begin_inset Quotes eld
\end_inset

Waren
\begin_inset Quotes erd
\end_inset

 dummerweise am Satzanfang steht und ebenfalls gross geschrieben wird ...
 ;-)
\end_layout

\end_inset

.
 Da es bei den meisten Wörtern jedoch keinen Unterschied macht, ob sie gross
 oder klein geschrieben werden - und es mühsam wäre, in den Regeln jedesmal
 sämtliche Varianten in eckigen Klammern anzugeben - wandelt VSTENO nach
 dem Shortener sämtliche Gross- in Kleinbuchstaben um! Alle nachfolgenden
 Schritte (Normalizer, Bundler, Transcriptor, Substituter) arbeiten somit
 mit Kleinbuchstaben.
 Ausgenommen von der Umwandlung in Kleinbuchstaben sind allerdings Veränderungen
, die der Shortener selbst vornimmt: Wenn der Shortener im Wort 
\begin_inset Quotes eld
\end_inset

wahrhaftig
\begin_inset Quotes erd
\end_inset

 also die Kürzung -haft zu 
\begin_inset Quotes eld
\end_inset

wahr{HAFT}ig
\begin_inset Quotes erd
\end_inset

 ersetzt, so verbleibt der Teil 
\begin_inset Quotes eld
\end_inset

{HAFT}
\begin_inset Quotes erd
\end_inset

 auch nach dem Shortener in Grossbuchstaben.
\begin_inset Foot
status open

\begin_layout Plain Layout
Wir weisen hier - en passant - noch auf einen weiteren Aspekt hin: Wichtig
 ist in diesem Beispiel auch, dass der Normalizer (der den Vokal 
\begin_inset Quotes eld
\end_inset

ah
\begin_inset Quotes erd
\end_inset

 zu 
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

 umschreibt) erst NACH dem Shortener abgearbeitet wird, da sonst die Kürzung
 
\begin_inset Quotes eld
\end_inset

war
\begin_inset Quotes erd
\end_inset

 auch auf das Wort 
\begin_inset Quotes eld
\end_inset

wa(h)rhaftig
\begin_inset Quotes erd
\end_inset

 angewandt würde.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die konsequente Kleinschreibung - mit Ausnahme der vom Shortener eingesetzten
 Teile, wie gesagt - hat den Vorteil, dass wir Grossbuchstaben nun dazu
 benutzen können, jene Teile des Wortes zu markieren, die von bestimmten
 Regeln bereits umgeschrieben wurden.
 Wenn also der Shortener im Wort 
\begin_inset Quotes eld
\end_inset

Andenken
\begin_inset Quotes erd
\end_inset

 das Prefix an- erkennt und gross markiert (also 
\begin_inset Quotes eld
\end_inset

ANdenken
\begin_inset Quotes erd
\end_inset

), dann 
\begin_inset Quotes eld
\end_inset

weiss
\begin_inset Quotes erd
\end_inset

 der Bundler später, dass er 
\begin_inset Quotes eld
\end_inset

gross N
\begin_inset Quotes erd
\end_inset

 und 
\begin_inset Quotes eld
\end_inset

klein d
\begin_inset Quotes erd
\end_inset

 nicht zum Zeichen [ND] zusammenfassen darf.
 Die Regel für den Bundler lautet nämlich:
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

nd
\begin_inset Quotes erd
\end_inset

 => 
\begin_inset Quotes eld
\end_inset

[ND]
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Der Bundler soll also nur die unbearbeitete (d.h.
 klein geschriebene) Zeichenfolge 
\begin_inset Quotes eld
\end_inset

nd
\begin_inset Quotes erd
\end_inset

 bündeln.
 
\end_layout

\begin_layout Part*
VPAINT
\end_layout

\begin_layout Standard
Wie bereits erwähnt wurde VPAINT als Hilfsprogramm für VSTENO entwickelt:
 In der Version SE1 rev0 ist die Definition der Zeichen grundsätzlich nur
 via einen Text-Editor möglich.
 Stenografische Zeichen erscheinen darin als lange Listen abstrakter Zahlen,
 die keine visuelle Vorstellung der Zeichen erlaubt und ein intuitives Entwerfen
 und Bearbeiten von Stenozeichen praktisch unmöglich machen.
 Als Abhilfe sollte hier der grafische Editor VPAINT (VPAINT - an Amazing
 Interactive New Tool
\begin_inset Foot
status open

\begin_layout Plain Layout
Vorläufig aber eher VPAINT - an Awfully Instable Nerd Tool (und man möge
 mir zugestehen, dass im Englischen die Variante instable für unstable,
 wenn auch seltener, durchaus existiert;-) 
\end_layout

\end_inset

) schaffen.
\end_layout

\begin_layout Standard
Wie bereits in Version (Rückblick) dargelegt, war eigentlich geplant, mit
 VPAINT 
\begin_inset Quotes eld
\end_inset

durchzustarten
\begin_inset Quotes erd
\end_inset

, d.h.
 mit VPAINT eine neue (bessere) SE2 zu entwickelt, diese sowohl in JavaScript
 als auch in PHP zu implementieren und schliesslich die SE1 in einer 
\begin_inset Quotes eld
\end_inset

Operation am offenen Herzen
\begin_inset Quotes erd
\end_inset

 vollständig aus VSTENO zu entfernen und durch die SE2 zu ersetzen.
 Aus bereits dargelegten Gründen wurden diese Pläne geändert und stattdessen
 versucht, VPAINT mit einer - zwischenzeitlich zu einer rev1 weiterentwickelten
 SE1 - rückwärtskompatibel zu machen.
 Dies alles gefolgt von der weiteren Entscheidung, in der Version 0.1rc die
 SE1 rev1 komplett zu deaktivieren und nur dei SE1 rev0 zu verwenden.
\end_layout

\begin_layout Standard
Der langen Rede kurzer Sinn: VPAINT ist mit der SE1 rev0 inkompatibel! Dennoch
 kann VPAINT in der Version 0.1rc von VSTENO wenigstens dazu verwendet werden,
 Stenografiezeichen zu visualisieren und - in eingeschränktem Masse - zu
 editieren, um schönere Zeichen zu gestalten und das Entwerfen der Stenozeichen
 intuitiver zu gestalten.
\end_layout

\begin_layout Standard
Die folgenden Ausführen sollen somit aufzeigen, was möglich ist - und was
 Sie tunlichst (!) vermeiden sollten!
\end_layout

\begin_layout Section*
Visualisieren
\end_layout

\begin_layout Standard
Mit VPAINT können Stenozeichen aus dem Text-Editor (also so, wie wir sie
 bis jetzt editiert haben) visualisiert werden.
 Gehen Sie hierzu wie folgt vor:
\end_layout

\begin_layout Enumerate
Gehen Sie auf die Seite www.vsteno.ch und loggen Sie sich ein.
\end_layout

\begin_layout Enumerate
Wählen Sie das Modell custom (1x links unten auf den Button standard klicken)
\end_layout

\begin_layout Enumerate
Klicken Sie in der linken Navigationsleiste auf VPAINT (das Programm wird
 geöffnet)
\end_layout

\begin_layout Enumerate
Laden Sie nun ein Zeichen, indem Sie aus dem Pulldown-Menü Select das Zeichen
 wählen und auf Load klicken.
\end_layout

\begin_layout Standard
Sie sehen nun die folgende Darstellung:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename vpaint_geladenes_zeichen.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
Die Darstellung zeigt das Zeichen 
\begin_inset Quotes eld
\end_inset

NN
\begin_inset Quotes erd
\end_inset

 aus dem System Stolze-Schrey in vertikaler Stellung (90 Grad).
\end_layout

\begin_layout Section*
Editieren
\end_layout

\begin_layout Standard
Sie können das geladene Zeichen nun editieren.
 Da die SE1 rev0 nur horizontale Punktverschiebungen beherrscht, empfiehlt
 sich das folgende Vorgehen: Neigen Sie die Rotationsachse auf die gewünschte
 Neigung (z.B.
 60 Grad in der Standardeinstellung von VSTENO).
 Sie erreichen dies durch Ziehen (klicken und ziehen) des grünen Punktes
 der Rotationsachse mit der Maus.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename vpaint_nn_60grad.png
	scale 60

\end_inset


\end_layout

\begin_layout Standard
Editieren Sie nun das Zeichen so, dass es in dieser Neigung gut aussieht:
\end_layout

\begin_layout Itemize
Verschieben der Punkte mit der Maus (der aktuelle Punkt ist gelb umrandet).
\end_layout

\begin_layout Itemize
Anpassen der Spannungen (A1 = Eingangsspannung, A2 = Ausgangsspannung).
\end_layout

\begin_layout Standard
Mit der Taste 
\begin_inset Quotes eld
\end_inset

s
\begin_inset Quotes erd
\end_inset

 können Sie zwischen der normalen und der schattierten Variante des Zeichens
 hin- und herwechseln.
 Die Strichdicke kann mit L1 und R1 angepasst werden
\begin_inset Foot
status open

\begin_layout Plain Layout
Im Unterschied zur SE1 verfügt die SE2 über eine linke (L1) und eine rechte
 Dicke (R1).
 Die Dicke 1 (L1, R1) steht für das normale, die Dicke 2 (L2, R2) für das
 schattierte Zeichen.
 Beachten Sie bitte, dass die Dicke der SE1 dem Mittelwert von L1 und L1
 (L2 und L2 für das schattierte Zeichen) entspricht, als TH = (L1+L2) /
 2.
 Um die linke und rechte Dicke der SE2 zu visualisieren, können Sie mit
 der Taste 
\begin_inset Quotes eld
\end_inset

q
\begin_inset Quotes erd
\end_inset

 zwischen SE1 (Mittellinienmodellierung) und SE2 (Umrissmodellierung) umschalten.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Wenn das Zeichen in der 60-Grad-Stellung gut aussieht, richten Sie die Rotations
achse wieder auf 90 Grad aus.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename vpaint_90grad.png
	scale 60

\end_inset


\end_layout

\begin_layout Standard
Und nun kommt der schöne Teil: Nehmen Sie ein Blatt Papier und notieren
 Sie sich die Koordinaten und die Spannungen (und eventuell Dicken) der
 Punkte der Reihe nach
\begin_inset Foot
status open

\begin_layout Plain Layout
Sie können sich mit den Pfeiltasten < und > rechts jeweils einen Punkt nach
 links oder nach rechts bewegen.
\end_layout

\end_inset

.
 Ja genau: Es ist Handarbeit gefragt! VPAINT ist mit der SE1 rev0 inkompatibel
 - versuchen Sie nicht die Daten zu speichern - klicken Sie NICHT auf den
 Button ->DB!
\begin_inset Foot
status open

\begin_layout Plain Layout
Sie wurden gewarnt: Wenn Sie auf ->DB klicken, exportiert VPAINT die Daten
 in den Text-Editor der SE1 rev0.
 Das exportierte Format entspricht allerdings der SE1 rev1 (und ist mit
 der SE1 rev0 nicht kompatibel).
 Wenn Sie danach noch einmal abspeichern klicken, wird Ihr aktuelles Modell
 mit KORRUPTEN Daten überschrieben (und wird unbrauchbar)!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
VPAINT kann Ihnen also lediglich helfen, bestehende Zeichen zu visualisieren
 und zu editieren.
 Die Daten müssen anschliessend aber von Hand via Texteditor in VSTENO 0.1rc
 (SE1 rev0) übertragen werden.
\end_layout

\begin_layout Section*
Zukunftsmusik
\end_layout

\begin_layout Standard
Wenn Sie gerne einen Blick auf die SE2 werfen und etwas mit dem Programm
 VPAINT herumprobieren möchten, dann verwenden Sie dafür bitte den folgenden
 Link:
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/js/vsteno_editor.html"

\end_inset


\end_layout

\begin_layout Standard
Dies ist die allgemeine (d.h.
 nicht an VSTENO gekoppelte) Version von VPAINT.
 Sie funktioniert auch, wenn Sie nicht eingeloggt sind und Sie können hier
 also sicher sein, dass Sie nichts kaputt machen können.
 Sie finden hier auch eine Auflistung der Tastaturbefehlen, mit denen Sie
 weitere Funktionen von VPAINT nutzen können.
\end_layout

\begin_layout Part*
Programm
\end_layout

\begin_layout Section*
Ja, ja ...
 Dokumentation
\end_layout

\begin_layout Standard
Nach dem praktischen und dem linguistischen Teil stünde nun natürlich noch
 die Dokumentation des (bzw.
 der) Programme(s) selber an.
 Dies, damit interessierte Programmierer/innen VSTENO unter Umständen klonen
 (oder forken:) und selber weiterentwickeln können.
\end_layout

\begin_layout Standard
Wie allgemein bekannt ist das Dokumentieren so ein bisschen das Stiefkind
 des/der Programmierer/in: Es wird in der Regel erst ganz am Schluss erledigt
 - wenn das Progamm (endlich!) läuft und man weder Zeit noch wirklich Lust
 hat, 
\begin_inset Quotes eld
\end_inset

das alles auch noch aufzuschreiben
\begin_inset Quotes erd
\end_inset

.
 Ausserdem kann es gut sein, dass gewisse Programmteile bereits vor Monaten
 geschrieben wurden - und nun, wo man sie dokumentieren sollte, weiss man
 selber nicht mehr so genau, was man damals eigentlich so alles programmiert
 hat, und muss sich deshalb selber wieder in alten Code reinknien (von dem
 man, wie gesagt, überhaupt schon froh ist, dass er läuft:)
\end_layout

\begin_layout Standard
Anyway: Ich bin keine Ausnahme von der Regel und berufe mich deshalb auf
 eine weitere Programmierregel: my code is my documentation ...
 ! Natürlich ist das die Billig-Lösung, aber sie ist so schlecht nicht:
 Tatsächlich habe ich im Laufe der Entwicklung von VSTENO den Quellcode
 reichlich dokumentiert.
 Anhand der eingefügten Kommentare sollte das Programm also grundsätzlich
 nachvollziehbar sein.
\end_layout

\begin_layout Standard
Nicht nachzuvollziehen sind aber vielleicht gewisse allgemeine Entscheidungen
 und Ansätze, die bei diesem Projekt spezifisch sind.
 Auf einige solche Aspekte möchte ich im Folgenden doch kurz eingehen, um
 wenigstens den Zugang zum Programm zu erleichtern.
\end_layout

\begin_layout Standard
Ebenfalls wichtig scheint mir zu dokumentieren, wie das Programm grundsätzlich
 lokal installiert und zum Laufen gebracht werden kann.
 Es existiert bis dato nämlich kein Installer und VSTENO verlangt einige
 Abhängigkeiten und Konfigurationen, die korrekt vorgenommen werden müssen,
 damit es läuft.
\end_layout

\begin_layout Standard
Grundsätzlich werde ich mich in allen Ausführungen sehr kurz und allgemein
 halten und als erstes auch nur das Minimum dokumentieren
\begin_inset Foot
status open

\begin_layout Plain Layout
Weil es ja seit August schon eine Weile her ist, dass das Programm das letzte
 Mal dokumentiert wurde.
 Im Moment soll die Dokumentation vor allem möglichst schnell verfügbar
 sein.
\end_layout

\end_inset

 und weitere Aspekt später ergänzen.
\end_layout

\begin_layout Subsection*
Installieren
\end_layout

\begin_layout Standard
Wenn Sie VSTENO lokal installieren möchten, müssen einige Pakete (Abhängikeiten)
 installiert werden und die Datenbank vorgängig konfiguriert werden.
 Im folgenden gehe ich davon aus, dass Sie grundsätzlich mit der Installation
 von Paketen vertraut sind (wie z.B.
 sudo apt-get install <paketname> unter Debian
\begin_inset Foot
status open

\begin_layout Plain Layout
VSTENO wurde unter Trisquel, einem Debian-Abkömmling, entwickelt.
\end_layout

\end_inset

 oder anderen Paketmanagern auf anderen Disktributionen).
 Ich werde mich deshalb auf die Angabe der Pakete beschränken, die installiert
 werden müssen:
\end_layout

\begin_layout Enumerate
Apache-Webserve
\end_layout

\begin_layout Enumerate
PHP
\end_layout

\begin_layout Enumerate
mySQL (ebenfalls nützlich: MySQL Workbench)
\end_layout

\begin_layout Enumerate
hunspell
\begin_inset Foot
status open

\begin_layout Plain Layout
Ich füge hunspell bereits an, weil es voraussichtlich bald in VSTENO integriert
 wird: benötigt wird ein deutsches Wörterbuch (am besten de_CH).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Klonen Sie anschliessend die Programme VSTENO und VPAINT (sowie verwendete
 Libraries wie paper.js und phpSyllable
\begin_inset Foot
status open

\begin_layout Plain Layout
Auch phpSyllable wird voraussichtlich bald in VSTENO integriert.
\end_layout

\end_inset

:
\end_layout

\begin_layout Enumerate
git clone https://github.com/marcelmaci/vsteno
\begin_inset Foot
status open

\begin_layout Plain Layout
Im Verzeichnis des Webservers (vermutlich /var/www/html).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Konfigurieren Sie die Datenbank:
\end_layout

\begin_layout Enumerate
Legen Sie einen Datenbankbenutzer an
\end_layout

\begin_layout Enumerate
Tragen Sie die Zugangsdaten in den PHP-Quellcode ein (Datei dbpw.php)
\end_layout

\begin_layout Enumerate
Erstellen Sie die leeren Datanbank-Tables (kann einfach erreicht werden,
 indem die Datei init_db.php im Browser aufgerufen wird)
\end_layout

\begin_layout Standard
Wenn Sie nun localhost/vsteno/php/input.php im Browser aufrufen, sollten
 Sie das Eingabe-Formular von VSTENO sehen.
 Wenn dies der Fall ist, läuft das Programm - allerdings enhält es noch
 keine linguistischen Daten.
 
\end_layout

\begin_layout Enumerate
Legen Sie ein VSTENO-Benutzerkonto an (leer) und wählen Sie das Modell custom.
\end_layout

\begin_layout Enumerate
Holen Sie sich die Definitionen für das System Stolze-Schrey 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/marcelmaci/vsteno/blob/master/ling/grundschrift_stolze_schrey_redesign.txt"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Kopieren Sie Header, Font und Rules in die Datenbank (nutzen Sie hierfür
 die Links zu den Texteditoren: Header, Zeichen, Regeln).
\end_layout

\begin_layout Enumerate
Loggen Sie sich mit einem Datenbankprogramm (mySQL Workbench) in die Datenbank
 ein:
\end_layout

\begin_deeper
\begin_layout Enumerate
öffnen Sie die Table models
\end_layout

\begin_layout Enumerate
tragen Sie folgende Werte ein: user_id = 99999, name = DESSBAS
\end_layout

\end_deeper
\begin_layout Standard
Loggen Sie sich aus, schliessen Sie den Browser und starten Sie das Ganze
 neu.
 Mit etwas Glück funktioniert's ...
 ! ;-)
\end_layout

\begin_layout Subsection*
VSTENO
\end_layout

\begin_layout Standard
Im Folgenden einige Hinweise zu VSTENO:
\end_layout

\begin_layout Itemize
VSTENO wurde ausschliesslich in PHP (ohne JavaScript
\begin_inset Foot
status open

\begin_layout Plain Layout
Einzige Ausnahme ist die Deaktivierung des Tabulator-Events für den Texteditor
\end_layout

\end_inset

) programmiert.
\end_layout

\begin_layout Itemize
Das Verzeichnis php/ enthält nicht nur den Quellcode sondern auch die Webseite
 von VSTENO
\begin_inset Foot
status open

\begin_layout Plain Layout
Wer also nur den Programmcode möchte, muss diesen von der Webseite trennen.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Sämtlicher Quellcode von VSTENO befindet sich innerhalb des Verzeichnisses
 php/.
\end_layout

\begin_layout Itemize
VSTENO verwendet die Bibliothek phpSyllable, die sich im Verzeichnis ../phpSyllabl
e/ befindet.
\end_layout

\begin_layout Standard
Alles Übrige sollte ziemlich selbsterklärend sein.
\end_layout

\begin_layout Subsection*
VPAINT
\end_layout

\begin_layout Itemize
VPAINT wurde in PaperScript programmiert, d.h.
 JavaScript unter Verwendung der Bibliothek paper.js.
\end_layout

\begin_layout Itemize
Sämtlicher Code (auch der von paperl.js) befindet sich im Verzeichnis ../js/
\end_layout

\begin_layout Itemize
Das Skript buildjs.sh fügt alle Programmteile von VPAINT zu einem einzigen
 File zusammen
\begin_inset Foot
status open

\begin_layout Plain Layout
Ich wollte den Quellcode einigermassen überschaubar aufteilen und die Möglichkei
t haben, Lizenzvermerke automatisiert einzufügen, deshalb die Aufteilung
 und das Skript.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Auch hier sollte der Rest selbsterklärend sein.
\end_layout

\begin_layout Subsection*
JSON & Co
\end_layout

\begin_layout Standard
VSTENO ist eine fröhliche Import-Export-Escape-Hölle ...
 :-) Mit anderen Worten: Da zwei Programmiersprachen, eine Datenbank, HTML-Code,
 REGEX und auch die Shell verwendet wird, müssen die Daten zum Teil mehrmals
 von einer Umgebung in eine andere überführt, konvertiert und escaped werden.
\end_layout

\begin_layout Standard
Während das Escaping mit Standard-Funktionen erledigt werden kann, war der
 export der linguistischen Daten von PHP zu JS etwas speziell und soll deshalb
 hier kurz erläutert werden:
\end_layout

\begin_layout Itemize
An Anfang lagen die Daten von VSTENO innerhalb von PHP als (associative)
 arrays vor.
\end_layout

\begin_layout Itemize
VPAINT definierte seine eigenen Datenstrukturen
\begin_inset Foot
status open

\begin_layout Plain Layout
Es war ja vorgesehen, die SE1 zu entfernen und die SE2 komplett neu zu gestalten.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
Mit der Idee der Rückwärtskompatibilität wurde ein Export von PHP zu JS
 realisiert:
\end_layout

\begin_deeper
\begin_layout Itemize
in PHP wird eine mit JS kompatible Objekt-Datenstruktur definiert
\begin_inset Foot
status open

\begin_layout Plain Layout
siehe export_se1_data_to_editor.php.
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
die Datenstruktur wird mit JSON exportiert
\begin_inset Foot
status open

\begin_layout Plain Layout
Das PHP-Objekt wird 
\begin_inset Quotes eld
\end_inset

stringified
\begin_inset Quotes erd
\end_inset

 eine JS-Variablen zugwiesen, die direkt in die HTML-Seite von VPAINT geschriebe
n wird; von dort verwendet Sie VPAINT wie eine normale Variable.
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Itemize
Der umgekehrte Weg, also von JS zu PHP, sollte in der SE1 rev1 folgendermassen
 laufen:
\end_layout

\begin_deeper
\begin_layout Itemize
VPAINT exportiert die Daten ins eigenen VSTENO-Format (ASCII-Text, der vom
 Parser von VSTENO geparst werden kann).
\end_layout

\begin_layout Itemize
Um die Datenbank-Routinen nicht nochmals neu schreiben zu müssen, kreiiert
 VPAINT eine Formular-Seite, die genau gleich aussieht wie edit_font.php
 und die zu schreibenden Daten direkt enthält).
\end_layout

\begin_layout Itemize
Von der Datenbank aus kann VSTENO die Daten wieder lesen und parsen, sodass
 sie wieder im ursprünglichen Format der (associative) arrays vorliegen.
\end_layout

\end_deeper
\begin_layout Standard
Der Datenfluss von VSTENO zu VPAINT und zurück zu VSTENO ist also gewissermassen
 zirkulär: er beschreitet andere Wege und kann auch nicht umgekehrt werden
 (JSON-Export funktioniert nur von PHP->JS; ASCII-Export funktioniert nur
 von JS->DB->PHP; unmöglich ist also JSON: JS->PHP oder ASCII: DB->JS).
\end_layout

\begin_layout Standard
Für die SE2 war (ist) vorgesehen sämtliche Import/Export von und zu der
 Datenbank sowohl von PHP als auch von JS aus mit JSON zu lösen.
\end_layout

\begin_layout Subsection*
PARSER
\end_layout

\begin_layout Standard
Der ASCII-Parser von VSTENO (von dem im vorherigen Kapitel die Rede war)
 befindet sich in parser.php und ist im Wesentlichen eine Abfolge von REGEX-Patte
rn, mit denen die ASCII-Daten aufgeschlüsselt und in Variablen geschrieben
 werden.
\end_layout

\begin_layout Standard
Für den Export der Daten von PHP zur Datenbank werden die Daten dann gemäss
 der Formelsyntax von VSTENO zusammengefügt.
\end_layout

\begin_layout Subsection*
DATENBANK
\end_layout

\begin_layout Standard
Die Datenbank enthält folgende Tables:
\end_layout

\begin_layout Itemize
users: Benutzerdaten (login, passwort, name, email etc.)
\end_layout

\begin_layout Itemize
models: Definitionen für Stenografische Systeme (header, font, rules; die
 Modelle haben einen Namen und sind mit einer user_id verknüpft)
\end_layout

\begin_layout Itemize
Wörterbücher:
\end_layout

\begin_deeper
\begin_layout Itemize
purgatorium: enthält Wörter, die markiert wurden und reviewed werden müssen.
\end_layout

\begin_layout Itemize
elysium: enthält Ausnahmen (STD-, PRT-Formen)
\end_layout

\begin_layout Itemize
olympus: enthält regelmässige, richtige Wörter (die zum Überprüfen des Modells
 verwendet werden können)
\end_layout

\end_deeper
\begin_layout Standard
Die Tables users und models werden nur ein Mal für alle Nutzer angeleget.
 Die Tables purgatorium, elysium und olympus werden für jeden Nutzer individuell
 angelegt.
 Der Table name ergibt sich dabei aus der user_id der Benutzers plus den
 Anfangsbuchstaben der Table:
\end_layout

\begin_layout Itemize
E = elysium
\end_layout

\begin_layout Itemize
P = purgatorium
\end_layout

\begin_layout Itemize
O = olympus
\end_layout

\begin_layout Standard
Ausserdem wir zwischen einem Standard und einem Custom-Modell unterschieden:
\end_layout

\begin_layout Itemize
Z = standard
\end_layout

\begin_layout Itemize
X = custom
\end_layout

\begin_layout Standard
Hier ein paar Beispiele für Table-Namen:
\end_layout

\begin_layout Itemize
XE0000008: custom Wörterbuch Elysium der user_id 8
\end_layout

\begin_layout Itemize
ZP0000001: standard Wörterbuch Purgatorium der user_id 1
\end_layout

\begin_layout Subsection*
SUPERUSER
\end_layout

\begin_layout Standard
In VSTENO gibt es Standard-Nutzer (privilege level 1) und Superuser (privilege
 level 2).
 Standard-Nutzer können nur custom Wörterbücher beschreiben.
 Superuser können alle Tables beschreiben.
 VSTENO bietet keine erweiterten Funktionen zur Nutzerverwaltung: Nutzer
 können nur 1x angelegt werden.
 Danach kann das Passwort und andere Nutzerdaten nicht mehr geändert werden.
 Solche Änderungen (z.B.
 die Erhöhung des privilege levels müssen deshalb von Hand in der Datenbank
 vorgenommen werden).
\end_layout

\begin_layout Subsection*
SESSION
\end_layout

\begin_layout Standard
Die Session-Variable wird von VSTENO rege genutzt.
 Sämtliche benutzten Daten sind aus session.php ersichtlich.
 Die Variable können auch via Inline-Option-Tags verändert werden
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://www.vsteno.ch/docs/vsteno_tutorial.pdf"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection*
Zum Schluss
\end_layout

\begin_layout Standard
Diese Dokumentation entstand wie immer mit einem relativ knappen Zeitbudget.
 Ich hoffe, dass trotzdem die wesentlichsten Aspekte abgedeckt werden konnten.
 Bei Unklarheiten stehe ich gerne zur Verfügung (m.maci@gmx.ch).
 
\end_layout

\end_body
\end_document
