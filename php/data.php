<?php

/* VSTENO - Vector Steno Tool with Enhanced Notational Options
 * (c) 2018 - Marcel Maci (m.maci@gmx.ch)
 
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
 
 
/*
14. August 2018: New rule formalism

Either:    A => B
Or:        A => array(a, b, c, d ...)
where:     a is the original B (i.e. replacement for REGEX)
           b, c, d ... are exceptions: if one of the matches, the rule won't be applied
           
           can be used for example for word "geschäft": 
           define a rule which replaces "schäft" => "{SCHAFT}"
           define exception "geschäft" (rule shouldn't be applied to that word)

           in PHP:
           "schaft$ => array( "{SCHAFT}", "Geschäft(en?)?" )

           Advantages:
           (1) exceptions can be indicated together with rules (more logical and better to understand)
           (2) possible to use REGEX also for exceptions (big plus)
           
           Performance-whise this should also be beneficial since exceptions are only tested if first part of rule matches
           (in the old version, every exception was tested on every word).
*/
 
// 25. September 2018: read data from database

require_once "import_model.php";
require_once "parser.php";

global $font, $combiner, $shifter;
global $rules, $functions_table;
global $insertion_key;

// font (tokens): use old variables and definitions for the moment
//base definitions for all tokens  x, y, t, d1, th, 0, d2, t2, /**/  
// IMPORTANT: when defining abbreviations you cannot use the same key in array twice! E.g: if you define token m and then try to define abbreviation "mit" => m it wont work! Workaround: define "mit" => "m/"
$steno_tokens_master = array(  

                        // rescription rules
                        // shortings - IMPORTANT: shortings must be returned with a "/" at the end, otherwise there is a key conflict in the array (2 x same key) !!! 
                        // shortings that can be represented as a single steno-token (=> now integrated above as normal rules with multiple search_strings)
                        "IST" => array( /*header*/5,   0.5,0, 0.5,   2,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0.5, 9.5, 0.5, 1, 1.0, 0, 0, 0.5, /**/  1, 10, 0.5, 0, 1.0, 0, 0, 0.5, /**/  0.5, 10.5, 0.5, 0, 1.5, 0, 0, 0.5, /**/  0, 10, 0.5, 0, 2.5, 0, 0, 0.5, /**/  0.5, 9.5, 0.5, 0, 3.0, 0, 1, 0.5 ),
                        "WAS"  => array( /*header*/ 5, 0.5, 0, 0.5, 2, 1, 0, ""/**/,"","","","",1,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/1.5, 8.5, 0.5, 1, 1.0, 0, 0, 0.5, /**/  2.25,9.25, 0.5, 2, 1.5, 0, 0, 0.5, /**/ 5, 10, 0.5, 98, 1.5, 0, 0, 0.5, /**/ 2.25,9.25, 0.5, 2, 1.5, 0, 0, 0.5, /**/1.5,8.5,0.5, 0, 2.5, 0, 0, 0.5,/**/0,6, 0.5, 0, 3.0, 0, 0, 0.5, /**/  0.5,  2, 0.5, 0, 3.0, 0, 0, 0.5, /**/  2.5,0, 0.5, 0, 1.5, 0, 2, 0.5, /**/  4.5, 2, 0.5, 0, 1.0, 0, 1, 0.5 /**/ ),
                        "AUCH" => array( /*header*/ 5,   1,-1, 0.5, 0.5, 0.5, 0, ""/**/,"","","","",1,1,1,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/   0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5, /**/   2.5, 10, 0.7, 2, 2.5, 0, 0, 0.8, /**/  5, 7, 0.8, 0, 3.0, 0, 0, 0.5, /**/   5, -8, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 0, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 2, 0.5, /**/   5, 0, 0.5, 0, 1.0, 0, 1, 0.5, /**/  ),
                        "TIG"  => array( /*heade*/ 10, 0, 0, 0.5,   1,   1, 0, ""/**/,"","","","",0,0,1,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  5,  18.75, 0.5, 1, 1.5, 0, 0,   0, /**/6, 20, 0.5, 2, 2.5, 0, 0, 0.5, /**/  7.5,  18, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 7.5, 10,  0, 0, 1.0, 0, 1,   0),                        
                        "NICHT"  => array( /*header*/15, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0.5,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,     0, 0.5, 1, 1.5, 0, 0, 0.5, /**/ 3,     4, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 5,     5, 0.5, 1, 1.5, 0, 0, 0.5, /**/ 6.5,  5, 0.5, 2.5, 2.0, 0, 0, 0.5, /**/  7.75,  4, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 11, 1, 0.5, 0, 2.5, 0, 0, 0.5, /**/  12.5, 0, 0.5, 0, 1.5, 0, 0, 0.5, /**/ 14, 1, 0.5, 0, 1.0, 0, 1, 0.5 /**/  ),
                        "ALL"  => array( /*header*/ 3, 0.5, 0, 0.5,0.75,0.75, 0, ""/**/,"","","","",1,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,  5, 0.5, 1, 1.5, 0, 0, 0.5, /**/2,  8.5, 0.5, 2, 2, 0, 0, 0.5, /**/   1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 0, 7, 0.5, 0, 3.0, 0, 0, 0.5, /**/   0, 2, 0.5, 0, 2.5, 0, 0,   0, /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 3, 2, 0.5, 0, 1.0, 0, 1, 0.5),                       
                        "WERD" => array( /*hear*/1.25, 0.5, 0, 0.5,   0,   2, 0, ""/**/,"","","","",0,0.5,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 5, 0, 1, 3.0, 0, 0, 0, /**/  0, 1, 0.5, 0, 2.5, 0, 0, 0.5, /**/  1.25, 0, 0.5, 0, 1.2, 0, 1, 0.5 /*  2, 0.5, 0.5, 0, 1.0, 0, 1, 0.5 /**/  ),
                        "IN" => array( /*hear*/5, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/   0, 3, 0, 1, 1.0, 0, 0, 0, /**/   3, 4, 0, 0, 1.0, 0, 0, 0, /**/  2, 0, 0, 0, 0, 0, 0, 0, /**/  5, 1, 0, 0, 1.0, 0, 1, 0 /**/  ),
                        "SEIN" => array( /*hear*/20, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0.5,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/   0, 0, 0, 1, 1.0, 0, 0, 0.5, /**/   3, 3, 0.5, 0, 1.0, 0, 0, 0.5, /**/  10, 5, 0.5, 0, 0, 0, 0, 0.5, /**/  17, 3, 0.5, 0, 1.0, 0, 0, 0.5, /**/  19, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 20, 0, 0.5, 0, 1.0, 0, 1, 0 ),
                        "GEGEN"  => array( /*heade*/3, 0.5, 0, 0.5,   3,   5, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  -1,  8.75, 0.5, 1, 1.0, 0, 0,   0, /**/1, 10, 0.5, 2, 1.0, 0, 0, 0.5, /**/  2.5,  8, 0.5, 0, 1.0, 0, 0, 0, /**/  0,  6, 0, 0, 1.0, 0, 0, 0.5, /**/ 2.5, 5,   0.5, 0, 1.0, 0, 0,   0, /**/ 1, 0, 0, 0, 1.0, 0, 1, 0,),                        
                        "HAB"  => array( /*header*/ 4, 0.5, 0,   0, 1.5, 1.5, 0, ""/**/,"","","","",1,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 10,   0, 1, 3.0, 0, 0, 0.5, /**/  0,  2, 0.5, 0, 2.5, 0, 0, 0.5, /**/   2.5,  0, 0.5, 0, 1.5, 0, 2, 0.5, /**/    4,  1,0.5, 0, 1.0, 0, 1,   0),
                        "HAT"  => array( /*headr*/4.5, 0.5, 0, 0.5,   1,   1, 0, "" /*"lich,h"*//**/,"","","","",1,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,  8.75, 0.5, 1, 1.5, 0, 0.5, 0, /**/1, 10, 0.5, 2, 2.5, 0, 0, 0.5, /**/   2.5,  8, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 2.5, 2, 0.5, 0, 3.0, 0, 0, 0.5, /**/  1.0, 0, 0.5, 0, 2.5, 0, 0, 0.5, /**/  0, 1.5, 0.5, 0, 1.5, 0, 2, 0.5, /**/       ),
                        "DA"  => array( /*header*/ 0, 0.5, 0,   0,0 /*2.25*/ ,2.25, 0, ""/**/,"","","","",1,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 10,   0, 1, 3.0, 0, 0,   0, /**/  0,  0,   0, 0, 1.0, 0, 1,  0, /**/ 0, 2.5, 0, 4, 1.0, 0, 0, 0.5,), 
                        "SIND" => array( /*headr*/2.5, 0.5, 0, 0.5,   1, 2.5, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,  5, 0.5, 1, 1.5, 0, 0, 0.5, /**/2.5,  8.25, 0.5, 2, 2, 0, 0, 0.5, /**/   1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 0, 7, 0.5, 0, 3.0, 0, 0, 0.5, /**/   0, 0, 0.0, 0, 1.0, 0, 0,   0 ),                       
                        "VOR" => array( /*header*/ 5, 0.5, 0, 0,   2,   2, 0, ""/**/,"","","","",0,0,0,2.5, /*++*/ 5,0,0,0,0,0,0,0, /*data*/   0, 10, 0, 1, 1.0, 0, 0, 0.5, /**/  0, 6.5, 0.5, 0, 1.0, 0, 0, 0.5, /**/  1.25, 5.75, 0.5, 0, 1.0, 0, 0, 0.5, /**/ /* x, y, t, d1, th, 0, d2, t2, *//**/ 2.5, 5, 0.5, 1, 3.0, 0, 0, 0.5, /**/ 5, 2.5, 0.7, 0, 3.0, 0, 0, 0.7, /**/  2.5, 0, 0.7, 0, 1.0, 0, 0, 0.5, /**/  0, 2.5, 0.7, 0, 1.0, 0, 0, 0.5, /**/ 2.5, 5, 0.5, 0, 1.0, 0, 1, 0.0),    
                        "VOR+AR" => array( /*header*/ 5, 0.5, 0, 0,   2,   2, 0, ""/**/,"","","","",0,0,0.5,2.5, /*++*/ 5,0,0,0,0,0,0,0, /*data*/   0, 10, 0, 1, 1.0, 0, 0, 0.5, /**/  0, 6.5, 0.5, 0, 1.0, 0, 0, 0.5, /**/  1.25, 5.75, 0.5, 0, 1.0, 0, 0, 0.5, /**/ /* x, y, t, d1, th, 0, d2, t2, *//**/ 3.5, 5, 0.5, 1, 3.0, 0, 0, 0.5, /**/ 8, 2.5, 0.7, 0, 3.0, 0, 0, 0.7, /**/  5.5, 0, 0.7, 0, 1.0, 0, 0, 0.5, /**/  3, 2.5, 0.7, 0, 1.0, 0, 0, 0.5, /**/ 5.5, 5, 0.5, 0, 1.0, 0, 0, 0.0, /**/ 8, 7.5, 0.5, 0, 1.0, 0, 0, 0.0, /**/ 5.5, 10, 0.5, 0, 1.0, 0, 0, 0.0, /**/ 3, 7.5, 0.5, 0, 1.0, 0, 0, 0.0, /**/ 5.5, 5, 0.5, 0, 1.0, 0, 1, 0.0 ),    
                        
                        "ANT"  => array( /*header*/25, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  4,     4.5, 0.5, 1, 1.5, 0, 0, 0.5, /**/ 8,  5, 0.5, 2, 2.0, 0, 0, 0.5, /**/  11,  4, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 18, 1, 0.5, 0, 2.5, 0, 0, 0.5, /**/  22, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 25, 0, 0.5, 0, 1.0, 0, 1, 0.5 /**/  ),
                        "RÜCK" => array( /*header*/ 8, 0.5, 0, 0.5,   2,   2, 0, ""/**/,"","","","",1,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  2.5, 0, 0.5, 1, 1.0, 0, 0, 0.7, /**/ 5, 2.5, 0.7, 0, 1.0, 0, 0, 0.7, /**/  2.5, 5, 0.7, 0, 3.0, 0, 0, 0.5, /**/  0, 2.5, 0.7, 0, 3.0, 0, 0, 0.5, /**/ 2.5, 0, 0.5, 0, 1.0, 0, 1, 0.0),    
                        "UR" => array( /*header*/ 5, 0.5, 0, 0,   0,   1, 0, ""/**/,"","","","",1,0,0,2.5, /*++*/ 5,0,0,0,0,0,0,0, /*data*/    -2, 10, 0, 1, 3.0, 0, 0, 0.5, /**/  3, 5, 0.5, 0, 1.0, 0, 0, 0.7, /**/5, 2.5, 0.7, 0, 1.0, 0, 0, 0.7, /**/  2.5, 0, 0.7, 0, 1.0, 0, 0, 0.5, /**/  0, 2.5, 0.7, 0, 1.0, 0, 0, 0.5, /**/ 2.5, 5, 0.5, 0, 1.0, 0, 1, 0.0),    
                        "ANTI"  => array( /*header*/25, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  4,     4.5, 0.5, 1, 1.5, 0, 0, 0.5, /**/ 8,  5, 0.5, 2.5, 2.0, 0, 0, 0.5, /**/  11,  4, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 18, 1, 0.5, 0, 2.5, 0, 0, 0.5, /**/   22, 0, 0.5, 0, 1.5, 0, 0, 0.5, /**/ 22.5, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 23.5, 2, 0.5, 0, 1.0, 0, 0, 0.5, /**/  24.5, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/  23.5, 0, 0.5, 0, 1.0, 0, 0, 0.5, /**/  22.5, 1, 0.5, 0, 1.0, 0, 1, 0.5,      ),
                        "ZURÜCK" => array( /*header*/ 5, 0.5, 0, 0.5,   2,   1, 0, ""/**/,"","","","",1,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/   -2, -4, 0.5, 1, 1.0, 0, 0, 0.5, /**/  1.5, -3, 0.5, 0, 1.0, 0, 0, 0.5, /**/  4, 0, 0.5, 0, 1.0, 0, 0, 0.5, /**/  5, 2.5, 0.7, 0, 1.0, 0, 0, 0.7, /**/  2.5, 5, 0.7, 0, 3.0, 0, 0, 0.5, /**/  0, 2.5, 0.7, 0, 3.0, 0, 0, 0.5, /**/ 2.5, 0, 0.5, 0, 1.0, 0, 0, 0.0, /**/ 3.5, 0, 0.5, 1, 1.0, 0, 1, 0.7, /**/),    
                        "INTER" => array( /*header*/ 5, 0.5, 0, 0.5,   2,   1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/   -2, -4, 0.5, 1, 1.0, 0, 0, 0.5, /**/  1.5, -3, 0.5, 0, 1.0, 0, 0, 0.5, /**/  4, 0, 0.5, 0, 1.0, 0, 0, 0.5, /**/  5, 2.5, 0.7, 0, 1.0, 0, 0, 0.7, /**/  2.5, 5, 0.7, 0, 3.0, 0, 0, 0.5, /**/  0, 2.5, 0.7, 0, 3.0, 0, 0, 0.5, /**/ 2.5, 0, 0.5, 0, 1.0, 0, 0, 0.0, /**/ 3.5, 0, 0.5, 1, 1.0, 0, 1, 0.7, /**/),    
                        "ION"  => array( /*header*/25, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0.5,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  4,     4.5, 0.5, 1, 1.5, 0, 0, 0.5, /**/ 8,  5, 0.5, 2.5, 2.0, 0, 0, 0.5, /**/  11,  4, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 18, 1, 0.5, 0, 2.5, 0, 0, 0.5, /**/  22, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 25, 0, 0.5, 0, 1.0, 0, 1, 0.5 /**/  ),
                        "HAFT"  => array( /*header*/ 4, 0.5, 0,   0,   4,   1, 0, ""/**/,"","","","",1,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 10, 0.5, 1, 1.5, 0, 0, 0.5, /**/  3,  17, 0.5, 2, 2.0, 0, 0, 0.5, /**/  1.8, 20, 0.5, 0, 2.5, 0, 0, 0.5, /**/  0, 18, 0.5, 0, 3.0, 0, 0, 0.5, /**/  0, 2, 0.5, 0, 3.0, 0, 0, 0.5, /**/  2, 0, 0.5, 4, 1.5, 0, 0, 0.5, /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/  4, 2, 0.5, 0, 1.0, 0, 1, 0.5 /**/  ),
                        "SCHAFT" => array( /*hear*/20, 0.5, 0, 0.5,   2,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 5, 0, 1, 1.5, 0, 0, 0.5, /**/  0.75, 3, 0.5, 0, 3.0, 0, 0, 0.5, /**/   19.25, 2.5, 0.5, 0, 1.5, 0, 0, 0.5, /**/   20, 0, 0.5, 0, 1.0, 0, 1, 0 /**/ ),
                        //"TUM"  => array( /*headr*/10.5, 0.5, 0, 0.5, 0.5, 0.5, 0, ""/**/,"","","","",1,1,1,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  5,  8.75, 0.5, 1, 1.5, 0, 0,   0, /**/  6, 10, 0.5, 2, 2.5, 0, 0, 0.5, /**/  7.5,  8, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 7.5,   2,0.5, 0, 2.5, 0, 0,   0, /**/ 9.0,  0, 0.5, 4, 1.5, 0, 0, 0.5, /**/ 9.0,  0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 9.5,  2,0.5, 0, 1.0, 0, 1,   0.5),                                                
                        "TALL"  => array( /*header*/ 3, 0.5, 0, 0.5,0.75,0.75, 0, ""/**/,"","","","",1,0,1,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  5,  15, 0.5, 1, 1.5, 0, 0, 0.5, /**/7,  18.5, 0.5, 2, 2, 0, 0, 0.5, /**/   6.1, 20, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 5, 17, 0.5, 0, 3.0, 0, 0, 0.5, /**/   5, 12, 0.5, 0, 2.5, 0, 0,   0, /**/ 7, 10, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 8, 12, 0.5, 0, 1.0, 0, 1, 0.5),                       
                        //"TLICH"  => array( /*headr*/4.5, 0.5, 0, 0.5,   1,   1, 0, "","","","","",0,0,1,0, /*++*/ 1,0,0,0,0,0,0,0, /*data*/  5,  18.75, 0.5, 1, 1.5, 0, 0.5, 0, /**/6, 20, 0.5, 2, 2.5, 0, 0, 0.5, /**/   7.5,  18, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 7.5, 12, 0.5, 0, 3.0, 0, 0, 0.5, /**/  6.0, 10, 0.5, 0, 2.5, 0, 99, 0.5, /**/  5, 11.5, 0.5, 0, 1.5, 0, 2, 0.5, /**/  7.5, 15, 0.5, 0, 1.0, 0, 1, 0.5 /**/     ),
                        "TIG"  => array( /*heade*/7.5, 0.5, 0, 0.5,   2,   2, 0, ""/**/,"","","","",0,0,1,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  5,  18.75, 0.5, 1, 1.5, 0, 0,   0, /**/6, 20, 0.5, 2, 2.5, 0, 0, 0.5, /**/  7.5,  18, 0.5, 0, 3.0, 0, 0, 0, /**/ 7.5, 10,   0, 0, 1.0, 0, 1,   0, /**/ 7.5, 12.5, 0, 4, 1.0, 0, 0, 0,),                        
                        "TUNG" => array( /*headr*/8, 0.5, 0, 0.5,   2,   1, 0, ""/**/,"","","","",1,0,1,0, /*++*/ 1,0,0,0,0,0,0,0, /*data*/   7, 18, 0.5, 1, 1.3, 0, 0, 0.5, /**/   8, 19.5, 0.5, 0, 1.3, 0, 0, 0.5, /**/   9, 20, 0.5, 0, 2.5, 0, 0, 0.5, /**/  8, 19.5, 0.5, 0, 3.0, 0, 0, 0.5, /**/  7, 18, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 7, 11.5, 0.5, 0, 2.5, 0, 0, 0.5, /**/  6, 10, 0.5, 0, 1.5, 0, 99, 0.5, /**/  5, 12, 0.5, 0, 1.5, 0, 2, 0.5, /**/  7, 14, 0.5, 0, 1.0, 0, 1, 0.5 /**/     ),                        
                        "AUF" => array( /*header*/ 9, 0.5, 0, 0,   2,   2, 0, ""/**/,"","","","",1,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 5, 0, 1, 3.0, 0, 0, 0.5, /**/   2, 2, 0.5, 0, 2.0, 0, 0, 0.5, /**/   5, 0, 0.5, 0, 1.0, 0, 0, 0.5, /**/   7.5, 2, 0.5, 0, 1.0, 0, 2, 0.5, /**/   9, 5, 0.5, 0, 1.0, 0, 1, 0.5,   ),    
                        "AUS" => array( /*hear*/20, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",1,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/   0, 0, 0, 1, 1.0, 0, 0, 0.5, /**/   3, 3, 0.5, 0, 1.0, 0, 0, 0.5, /**/  10, 5, 0.5, 0, 1.5, 0, 0, 0.5, /**/  17, 3, 0.5, 0, 2.5, 0, 0, 0.5, /**/  19, 1, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 20, 0, 0.5, 0, 1.0, 0, 1, 0 ),
                        "-AUS" => array( /*hear*/20, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",1,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/    10, 5, 0.5, 1, 1.5, 0, 0, 0.5, /**/  17, 3, 0.5, 0, 2.5, 0, 0, 0.5, /**/  19, 1, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 20, 0, 0.5, 0, 1.0, 0, 1, 0 ),                        
                        "BEI" => array( /*header*/18, 0.5, 0, 0,   2,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 5, 0, 1, 3.0, 0, 0, 0.5, /**/   3, 2, 0.5, 0, 2.0, 0, 0, 0.5, /**/   9, 0, 0.5, 0, 1.0, 0, 0, 0.5, /**/   15, 2, 0.5, 0, 1.0, 0, 0, 0.5, /**/   18, 5, 0.5, 0, 1.0, 0, 1, 0.5,   ),    
                        "DURCH" => array( /*header*/10, 0.5, 0, 0,   2,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  3, 10, 0, 1, 1.0, 0, 0, 0.3, /**/   1.5, 3.5, 0.3, 0, 1.0, 0, 0, 0, /**/   8, 0, 0, 0, 1.0, 0, 1, 0, /**/   ),    
                        "SICH"  => array( /*hear*/11.75, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 5, 0, 1, 1.0, 0, 0, 0.5, /**/      2,    9.5, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 3,  10, 0.5, 2.5, 1.0, 0, 0, 0.5, /**/  5,  9.5, 0.5, 0, 1.0, 0, 0, 0, /**/ 8, 5, 0, 0, 1.0, 0, 1, 0, /**/   ),
                        "SOLCH" => array( /*header*/ 15,   1,-1, 0.5, 0.5, 0.5, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/    0, 0, 0, 1, 1.0, 0, 0, 0.5, /**/  2.5, 4, 0.5, 0, 1.0, 0, 0, 0.5, /**/  4, 5, 0.5, 0, 1.0, 0, 0, 0.5, /**/  5.5, 4, 0, 0, 1.0, 0, 0, 0.5, /**/  9, 0, 0.5, 0, 1.0, 0, 0, 0, /*ch=>*/   /**/ 10, 3.5, 0, 1, 1.3, 0, 0, 0.5, /**/   12.5, 5, 0.7, 2, 2.5, 0, 0, 0.8, /**/  15, 2, 0.8, 0, 3.0, 0, 0, 0.5, /**/   15, -13, 0.5, 0, 2.5, 0, 0, 0.5, /**/   13, -15, 0.5, 0, 2, 0, 99, 0.5, /**/   11.5, -14, 0.5, 0, 1.5, 0, 0, 0.5, /**/   10, -12, 0.5, 0, 1.0, 0, 2, 0.5, /**/   13, -7, 0.5, 0, 1.0, 0, 1, 0.5, /**/ 15, -2.5, 0, 4, 1.0, 0, 0, 0.5,/**/  ),
                        "WIRD" => array( /*header*/ 5, 0.5, 0, 0.5,   2,   1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/   0, 0, 0.5, 1, 1.0, 0, 0, 0.5, /**/  3.5, 2, 0.5, 0, 1.0, 0, 0, 0.5, /**/  5, 5, 0.5, 0, 1.0, 0, 0, 0.5, /**/  5, 7.5, 0.7, 0, 1.0, 0, 0, 0.7, /**/  2.5, 10, 0.7, 0, 3.0, 0, 0, 0.5, /**/  0, 7.5, 0.7, 0, 3.0, 0, 0, 0.5, /**/ 2.5, 5, 0.5, 0, 1.0, 0, 0, 0.0, /**/ 5, 5, 0.5, 1, 1.0, 0, 1, 0.7, /**/),    
                        "SELB"  => array( /*hear*/ 8, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",1,0,0,0, /*++*/ 0,1,0,0,0,0,0,0, /*data*/   0.5, 0, 0.5, 1, 1.5, 0, 0, 0.5, /**/   1, 0.5, 0.5, 0, 1.5, 0, 0, 0.5, /**/   0.5, 1, 0.5, 0, 1.5, 0, 0, 0.5, /**/   0, 0.5, 0.5, 0, 1.5, 0, 0, 0.5, /**/   0.5, 0, 0.5, 0, 1.0, 0, 0, 0.5, /**/  4, 0, 0.5, 0, 1.0, 0, 2, 0.5, /**/   7, 2, 0.5, 0, 1.0, 0, 1, 0.5, /**/   ),
                        "WO"  => array( /*header*/ 7, 0.5, 0, 0.5, 0.5, 0.5, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/1.5, 8.5, 0.5, 1, 1.0, 0, 0, 0.5, /**/  2.25,9.25, 0.5, 2, 1.5, 0, 0, 0.5, /**/ 5, 10, 0.5, 2, 1.5, 0, 0, 0.5, /**/ 2.25,9.25, 0.5, 2, 1.5, 0, 0, 0.5, /**/1.5,8.5,0.5, 0, 2.5, 0, 0, 0.5,/**/0,6, 0.5, 0, 3.0, 0, 0, 0.5, /**/  1,  3.25, 0.5, 0, 3.0, 0, 0, 0.5, /**/  2.5,1.5, 0.5, 4, 1.5, 0, 0, 0.5, /**/  6,1.5, 0.5, 0, 1.5, 0, 0, 0.5, /**/  6.5, 0, 0.5, 0, 1.0, 0, 1, 0 /**/ ),
                        "VILLEICHT"  => array( /*header*/ 5, 0.5, 0, 0.5,0.75,0.75, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,  5, 0.5, 1, 1.5, 0, 0, 0.5, /**/2,  8.5, 0.5, 2, 2, 0, 0, 0.5, /**/   1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 0, 7, 0.5, 0, 3.0, 0, 0, 0.5, /**/   0, 2, 0.5, 0, 2.5, 0, 0,   0,  /**/ 2, 0, 0.5, 0, 1.5, 0, 0, 0.5, /**/ 5, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 7, 12, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 5, 19, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 2, 20, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 0, 17, 0.5, 0, 1.0, 0, 1, 0.5, ),                       
                        "HEIT" => array(/*heade*/18, 0, 1.5, 0.5,   0,   0, 0, "" /**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  18, 20, 0, 1, 1.0, 0, 0, 0, /**/ 18, 20, 0, 0, 1.0, 0, 1, 0 ),
                        "FORT"  => array( /*header*/ 8, 0.5, 0,   0, 1, 1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  5, 10, 0.5, 1, 1.5, 0, 0, 0.5, /**/  8,  17, 0.5, 2, 2.0, 0, 0, 0.5, /**/  6.8, 20, 0.5, 0, 2.5, 0, 0, 0.5, /**/  5, 18, 0.5, 0, 3.0, 0, 0, 0.5, /**/  5, 0, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 5, -5, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 4.25, -9, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 0, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 5, 2.5, 0.5, 4, 1.0, 0, 0, 0.5, /**/ 5, 0, 0.5, 0, 1.0, 0, 1, 0.5,/**/ ),

                        // Special chars: | = separate word (with no space / separation in stenogramm) - \ = separate word (with space / separation in stenogramm)
                        // (the | char can be used as "morphological" boundary: some rules use it to determine prefixes inside a word (in these cases | is considered as equivalent to ^ in REGEX)
                        "\\"  => array( /*header*/ 2, 0.5, 0, 0.5, 0.5, 0.5, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,1,0, /*data*/ 0, 0, 0.5, 5, 1.0, 5, 0, 0, /**/  0, 0, 0, 5, 1.0, 5, 1, 0, /**/ ),
                        //"|"  => array( /*header*/ 2, 0.5, 0, 0.5, 0.5, 0.5, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,1,0, /*data*/ 0, 0, 0.5, 5, 1.0, 5, 0, 0, /**/  0, 0, 0, 5, 1.0, 5, 1, 0, /**/ ),
                       
                        // token rules
                        // rules with 3 characters
                        "SCHM" => array(/*header*/6,   1,-1, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  2, 9, 0.5, 1, 1.0, 0, 0, 0.5, /**/  4,10, 0.5, 0, 1.5, 0, 0, 0.5, /**/  6, 9, 0.5, 0, 2.5, 0, 0, 0.5, /**/   5, 5, 0.5, 0, 3.0, 0, 0, 0.5, /**/  3, 2.5, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 3, 1.5, 0.5, 0, 3.0, 0, 0, 0.5, /**/   /**/  5, 0.5, 0.5, 0, 3.0, 0, 0, 0, /**/   5, -8, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 0, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 0, 0.5, /**/   5, 0, 0.5, 0, 1.0, 0, 1, 0.5, /**/  ),
                        "SCHW" => array(/*header*/7,   1,-1, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/ 5, 17, 0.5, 1, 1.0, 0, 0, 0.5, /**/  7, 19, 0.5, 0, 1.0, 0, 0, 0.5, /**/  9, 20, 0.5, 98, 1.5, 0, 0, 0.5, /**/  7, 19, 0.5, 0, 2.5, 0, 0, 0.5, /**/  5, 17, 0.5, 0, 3.0, 0, 0, 0.5, /**/  5, -8, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 0, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 0, 0.5, /**/   5, 0, 0.5, 0, 1.0, 0, 1, 0.5, /**/  ),
                        "MPF" => array( /*header*/6, 0.5, 0, 0.5, 0.5, 0.5, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,  9, 0.5, 1, 1.5, 0, 0,   0, /**/  1.5, 10, 0.5, 2, 2.5, 0, 0, 0.5, /**/  3,  8, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 3,   2,0.5, 0, 2.5, 0, 0,   0, /**/ 4.5,  0, 0.5, 0, 1.5, 0, 0, 0.5, /**/ 5.75,  2,0.5, 0, 1.0, 0, 0,   0.5, /**/  4.5, 3.5, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 1.5, 3.1, 0.5, 0, 1.0, 0, 0, 0.8, /**/ 0.75, 2.6, 0.8, 0, 1.0, 0, 0, 0.5, /*+++*/ 1.5, 2.0, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 4.5, 2, 0.5, 0, 1.0, 0, 2, 0.5, /**/ 5.75, 2, 0.5, 0, 1.0, 0, 1, 0.5 ),                                                
                        "SCH" => array( /*header*/9,   1,-1, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  5, 7, 0.5, 1, 1.0, 0, 0, 0.5, /**/  7, 9, 0.5, 0, 1.0, 0, 0, 0.5, /**/  9, 10, 0.5, 98, 1.5, 0, 0, 0.5, /**/  7, 9, 0.5, 0, 2.5, 0, 0, 0.5, /**/  5, 7, 0.5, 0, 3.0, 0, 0, 0.5, /**/  5, -8, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 0, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 0 /*3*/, 0.5, /**/   5, 0, 0.5, 0, 1.0, 0, 1, 0.5, /**/5, 2.5, 0, 4, 1.0, 0, 0, 0.5,/**/  ),
                        
                        // distinguish between normal sch, ch, z, zw, schw, schm and "upper"-versions (after i, for example)
                        // offsets 15 + 16 <=> alternative exit points // not very beautiful: x-coordinate cannot be 0 (since alternative exit point is defined as non-0-value => has to be changed later
                        "^SCH" => array( /*header*/9,   1,-1, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0.1, /*++*/ 3,0,0,0,0,0,0,0, /*data*/  5, 7, 0.5, 1, 1.0, 0, 0, 0.5, /**/  7, 9, 0.5, 0, 1.0, 0, 0, 0.5, /**/  9, 10, 0.5, 0, 1.5, 0, 0, 0.5, /**/  7, 9, 0.5, 0, 2.5, 0, 0, 0.5, /**/  5, 7, 0.5, 0, 3.0, 0, 0, 0.5, /**/  5, -8, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 0, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 2, 0.5, /**/   5, 0, 0.5, 0, 1.0, 0, 1, 0.5, /**/5, 2.5, 0, 4, 1.0, 0, 0, 0.5,/**/  ),
                        "^SCHM" => array(/*header*/6,   1,-1, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0.1, /*++*/ 3,0,0,0,0,0,0,0, /*data*/  2, 9, 0.5, 1, 1.0, 0, 0, 0.5, /**/  4,10, 0.5, 0, 1.5, 0, 0, 0.5, /**/  6, 9, 0.5, 0, 2.5, 0, 0, 0.5, /**/   5, 5, 0.5, 0, 3.0, 0, 0, 0.5, /**/  3, 2.5, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 3, 1.5, 0.5, 0, 3.0, 0, 0, 0.5, /**/   /**/  5, 0.5, 0.5, 0, 3.0, 0, 0, 0, /**/   5, -8, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 0, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 2, 0.5, /**/   5, 0, 0.5, 0, 1.0, 0, 1, 0.5, /**/  ),
                        "^SCHW" => array(/*header*/7,   1,-1, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0.1, /*++*/ 3,0,0,0,0,0,0,0, /*data*/ 5, 17, 0.5, 1, 1.0, 0, 0, 0.5, /**/  7, 19, 0.5, 0, 1.0, 0, 0, 0.5, /**/  9, 20, 0.5, 0, 1.5, 0, 0, 0.5, /**/  7, 19, 0.5, 0, 2.5, 0, 0, 0.5, /**/  5, 17, 0.5, 0, 3.0, 0, 0, 0.5, /**/  5, -8, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 0, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 2, 0.5, /**/   5, 0, 0.5, 0, 1.0, 0, 1, 0.5, /**/  ),
                        "^CH" => array( /*header*/ 5,   1,-1, 0.5, 2, 2, 0, ""/**/,"","","","",0,0,0,0.1, /*++*/ 3,0,0,0,0,0,0,0, /*data*/   0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5, /**/   2.5, 10, 0.7, 2, 2.5, 0, 0, 0.8, /**/  5, 7, 0.8, 0, 3.0, 0, 0, 0.5, /**/   5, -8, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 99, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 0, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 2, 0.5, /**/   3, -2, 0.5, 0, 1.0, 0, 1, 0.5, /**/ 5, 2.5, 0, 4, 1.0, 0, 0, 0.5,/**/  ),
                        "^ZW" => array( /*header*/ 5,   1,-1, 0,   1,   0, 0, ""/**/,"","","","",0,0,0,0.1, /*++*/ 3,0,0,0,0,0,0,0, /*data*/  5, 20, 0, 1, 3.0, 0, 0, 0, /**/   5, -8, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 0, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 0, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 2, 0.5, /**/   5, 0, 0.5, 0, 1.0, 0, 1, 0.5, /**/  ),
                        "^Z"  => array( /*header*/ 5,   1,-1, 0, 2, 2, 0, ""/**/,"","","","",0,0,0,0.1, /*++*/ 3,0,0,0,0,0,0,0, /*data*/  5, 10, 0, 1, 3.0, 0, 0, 0, /**/   5, -5, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 4.25, -9, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 0, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 2, 0.5, /**/ 5, 2.5, 0.5, 4, 1.0, 0, 0, 0.5, /**/ 5, 0, 0.5, 0, 1.0, 0, 1, 0.5,/**/ ),

                        // rules with 2 characters
                        "CK" => array( /*headr*/2.5, 0.5, 0, 0.5,   2,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 28.5, 0.5, 1, 1.5, 0, 0, 0.5, /**/1.25, 30, 0.5, 2, 2, 0, 0, 0.5, /**/   2.5, 27, 0.5, 0, 2.5, 0, 0, 0, /**/ 2.5, 25, 0, 0, 3, 0, 0, 0, /**/ 2.5, 0, 0, 0, 1.0, 0, 1, 0.0, /**/ 2, 2, 0, 4, 1.0, 0, 0, 0.0),
                        "FF" => array( /*headr*/2.5, 0.5, 0,   0,   2,   1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 10, 0.5, 1, 1.5, 0, 0, 0.5, /**/  3,  27, 0.5, 2, 2.0, 0, 0, 0.5, /**/  1.8, 30, 0.5, 0, 2.5, 0, 0, 0.5, /**/  0, 28, 0.5, 0, 3.0, 0, 0, 0.5, /**/  0, 2, 0.5, 0, 3.0, 0, 0, 0.5, /**/  2, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/  4, 1, 0.5, 0, 1.0, 0, 1, 0.5 /**/  ),
                        "LL" => array( /*header*/ 3, 0.5, 0, 0.5,1.25,1.25, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,  5, 0.5, 1, 1.5, 0, 0, 0.5, /**/2,  8.5, 0.5, 2, 2, 0, 0, 0.5, /**/   1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 0, 7, 0.5, 0, 3.0, 0, 0, 0.5, /**/   0, 2, 0.5, 0, 2.5, 0, 0,   0, /**/ 2, 0, 0.5, 0, 1.5, 0, 0, 0.5, /**/  2.5, 0, 0.5, 0, 1.0, 0, 0, 0.5, /**/   3, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/   2.5, 1.5, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 2, 0.5, 0.5, 0, 1.0, 0, 0, 0.5, /**/  2.5, 0, 0.5, 0, 1.0, 0, 2, 0.5, /**/  3, 2, 0.5, 0, 1.0, 0, 1, 0.5),                       
                        // immatrikulieren: why isn't mm smooth?
                        "MM" => array( /*header*/11, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/ -2,  5, 0.5, 1, 1.0, 0, 0,   0,  /**/ 1.75, 10, 0.5, 0, 1.2, 0, 0, 0, /**/  6, 10, 0.5, 2, 2.0, 0, 0, 0.5, /**/  8,  8.5, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 8,   2,0.5, 0, 2.5, 0, 0,   0, /**/ 9.5,  0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 11,  2,0.5, 0, 1.0, 0, 1,   0.5),                                                
                        "NN" => array( /*header*/17, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/ 0,     9, 0.5, 1, 1.5, 0, 0, 0.5, /**/ 2,  10, 0.5, 2.5, 2.0, 0, 0, 0.5, /**/  5,  8, 0.5, 0, 3.0, 0, 0, 0.5, /**//* 7,  6.5, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 11, 2, 0.5, 0, 2.5, 0, 0, 0.5, /**/  14, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 17, 2, 1, 0, 1.0, 0, 1, 0.5 /**/  ),
                        "PP" => array( /*headr*/2.5, 0.5, 0, 0,   2, 0.5, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,    30,   0, 1, 3.0, 0, 0, 0.0, /**/    0,  3, 0.5, 0, 2.5, 0, 0, 0.5, /**/      1.25,  0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 2.5, 2, 0, 0, 1.0, 0, 1, 0),
                        "RR" => array( /*header*/10, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,1,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/ 1, 7.75, 0.5, 1, 1.0, 0, 0, 0.5, /**/  5, 10, 0.7, 0, 3.0, 0, 0, 0.8, /**/  10, 5, 0.8, 0, 3.0, 0, 0, 0.7, /**/  5, 0, 0.7, 0, 1.0, 0, 0, 0.5, /**/  0, 5, 0.5, 0, 1.0, 0, 0, 0.5, /**/  1, 7.75, 0.5, 0, 1.0, 0, 0, 0.5, /**/  5, 10, 0.5, 0, 1.0, 0, 1, 0.5, /**/  ),    
                        "SS" => array( /*header*/14, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,   9, 0.5, 1, 1.5, 0, 0, 0.5, /**/ 3,  10, 0.5, 2.5, 2.0, 0, 0, 0.5, /**/  7.5,  8, 0, 0, 3.0, 0, 0, 0, /**/ 9.5,  6, 0, 0, 3.0, 0, 0, 0, /**/ 14, 0, 0, 0, 1.0, 0, 1, 0 /**/  ),
                        "TT" => array( /*header*/ 0, 0.5, 0, 0,   5,   3, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 30,   0, 1, 3.0, 0, 0, 0, /**/  0,  0,   0, 0, 1.0, 0, 1, 0, /**/ /**/ 0, 2.5, 0, 4, 1.0, 0, 0, 0.5,),
                        "CH" => array( /*header*/ 5,   1,-1, 0.5, 2, 2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/   0, 8.5, 0.5, 1, 1.3, 0, 0, 0.5, /**/   2.5, 10, 0.7, 2, 2.5, 0, 0, 0.8, /**/  5, 7, 0.8, 0, 3.0, 0, 0, 0.5, /**/   5, -8, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 99, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 0, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 0, 0.5, /**/   5, 0, 0.5, 0, 1.0, 0, 1, 0.5, /**/ 5, 2.5, 0, 4, 1.0, 0, 0, 0.5,/**/  ),
                        "ND" => array( /*headr*/2.5, 0.5, 0, 0.5,   1, 3, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,  5, 0.5, 1, 1.5, 0, 0, 0.5, /**/2.5,  8.25, 0.5, 2, 2, 0, 0, 0.5, /**/   1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 0, 7, 0.5, 0, 3.0, 0, 0, 0, /**/   0, 0, 0.0, 0, 1.0, 0, 1,   0, /**/ 0, 2.5, 0, 4, 1.0, 0, 0, 0.5, ),                       
                        "NG" => array( /*headr*/3, 0.5, 0, 0.5,   2,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 1,0,0,0,0,0,0,0, /*data*/   2, 8, 0.5, 1, 1.3, 0, 0, 0.5, /**/   3, 9.5, 0.5, 0, 1.3, 0, 0, 0.5, /**/   4, 10, 0.5, 0, 2.5, 0, 0, 0.5, /**/  3, 9.5, 0.5, 0, 3.0, 0, 0, 0.5, /**/  2, 8, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 2, 1.5, 0.5, 0, 2.5, 0, 0, 0.5, /**/  1, 0, 0.5, 0, 1.5, 0, 99, 0.5, /**/  0, 2, 0.5, 0, 1.5, 0, 2, 0.5, /**/  2, 4, 0.5, 0, 1.0, 0, 1, 0.5, /**/ 2, 4, 0, 4, 1.0, 0, 0, 0.5,    ),                        
                        "NK" => array( /*header*/ 6, 0.5, 0,   0,   1,   1, 0, ""/**/,"","","","",0,0,0,0, /*++*/1,0,0,0,0,0,0,0, /*data*/  3, 10, 0.5, 1, 1.5, 0, 0, 0.5, /**/  6,  17, 0.5, 2, 2.0, 0, 0, 0.5, /**/  4.8, 20, 0.5, 0, 2.5, 0, 0, 0.5, /**/  3, 18, 0.5, 0, 3.0, 0, 0, 0.5, /**/  3, 2, 0.5, 0, 3.0, 0, 0, 0.5, /**/  1.5, 0, 0.5, 0, 2.5, 0, 0, 0.5, /**/  0, 2, 0.5, 0, 1.5, 0, 99, 0.5, /**/ 0, 2, 0.5, 0, 1.5, 0, 2, 0.5, /**/  4, 5, 0.5, 0, 1.0, 0, 1, 0.5, /**/  4, 5.5, 0, 4, 1.0, 0, 0, 0.5,/**/),
                        "NS" => array( /*head*/3.75, 0.5, 0,   0,   1,   1, 0, ""/**/ ,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0.75, 5, 0.5, 1, 1.5, 0, 0, 0.5, /**/  3.75,  8.5, 0.5, 2, 2.0, 0, 0, 0.5, /**/  2.65, 10, 0.5, 0, 2.5, 0, 0, 0.5, /**/  1.75, 9, 0.5, 0, 3.0, 0, 0, 0.5, /**/  1.75, 1, 0.5, 0, 3.0, 0, 0, 0.5, /**/  0.75, 0, 0.5, 0, 2.5, 0, 99, 0.5, /**/  0, 2.25, 0.5, 0, 1.5, 0, 2, 0.5, /**/  1.75, 3, 0.5, 0, 1.0, 0, 1, 0.5 /**/ ),
                        "PF" => array( /*header*/ 8, 0.5, 0, 0.5,   1,   1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 5.5, 0.5, 1, 1.5, 0, 0, 0.5, /**/  4,  9.5, 0.5, 2, 2.0, 0, 0, 0.5, /**/ 7,  13, 0.8, 2, 2.0, 0, 0, 0.9, /**/ 8,  16, 0.9, 2, 2.0, 0, 0, 0.7, /**/  1.8, 20, 0.5, 0, 2.5, 0, 0, 0.5, /**/  0, 18, 0.5, 0, 3.0, 0, 0, 0.5, /**/  0, 2, 0.5, 0, 3.0, 0, 0, 0.5, /**/  2, 0, 0.5, 4, 1.5, 0, 0, 0.5, /**/  2, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/  4, 2, 0.5, 0, 1.0, 0, 1, 0.5 /**/  ),
                        "SP" => array( /*header*/ 8, 0.5, 0, 0.5,0.75,0.75, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 18, 0.5, 1, 1.5, 0, 0, 0.5, /**/2, 20, 0.5, 2, 2, 0, 0, 0.5, /**/   4, 18, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 4, 15, 0.5, 0, 3, 0, 0, 0.5, /**/  4, 5, 0.5, 0, 2.5, 0, 0, 0.5, /**/  4, 3, 0.5, 0, 2, 0, 0, 0.5, /**/ 6, 0, 0.5, 4, 1.5, 0, 0, 0.5, /**/ 6, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 8, 2, 0.5, 0, 1.0, 0, 1, 0),
                        "ST" => array( /*header*/ 3, 0.5, 0,   0,   2,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 10, 0.5, 1, 1.5, 0, 0, 0.5, /**/  3,  17, 0.5, 2, 2.0, 0, 0, 0.5, /**/  1.8, 20, 0.5, 0, 2.5, 0, 0, 0.5, /**/  0, 18, 0.5, 0, 3.0, 0, 0, 0, /**/  0, 0, 0, 0, 1.0, 0, 1, 0, /**/ 0, 2.5, 0, 4, 1.0, 0, 1, 0 /**/ ),
                        "ZW" => array( /*header*/ 5,   1,-1, 0,   1,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  5, 20, 0, 1, 3.0, 0, 0, 0, /**/   5, -8, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 0, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 0, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 0, 0.5, /**/   5, 0, 0.5, 0, 1.0, 0, 1, 0.5, /**/  ),
                        "EN" => array( /*header*/ 5, 0,  0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,1,0,0,0,0,0,0, /*data*/ /* 1, 0, 0, 1, 1.0, 0, 0, 0, /**/ 5, 0, 0, 1, 1.0, 0, 0, 0, /**/ 5, 0, 0, 0, 1.0, 0, 1, 0 ),
                        "EM" => array( /*header*/18,   5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,1,0,0,0,0,0,0, /*data*/  /*1, 0,  0, 1, 1.0, 0, 0,  0,*/ /**/ 5, 0,  0, 1, 1.0, 0, 0,  0, /**/ 13, 0,  0.5, 1, 1.0, 0, 1,  0 /**/),
                        // dem, den = em, en but with first point set with x = 0
                        "DEN" => array( /*header*/ 5, 0,  0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,1,0,0,0,0,0,0, /*data*/ /* 1, 0, 0, 1, 1.0, 0, 0, 0, /**/ 0, 0, 0, 1, 1.0, 0, 0, 0, /**/ 5, 0, 0, 0, 1.0, 0, 1, 0 ),
                        "DEM" => array( /*header*/13,   5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,1,0,0,0,0,0,0, /*data*/  /*1, 0,  0, 1, 1.0, 0, 0,  0,*/ /**/ 0, 0,  0, 1, 1.0, 0, 0,  0, /**/ 13, 0,  0.5, 1, 1.0, 0, 1,  0 /**/),
                       
                        "VR+AR" => array( /*header*/ 5, 0.5, 0, 0.5,   0,   1, 0, ""/**/,"","","","",0,0,0.5,2.5, /*++*/ 5,0,0,0,0,0,0,0, /*data*/  2.5, 5, 0.5, 1, 3.0, 0, 0, 0.5, /**/ 5, 2.5, 0.7, 0, 3.0, 0, 0, 0.7, /**/  2.5, 0, 0.7, 0, 1.0, 0, 0, 0.5, /**/  0, 2.5, 0.7, 0, 1.0, 0, 0, 0.5,  /**/ 2.5, 5, 0.5, 0, 1.0, 0, 0, 0.0, /*AR*/ 2.5, 5, 0.5, 0, 1.0, 0, 0, 0.7, /**/ 5, 7.5, 0.7, 0, 1.0, 0, 0, 0.7, /**/  2.5, 10, 0.7, 0, 3.0, 0, 0, 0.5, /**/  0, 7.5, 0.7, 0, 3.0, 0, 0, 0.5, /**/ 2.5, 5, 0.5, 0, 1.0, 0, 1, 0.0, ),    
                        // special en and em endings with to points (necessary for correct calculation after tokens with pivot points, e.g. "chen"
                   //     "EN2" => array( /*header*/ 5, 0,  0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,1,0,0,0,0,0,0, /*data*/ -4, 0, 0.5, 1, 1.0, 0, 0, 0, /**/ 5, 0, 0, 1, 1.0, 0, 0, 0, /**/ 5, 0, 0, 0, 1.0, 0, 1, 0 ),
                       
                        // rules with 1 character
                        "B"  => array( /*header*/ 5, 0.5, 0,   0, 1, 1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 10,   0, 1, 3.0, 0, 0, 0.5, /**/  0,  2, 0.5, 0, 2.5, 0, 0, 0.5, /**/   2.5,  0, 0.5, 4, 1.5, 0, 0, 0.5, /**/  2.5,  0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 5,  2,0.5, 0, 1.0, 0, 1,   0),
                        "C"  => array( /*header*/ 5, 0.5, 0, 0.5, 2, 2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  1,9.5, 0.5, 0, 1.0, 0, 0, 0.5, /**/  3, 10, 0.5, 98, 3.0, 0, 0, 0.5, /**/     1,9.5, 0.5, 0, 3.0, 0, 0, 0.5, /**/    0,7.5, 0.5, 0, 3.0, 0, 0,   0, /**/ 0,  0,  0, 0, 1.0, 0, 1,   0),
                        "D"  => array( /*header*/ 0, 0.5, 0,   0, 2 ,3, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 10,   0, 1, 3.0, 0, 0,   0, /**/  0,  0,   0, 0, 1.0, 0, 1,  0, /**/ 0, 2.5, 0, 4, 1.0, 0, 0, 0.5, ), 
                        "F"  => array( /*header*/ 4, 0.5, 0,   0, 1, 1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 10, 0.5, 1, 1.5, 0, 0, 0.5, /**/  3,  17, 0.5, 2, 2.0, 0, 0, 0.5, /**/  1.8, 20, 0.5, 0, 2.5, 0, 0, 0.5, /**/  0, 18, 0.5, 0, 3.0, 0, 0, 0.5, /**/  0, 2, 0.5, 0, 3.0, 0, 0, 0.5, /**/  2, 0, 0.5, 4, 1.5, 0, 0, 0.5, /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/  4, 2, 0.5, 0, 1.0, 0, 1, 0.5 /**/  ),
                        "G"  => array( /*heade*/2.5, 0.5, 0, 0.5,   2,   3, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,  8.75, 0.5, 1, 1.5, 0, 0,   0, /**/1, 10, 0.5, 2, 2.5, 0, 0, 0.5, /**/  2.5,  8, 0.5, 0, 3.0, 0, 0, 0, /**/ 2.5, 0,   0, 0, 1.0, 0, 1,   0, /**/ 2.5, 2.5, 0, 4, 1.0, 0, 0, 0,),                        
                        "H"  => array( /*headr*/4.5, 0.5, 0, 0.5,   2,   2, 0, "","","","","",0,0,0,0, /*++*/ 1,0,0,0,0,0,0,0, /*data*/  0,  8.75, 0.5, 1, 1.5, 0, 0.5, 0, /**/1, 10, 0.5, 2, 2.5, 0, 0, 0.5, /**/   2.5,  8, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 2.5, 2, 0.5, 0, 3.0, 0, 0, 0.5, /**/  1.0, 0, 0.5, 0, 2.5, 0, 99, 0.5, /**/  0, 1.5, 0.5, 0, 1.5, 0, 2, 0.5, /**/  2.5, 5, 0.5, 0, 1.0, 0, 1, 0.5 /**/     ),
                        "J"  => array( /*header*/ 3, 0.5, 0,   0,2,2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  3,  10, 0, 1, 3.0, 0, 0, 0.5, /**/ 3, 2, 0.5, 0, 3.0, 0, 0, 0.5, /**/  1.5, 0, 0.5, 0, 2.5, 0, 0, 0.5, /**/  0, 1.5, 0.5, 0, 1.5, 0, 2, 0.5, /**/  3, 5, 0.5, 0, 1.0, 0, 1, 0.5 /**/     ),
                        "K"  => array( /*headr*/2.5, 0.5, 0, 0.5,   2,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 18.5, 0.5, 1, 1.5, 0, 0, 0.5, /**/1.25, 20, 0.5, 2, 2, 0, 0, 0.5, /**/   2.5, 17, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 2.5, 15, 0.5, 0, 3, 0, 0, 0, /**/ 2.5, 0, 0, 0, 1.0, 0, 1, 0.0, /**/ 2.5, 2.5, 0, 4, 1.0, 0, 0, 0.5,),
                        "L"  => array( /*header*/ 3, 0.5, 0, 0.5,0.75,0.75, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,  5, 0.5, 1, 1.5, 0, 0, 0.5, /**/2,  8.5, 0.5, 2, 2, 0, 0, 0.5, /**/   1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 0, 7, 0.5, 0, 3.0, 0, 0, 0.5, /**/   0, 2, 0.5, 0, 2.5, 0, 0,   0, /**/ 2, 0, 0.5, 4, 1.5, 0, 0, 0.5, /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 3, 0, 0.5, 0, 1.0, 0, 1, 0.5),                       
                        "@L" => array( /*header*/ 0, 0, 0, 0.5, 2, 2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/    0, 0, 1, 0.5, 1.0, 0, 0, 0.5, /**/  1, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/  0, 2, 0.5, 0, 1.0, 0, 0, 0.5, /**/  -1, 1, 0.5, 0, 1.0, 0, 2, 0.5, /**/  0, 0, 0.5, 0, 1.0, 0, 1, 0.5 /**/ ),                       
                        "@L3" => array( /*header*/ 0, 0, 0, 0.5, 0, 0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/    0, 0, 1, 0.5, 1.0, 0, 0, 0.5, /**/  -1, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/  -2, 0, 0.5, 0, 1.0, 0, 0, 0.5, /**/  -1, -1, 0.5, 0, 1.0, 0, 2, 0.5, /**/  0, 0, 0.5, 0, 1.0, 0, 1, 0.5 /**/ ),                       
                        "&L"  => array( /*header*/ 2, 0.5, 0, 0.5,1,1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0.5,  0, 0.5, 1, 1.5, 0, 0, 0.5, /**/ 1,  0.5, 0.5, 0, 2, 0, 0, 0.5, /**/   0.5, 1, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 0, 0.5, 0.5, 0, 3.0, 0, 0, 0.5, /**/   0.5, 0, 0.5, 0, 2.5, 0, 1,   0, ),                       
                        "M"  => array( /*headr*/5.5, 0.5, 0, 0.5, 0.5, 0.5, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,  8.75, 0.5, 1, 1.5, 0, 0,   0, /**/  1.0, 10, 0.5, 2, 2.5, 0, 0, 0.5, /**/  2.5,  8, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 2.5,   2,0.5, 0, 2.5, 0, 0,   0, /**/ 4.0,  0, 0.5, 4, 1.5, 0, 0, 0.5, /**/ 4.0,  0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 5.5,  2,0.5, 0, 1.0, 0, 1,   0.5),                                                
                        "N"  => array( /*header*/11, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,     4.5, 0.5, 1, 1.5, 0, 0, 0.5, /**/ 1,  5, 0.5, 2, 2.0, 0, 0, 0.5, /**/   2,  5, 0.5, 0, 3.0, 0, 0, 0.5, /**/ /*3,  4, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 5.5, 2, 0.5, 0, 2.5, 0, 0, 0.5, /**/  7.5, 0, 0.5, 4, 1.5, 0, 0, 0.5, /**/ 8.5, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 11, 1, 0.5, 0, 1.0, 0, 1, 0.5 /**/  ),
                        "P"  => array( /*headr*/4, 0.5, 0,   0,   2,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,    20,   0, 1, 3.0, 0, 0, 0.0, /**/    0,  2.5, 0.5, 0, 2.5, 0, 0, 0.5, /**/      2,  0, 0.5, 4, 1.5, 0, 0, 0.5, /**/   2,  0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 4, 2, 0, 0, 1.0, 0, 1, 0),
                        "Q"  => array( /*header*/ 7, 0.5, 0, 0.5,2,2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  1,19, 0.5, 0, 1.0, 0, 0, 0.5, /**/   3, 20, 0.5, 98, 3.0, 0, 0, 0.5, /**/  1,19,0.5, 0, 3.0, 0, 0, 0.5, /**/ 0,15, 0.5, 0, 3.0, 0, 0, 0, /**/ 0, 0, 0, 0, 1.0, 0, 1,   0),
                        "VR" => array( /*header*/ 5, 0.5, 0, 0.5,   2,   2, 0, ""/**/,"","","","",0,0,0,2.5, /*++*/ 5,0,0,0,0,0,0,0, /*data*/  2.5, 5, 0.5, 1, 1.5, 0, 0, 0.5, /**/ 3.75, 4, 0.7, 5, 2.5, 0, 0, 0.7, /**/ 5, 2.5, 0.7, 0, 3.0, 0, 0, 0.7, /**/ 4.5, 0.5, 0.7, 5, 2, 0, 0, 0.7, /**/ 3.25, 0.15, 0.7, 5, 1.5, 0, 0, 0.7, /**/ 2.5, 0, 0.7, 0, 1.0, 0, 0, 0.5, /**/  0, 2.5, 0.7, 0, 1.0, 0, 0, 0.5, /**/ 2.5, 5, 0.5, 4, 1.0, 0, 0, 0.5, /**/ 2.5, 5, 0.5, 0, 1.0, 0, 1, 0.0),    
                        // /VR = normal VR but 1/2 line up when in combination with @L (inconditional_delta_y_after = offset 14 = 0.5)
                        //"/VR" => array( /*header*/ 5, 0.5, 0, 0.5,   2,   2, 0, ""/**/,"","","","",0,0,0.5,2.5, /*++*/ 5,0,0,0,0,0,0,0, /*data*/  2.5, 5, 0.5, 1, 1.5, 0, 0, 0.5, /**/ 3.75, 4, 0.7, 5, 2.5, 0, 0, 0.7, /**/ 5, 2.5, 0.7, 0, 3.0, 0, 0, 0.7, /**/ 4.5, 0.5, 0.7, 5, 2, 0, 0, 0.7, /**/ 3.25, 0.15, 0.7, 5, 1.5, 0, 0, 0.7, /**/ 2.5, 0, 0.7, 0, 1.0, 0, 0, 0.5, /**/  0, 2.5, 0.7, 0, 1.0, 0, 0, 0.5, /**/ 2.5, 5, 0.5, 4, 1.0, 0, 0, 0.5, /**/ 2.5, 5, 0.5, 0, 1.0, 0, 1, 0.0),    
                        "AR" => array( /*header*/ 5, 0.5, 0, 0.5,   0,   1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  2.5, 0, 0.5, 1, 1.0, 0, 0, 0.7, /**/ 5, 2.5, 0.7, 0, 1.0, 0, 0, 0.7, /**/  2.5, 5, 0.7, 0, 3.0, 0, 0, 0.5, /**/  0, 2.5, 0.7, 0, 3.0, 0, 0, 0.5, /**/ 2.5, 0, 0.5, 0, 1.0, 0, 1, 0.0),    
                        "AR5" => array( /*header*/ 5, 0.5, 0, 0.5,   0,   1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  5, 2.5, 0.7, 1, 1.0, 0, 0, 0.7, /**/  2.5, 5, 0.7, 0, 3.0, 0, 0, 0.5, /**/  0, 2.5, 0.7, 0, 3.0, 0, 0, 0.5, /**/ 2.5, 0, 0.5, 0, 1.0, 0, 0, 0.0, /**/ 2.5, 0, 0.5, 1, 1.0, 0, 1, 0.7, ),    
                        "@R" => array( /*header*/ 5, 0.5, 0, 0.5,   0,   1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/   0, 0, 0.7, 0, 1.0, 0, 0, 0.7, /**/  -2, 2, 0.7, 0, 1.0, 0, 0, 0.5, /**/  -4, 0, 0.7, 0, 1.0, 0, 0, 0.5, /**/ -2, -2, 0.5, 0, 1.0, 0, 2, 0.5, /**/ 0, 0, 0.5, 0, 1.0, 0, 1, 0.7, /**/ ),    
                        "@R6" => array( /*header*/0, 0.5, 0, 0.5,   0,   1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/   0, 0, 0.7, 0, 1.0, 0, 0, 0.7, /**/  2, 2, 0.7, 0, 1.0, 0, 0, 0.5, /**/  0, 4, 0.7, 0, 1.0, 0, 0, 0.5, /**/ -2, 2, 0.5, 0, 1.0, 0, 2, 0.5, /**/ 0, 0, 0.5, 0, 1.0, 0, 1, 0.7, /**/ ),    
                        "S"  => array( /*hear*/6.75, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,     4, 0.5, 1, 1.5, 0, 0, 0.5, /**/ 1,  5, 0.5, 2, 2.0, 0, 0, 0.5, /**/  2,  5, 0.5, 0, 3.0, 0, 0, 0, /**/ 4,  4, 0.5, 0, 3.0, 0, 0, 0, /**/  6.75, 0, 0, 0, 1.0, 0, 1, 0 /**/  ),
                        "T"  => array( /*header*/ 0, 0.5, 0, 0,4,2.5, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 20,   0, 1, 3.0, 0, 0, 0, /**/ /* 0,  0.1,   0, 0, 1.0, 0, 2, 0, /*preceeding point = test*/0,  0,   0, 0, 1.0, 0, 1, 0, /**/ 0, 2.5, 0, 4, 1.0, 0, 0, 0.5, ), // define connection point
                        "&T" => array( /*header*/ 4, 0, 1.5, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  4, 20, 0, 1, 1.0, 0, 1, 0, /**/ 4, 20, 0, 0, 1.0, 0, 1, 0 ),
                        "&T3/4" => array( /*header*/ 4, 0, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,1,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  4, 15, 0, 1, 1.0, 0, 1, 0, /**/ 4, 15, 0, 0, 1.0, 0, 1, 0, /**/ 4, 15, 0, 4, 1.0, 0, 1, 0, ),
                        "ET" => array( /*header*/ 4, 0, 0, 0,   0,   0, 0, ""/**/,"","","","",0,0,2,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  4, 25, 0, 1, 1.0, 0, 1, 0, /**/ 4, 25, 0, 0, 1.0, 0, 1, 0 ),
                        "ET3/4" => array( /*header*/ 4, 0, 0, 0,   0,   0, 0, ""/**/,"","","","",0,0,1.5,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  4, 20, 0, 1, 1.0, 0, 1, 0, /**/ 4, 20, 0, 0, 1.0, 0, 1, 0 ),
                        "V"  => array( /*header*/ 6, 0.5, 0, 0.5,   1,   1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  1, 16, 0.5, 1, 1.0, 0, 0, 0.5, /**/  2, 18, 0.6, 2, 1.0, 0, 0, 0, /**/ 6,   20,  0, 98, 0, 0, 0, 0.5, /**/ 2, 18, 0.6, 0, 1.5, 0, 0, 0.5, /**/  1, 16, 0.5, 0, 2.5, 0, 0, 0.5, /**/  0, 14, 0.5, 0, 3.0, 0, 0, 0.5, /**/  0, 5, 0.5, 0, 3.0, 0, 0, 0.5, /**/  1, 2, 0.5, 0, 2.5, 0, 0, 0.5, /**/  3, 0, 0.5, 4, 1.5, 0, 0, 0.5, /**/  3, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/  5, 2, 0.5, 0, 1.0, 0, 1, 0.5 ), 
                        "W"  => array( /*header*/ 6, 0.5, 0, 0.5, 2, 2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/1.5, 8.5, 0.5, 1, 1.0, 0, 0, 0.5, /**/  2.25,9.25, 0.5, 2, 1.5, 0, 0, 0.5, /**/ 5, 10, 0.5, 98, 1.5, 0, 0, 0.5, /**/ 2.25,9.25, 0.5, 0, 1.5, 0, 0, 0.5, /**/1.5,8.5,0.5, 0, 2.5, 0, 0, 0.5,/**/0,6, 0.5, 0, 3.0, 0, 0, 0.5, /**/  0.5,  2, 0.5, 0, 3.0, 0, 0, 0.5, /**/  3,0, 0.5, 4, 1.5, 0, 0, 0.5, /**/  3,0, 0.5, 0, 1.5, 0, 2, 0.5, /**/  6, 2, 0.5, 0, 1.0, 0, 1, 0.5 /**/ ),
                        "X"  => array( /*header*/ 5, 0.5, 0, 0.5, 0.5, 0.5, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,   5, 0, 1, 1.5, 0, 0, 0.5, /**/4.25,7.5, 0.5, 2, 2.0, 0, 0, 0.5, /**/  5,  9,0.5, 0, 2.5, 0, 0, 0.5,/**/3.75,10,0.5,0,3.0, 0, 0, 0.5, /**/   1.75,   7.75, 0.5, 0, 3.0, 0, 0, 0.5, /**/  0, 5, 0.5, 0, 3.0, 0, 0, 0, /**/   5, 0, 0, 0, 1.0, 0, 1, 0  ),
                        "Y"  => array( /*header*/ 10, 0.5, 0, 0, 2,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 10, 0, 1, 3.0, 0, 0, 0, /**/   10, 0, 0, 0, 1.0, 0, 1, 0 /**/  ),
                        "Z"  => array( /*header*/ 9,   1,-1, 0, 2, 2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  5, 10, 0, 1, 3.0, 0, 0, 0, /**/   5, -5, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 4.25, -9, 0.5, 0, 2.5, 0, 0, 0.5, /**/   3, -10, 0.5, 0, 2, 0, 0, 0.5, /**/   1.5, -9, 0.5, 0, 1.5, 0, 99, 0.5, /**/   0, -7, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 5, 2.5, 0.5, 4, 1.0, 0, 0, 0.5, /**/ 5, 0, 0.5, 0, 1.0, 0, 1, 0.5,/**/ ),
                        // these (&&..) are dummy tokens which are only used to combine with other consonants
                        //"&&T" => array( /*header*/ 4, 0, 1.5, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  4, 20, 0, 4, 1.0, 0, 1, 0,  ),
                        //"T15" => array( /*header*/ 4, 0, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,1,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  /*4, 15, 0, 1, 1.0, 0, 0, 0, /**/ 4, 15, 0, 4, 1.0, 0, 1, 0, /**/ /*4, 15, 0, 0, 1.0, 0, 1, 0,  ),
                        //"^1" => array( /*header*/ 5, 0, 0,   0, 1, 1, 1, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /**/ /*4, 15, 0, 1, 1.0, 0, 0, 0, /**/ 4, 15, 0, 4, 1.0, 0, 1, 0, /**/ /*4, 15, 0, 0, 1.0, 0, 1, 0, ),
                        // above tests with token combiner were'nt successfull: define [&T] + consonant manually (with baseline shift at offset 6)
                        // think the following line is obsolete (rests from token combiner tests?!?)
                        //"1B"  => array( /*header*/ 5, 0.5, 0,   0, 4, 1, 1, ""/**/,"","","","",0,0,1,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 20,   0, 1, 3.0, 0, 0, 0.5, /**/  0,  12, 0.5, 0, 2.5, 0, 0, 0.5, /**/   2.5,  10, 0.5, 4, 1.5, 0, 0, 0.5, /**/  2.5,  10, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 5,  12,0.5, 0, 1.0, 0, 1,   0),
                        //"^T+L"  => array( /*header*/ 5, 0.5, 0, 0.5, 4,0.75, 1, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,  5, 0.5, 1, 1.5, 0, 0, 0.5, /**/2,  8.5, 0.5, 2, 2, 0, 0, 0.5, /**/   1.1, 10, 0.5, 0, 2.5, 0, 0, 0.5, /**/ 0, 7, 0.5, 0, 3.0, 0, 0, 0.5, /**/   0, 2, 0.5, 0, 2.5, 0, 0,   0, /**/ 2, 0, 0.5, 4, 1.5, 0, 0, 0.5, /**/ 2, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 3, 0, 0.5, 0, 1.0, 0, 1, 0.5),                       
                        //"^TN"  => array( /*header*/11, 0.5, 0, 0.5,   4,   0, 1.5, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0,     4.5, 0.5, 1, 1.5, 0, 0, 0.5, /**/ 1,  5, 0.5, 2, 2.0, 0, 0, 0.5, /**/   2,  5, 0.5, 0, 3.0, 0, 0, 0.5, /**/ /*3,  4, 0.5, 0, 3.0, 0, 0, 0.5, /**/ 5.5, 2, 0.5, 0, 2.5, 0, 0, 0.5, /**/  7.5, 0, 0.5, 4, 1.5, 0, 0, 0.5, /**/ 8.5, 0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 11, 1, 0.5, 0, 1.0, 0, 1, 0.5 /**/  ),
                        // SOLUTION: Create new function TokenShifter() similar to TokenCombiner() that just shifts base tokens and adds them to stenotokensmaster
                        // think the following line is obsolete (rests from token combiner tests?!?)
                        //"2B"  => array( /*header*/ 5, 0.5, 0,   0, 1, 1, 0, ""/**/,"","","","",0,1,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 10,   0, 1, 3.0, 0, 0, 0.5, /**/  0,  2, 0.5, 0, 2.5, 0, 0, 0.5, /**/   2.5,  0, 0.5, 4, 1.5, 0, 0, 0.5, /**/  2.5,  0, 0.5, 0, 1.5, 0, 2, 0.5, /**/ 5,  2,0.5, 0, 1.0, 0, 1,   0),
                        
                        // token inserted as a second step (from tokenlist)
                        // shortings that must be specially defined (= cannot be represented by one or several tokens);
                        "&E" => array( /*hear*/3, 0.5, 0, 0,   0,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 5, 0, 1, 3.0, 0, 0, 0, /**/  0, 1.5, 0.5, 0, 2.5, 0, 0, 0.5, /**/  2, 0, 0.5, 0, 1.2, 0, 2, 0.5, /**/  3, 0, 0.5, 0, 1.0, 0, 1, 0.5 /**/  ),
                        "&A" => array( /*header*/ 0, 0.5, 0, 0,   0,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 5, 0, 1, 3.0, 0, 0, 0, /**/  0, 0, 0, 0, 1.0, 0, 1, 0 /**/  ),
                        "&U" => array( /*header*/ 5, 0.5, 0, 0,   0,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 5, 0, 1, 3.0, 0, 0, 0, /**/  5, 0, 0, 0, 1.0, 0, 1, 0 /**/  ),
                        "&O" => array( /*hear*/6.75, 0.5, 0, 0.5,   2,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 5, 0, 1, 1.5, 0, 0, 0.5, /**/  0.75, 3, 0.5, 0, 3.0, 0, 0, 0.5, /**/   6, 2.5, 0.5, 0, 1.5, 0, 0, 0.5, /**/   6.75, 0, 0.5, 0, 1.0, 0, 1, 0 /**/ ),
                        "&I" => array( /*header*/2, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 1, 0.5, 1, 1.0, 0, 0, 0.5, /**/  1, 2, 0.5, 0, 1.0, 0, 0, 0.5, /**/   2, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/   1, 0, 0.5, 0, 1.0, 0, 0, 0, /**/  0, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/  1, 2, 0.5, 0, 1.0, 0, 1, 0.5 /**/  ),
                      
                        "-E" => array( /*hear*/1.25, 0.5, 0, 0,   4,   1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,1,0,0,0,0,0,0, /*data*/  0, 5, 0, 1, 3.0, 0, 0, 0, /**/  ),
                        "-A" => array( /*header*/ 0, 0.5, 0, 0.5,   0,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 5, 0, 1, 3.0, 0, 0, 0, /**/  0, 0, 0, 0, 1.0, 0, 1, 0 /**/  ),
                        "-U" => array( /*header*/ 5, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 5, 0, 1, 3.0, 0, 0, 0, /**/  5, 0, 0, 0, 1.0, 0, 1, 0 /**/  ),
                        "-O" => array( /*hear*/6.75, 0.5, 0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 5, 0, 1, 1.5, 0, 0, 0.5, /**/  0.75, 3, 0.5, 0, 3.0, 0, 0, 0.5, /**/   6, 2.5, 0.5, 0, 1.5, 0, 0, 0.5, /**/   6.75, 0, 0.5, 0, 1.0, 0, 1, 0 /**/ ),
                        "-I" => array( /*header*/3, 0.5, 0, 0.5,   3,   2, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 1, 0.5, 1, 1.0, 0, 0, 0.5, /**/  1, 2, 0.5, 0, 1.0, 0, 0, 0.5, /**/   2, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/   1, 0, 0.5, 0, 1.0, 0, 0, 0, /**/  0, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/  1, 2, 0.5, 0, 1.0, 0, 1, 0.5 /**/  ),
                        "/I" => array( /*hear*/1.25, 0.5, 0, 0.5,   1,   1, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 10, 0, 1, 1.0, 0, 0, 0 /**/  ), // "aufstrich-i" für kürzungen
                        
                        // dummy tokens at beginning of the word: 0n[ / 0d[ for normal and down / offset 7 <=> 1(or 3?) means: shifting point (offset 2 = vertical delta)
                        "0-" => array( /*header*/ 0,  0, 0,   0,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 0, 0, 1, 1.0, 0, 0, 0, /**/ 0, 0, 0, 0, 1.0, 0, 1, 0.5 ),
                        "0N-" => array( /*header*/ 1,  0, 0,   0,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 0, 0, 1, 1.0, 5, 0, 0, /**/ 0, 0, 0, 0, 1.0, 0, 1, 0.5 ),
                        "0D-" => array( /*header*/ 0,  0, -0.5,   0,   0,   0, 1, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 0, 0, 1, 1.0, 0, 0, 0, /**/ 0, 0, 0, 0, 1.0, 0, 1, 0.5 ),
                        "0U-" => array( /*header*/ 5,  0, 0 /*used for "war" but completely wrong*/, 0,   0,   0, 1, ""/**/,"","","","",0,0.5,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 0, 0, 1, 1.0, 0, 0, 0, /**/ 0, 0, 0, 0, 1.0, 0, 1, 0.5 ),
                       
                        "PSPACE" => array( /*header*/ 2,  0, /*+0.5*/0, 0,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,0,0,0,0,0,0, /*data*/  0, 0, 0, 1, 1.0, 5, 0, 0, /**/ 2, 0, 0, 0, 1.0, 5, 2, 0, /**/ ),
                        "~~" => array( /*header*/ 12.5,  0, /*+0.5*/0, 0.5,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   0, 10, 0, 1, 1.0, 5, 0, 0.5, /**/   /**/ 2.5, 11, 0, 0, 1.0, 0, 0, 0.5, /**/ 5, 9, 0, 0, 1.0, 0, 0, 0.5, /**/  7.5, 11, 0, 0, 1.0, 0, 0, 0.5, /**/  10, 9, 0, 0, 1.0, 0, 0, 0.5,/**/  12.5, 10, 0, 0, 1.0, 0, 1, 0.5, ),
                        "." => array( /*header*/ 2,  0, /*+0.5*/0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/  0.5, 0, 0, 1, 1.0, 5, 0, 0, /**/ 1, 0.5, 0, 0, 1.0, 0, 1, 0.5, /**/ 0.5, 1, 0, 0, 1.0, 0, 1, 0.5, /**/ 0, 0.5, 0, 0, 1.0, 0, 1, 0.5, /**/ 0.5, 0, 0, 0, 1.0, 0, 1, 0.5, ),
                        "," => array( /*header*/ 3,  0, /*+0.5*/0, 0,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/ 2, -2, 0, 1, 1.0, 5, 0, 0, /**/ 3,  1, 0, 0, 1.0, 0, 1, 0.5, /**/  ),
                        ";" => array( /*header*/ 3,  0, /*+0.5*/0, 0,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/  2.5, 4.5, 0, 1, 1.0, 5, 0, 0, /**/ 3, 5, 0, 0, 1.0, 0, 1, 0.5, /**/ 2.5, 5.5, 0, 0, 1.0, 0, 1, 0.5, /**/ 2, 5, 0, 0, 1.0, 0, 1, 0.5, /**/ 2.5, 4.5, 0, 0, 1.0, 0, 1, 0.5, /**/ 3, 1, 0, 1, 1.0, 5, 0, 0, /**/ 2, -2, 0, 0, 1.0, 0, 1, 0.5, /**/  ),
                        ":" => array( /*header*/ 3,  0, /*+0.5*/0, 0,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/  0.5, 4.5, 0, 1, 1.0, 5, 0, 0, /**/ 1, 5, 0, 0, 1.0, 0, 1, 0.5, /**/ 0.5, 5.5, 0, 0, 1.0, 0, 1, 0.5, /**/ 0, 5, 0, 0, 1.0, 0, 1, 0.5, /**/ 0.5, 4.5, 0, 0, 1.0, 0, 1, 0.5, /**/ 0.5, 0, 0, 1, 1.0, 5, 0, 0, /**/ 1, 0.5, 0, 0, 1.0, 0, 1, 0.5, /**/ 0.5, 1, 0, 0, 1.0, 0, 1, 0.5, /**/ 0, 0.5, 0, 0, 1.0, 0, 1, 0.5, /**/ 0.5, 0, 0, 0, 1.0, 0, 1, 0.5,  ),
                        "!" => array( /*header*/ 2,  0, /*+0.5*/0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/  0.5, 20, 0, 1, 1.0, 5, 0, 0, /**/ 0.5, 5, 0, 1, 1.0, 0, 0, 0, /**/  0.5, 0, 0, 1, 1.0, 5, 0, 0, /**/ 1, 0.5, 0, 0, 1.0, 0, 1, 0.5, /**/ 0.5, 1, 0, 0, 1.0, 0, 1, 0.5, /**/ 0, 0.5, 0, 0, 1.0, 0, 1, 0.5, /**/ 0.5, 0, 0, 0, 1.0, 0, 1, 0.5, ),
                        "?" => array( /*header*/ 5,  0, /*+0.5*/0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   0, 15, 0, 0, 1.0, 5, 0, 0.5, /**/   1.25, 19, 0.5, 0, 1.0, 0, 0, 0.5, /**/   2.5, 20, 0.5, 0, 1.0, 0, 0, 0.5, /**/   3.75, 19, 0.5, 0, 1.0, 0, 0, 0.5, /**/   5, 15, 0.5, 0, 1.0, 0, 0, 0.5, /**/   5, 13, 0.5, 0, 1.0, 0, 0, 0.5, /**/   2.5, 10, 0.5, 0, 1.0, 0, 0, 0.5, /**/   2.5, 5, 0.5, 0, 1.0, 0, 0, 0, /**/    2.5, 0, 0, 1, 1.0, 5, 0, 0, /**/ 3, 0.5, 0, 0, 1.0, 0, 1, 0.5, /**/ 2.5, 1, 0, 0, 1.0, 0, 1, 0.5, /**/ 2, 0.5, 0, 0, 1.0, 0, 1, 0.5, /**/ 2.5, 0, 0, 0, 1.0, 0, 1, 0.5, ),
                        "-" => array( /*header*/ 5,  0, /*+0.5*/0, 0,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   0, 11, 0, 1, 1.0, 5, 0, 0.5, /**/   /**/ 5, 11, 0, 0, 1.0, 0, 0, 0.5, /**/ 0, 9, 0, 0, 1.0, 5, 0, 0.5, /**/   /**/ 5, 9, 0, 0, 1.0, 0, 1, 0.5, ),
                        "'" => array( /*header*/ 1,  0, /*+0.5*/0, 0,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   0, 14, 0, 1, 1.0, 5, 0, 0.5, /**/ 1, 15, 0, 0, 1.0, 0, 0, 0.5, /**/   /**/ 1, 18, 0, 0, 1.0, 0, 0, 0.5,  ),
                        "\"" => array( /*header*/ 3,  0, /*+0.5*/0, 0,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   0, 14, 0, 1, 1.0, 5, 0, 0.5, /**/ 1, 15, 0, 0, 1.0, 0, 0, 0.5, /**/   /**/ 1, 18, 0, 0, 1.0, 0, 0, 0.5, /**/ 2, 14, 0, 1, 1.0, 5, 0, 0.5, /**/ 3, 15, 0, 0, 1.0, 0, 0, 0.5, /**/ 3, 18, 0, 0, 1.0, 0, 0, 0.5,  ),
                        "/" => array( /*header*/ 6,  0, /*+0.5*/0, 0,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/ 0, 1, 0, 1, 1.0, 5, 0, 0, /**/ 6,  19, 0, 0, 1.0, 0, 1, 0.5, /**/  ),
                        
                        // #Q# is an exact copy of " => avoid escaping problems by using [#Q#]
                        "#Q#" => array( /*header*/ 3,  0, /*+0.5*/0, 0,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   0, 14, 0, 1, 1.0, 5, 0, 0.5, /**/ 1, 15, 0, 0, 1.0, 0, 0, 0.5, /**/   /**/ 1, 18, 0, 0, 1.0, 0, 0, 0.5, /**/ 2, 14, 0, 1, 1.0, 5, 0, 0.5, /**/ 3, 15, 0, 0, 1.0, 0, 0, 0.5, /**/ 3, 18, 0, 0, 1.0, 0, 0, 0.5,  ),
                        
                        // symbols []() can't be used for opening and closing brackets (used as separator tokens by bundler and for tokenlist)
                        "(" => array( /*header*/ 5,  0, /*+0.5*/0, 0,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   5, 21, 0, 1, 1.0, 5, 0, 0.5, /**/ 0, 11, 0, 0, 1.0, 0, 0, 0.5, /**/   /**/ 5, 1, 0, 0, 1.0, 0, 0, 0.5,  ),
                        ")" => array( /*header*/ 5,  0, /*+0.5*/0, 0,   0,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   0, 21, 0, 1, 1.0, 5, 0, 0.5, /**/ 5, 11, 0, 0, 1.0, 0, 0, 0.5, /**/   /**/ 0, 1, 0, 0, 1.0, 0, 0, 0.5,  ),
                    
                        // define vowels and distance symbols
                        "A" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"no","narrow","yes",0,0, /*data*/ ),
                        "#0" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"no","none","no",0,0, /*data*/ ),
                        "#0S" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"no","none","yes",0,0, /*data*/ ),
                        "#N" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"no","narrow","no",0,0, /*data*/ ),
                        "#W" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"no","wide","no",0,0, /*data*/ ),
                        "#NS" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"no","narrow","yes",0,0, /*data*/ ),
                        "#WS" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"no","wide","yes",0,0, /*data*/ ),
                        "#NDS" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"down","narrow","yes",0,0, /*data*/ ),
                        "#WDS" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"down","wide","yes",0,0, /*data*/ ),
                        "#WD" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"down","wide","no",0,0, /*data*/ ),
                        "#WU" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"up","wide","no",0,0, /*data*/ ),
                        "#WUS" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"up","wide","yes",0,0, /*data*/ ),
                        "E" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"no","wide","no",0,0, /*data*/ ),
                        "I" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"up","narrow","no",0,0, /*data*/ ),
                        "O" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"down","narrow","no",0,0, /*data*/ ),
                        "U" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"down","narrow","yes",0,0, /*data*/ ),
                        "Ä" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"no","wide","yes",0,0, /*data*/ ),
                        "Ö" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"down","wide","no",0,0, /*data*/ ),
                        "Ü" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"down","wide","yes",0,0, /*data*/ ),
                        "EU" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"up","wide","yes",0,0, /*data*/ ),
                        "AU" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"up","narrow","yes",0,0, /*data*/ ),
                        "EI" => array( /*header*/ 0,  0, 0, 0,   0,   0, 0, "", /**/ "","","","",2,0,0,0, /*++*/ 0,0,0,"up","wide","no",0,0, /*data*/ ),

                        // normal characters (used for normal text displayed as handwritten characters with same method as stenotokens inside svg 
                        // In order to avoid confusions, normal characters are preceeded by # and followed by + (upper case) or - (lower case)
                        // In bundler-notation the are placed inside [] (brackets)
                        // This is used to distinguish them from stenotokens
                        //
                        // examples:
                        // "[#A+]" <=> normal (= handwritten) upper case A (A)
                        // "[#A-]  <=> normal (= handwritten) lower case A (a)
                        
                        // numbers
                        "0" => array( /*header*/ 7,  0, /*+0.5*/0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   3.5, 1, 0, 0, 1.0, 5, 0, 0.5, /**/   6, 2.5, 0.5, 0, 1.0, 0, 0, 0.5, /**/   7, 10, 0.5, 0, 1.0, 0, 0, 0.5, /**/   6, 17.5, 0.5, 0, 1.0, 0, 0, 0.5, /**/   3.5, 19, 0.5, 0, 1.0, 0, 0, 0.5, /**/   1, 17.5, 0.5, 0, 1.0, 0, 0, 0.5, /**/   0, 10, 0.5, 0, 1.0, 0, 0, 0.5, /**/   1, 2.5, 0.5, 0, 1.0, 0, 0, 0, /**/   3.5, 1, 0, 1, 1.0, 0, 0, 0, /**/ 6, 2.5, 0, 0, 1.0, 5, 1, 0.5, /**/ /*2.5, 1, 0, 0, 1.0, 0, 1, 0.5, /**//* 2, 0.5, 0, 0, 1.0, 0, 1, 0.5, /**/ /*2.5, 0, 0, 0, 1.0, 0, 1, 0.5,*/ ),
                        "1" => array( /*header*/ 7,  0, /*+0.5*/0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,1,0, /*data*/   0, 11, 0, 0, 1.0, 5, 0, 0, /**/   7, 19, 0, 0, 1.0, 0, 0, 0, /**/   7, 1, 0, 0, 1.0, 0, 0, 0, /**/  /* 3.75, 19, 0.5, 0, 1.0, 0, 0, 0.5, /**/  /* 5, 15, 0.5, 0, 1.0, 0, 0, 0.5, /**/    ),
                        "2" => array( /*header*/ 7,  0, /*+0.5*/0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   0, 14, 0, 0, 1.0, 5, 0, 0.5, /**/   1.25, 18, 0.5, 0, 1.0, 0, 0, 0.5, /**/   3.5, 19, 0.5, 0, 1.0, 0, 0, 0.5, /**/   5.75, 18, 0.5, 0, 1.0, 0, 0, 0.5, /**/   7, 15, 0.5, 0, 1.0, 0, 0, 0, /**/   0, 1, 0, 0, 1.0, 0, 0, 0.5, /**/   7, 1, 0, 0, 1.0, 0, 0, 0, /**/   /*2.5, 5, 0.5, 0, 1.0, 0, 0, 0, /**/    /*2.5, 0, 0, 1, 1.0, 5, 0, 0, /**/  ),
                        "3" => array( /*header*/ 7,  0, /*+0.5*/0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   0, 14, 0, 0, 1.0, 5, 0, 0.5, /**/   1.25, 18, 0.5, 0, 1.0, 0, 0, 0.5, /**/   3.5, 19, 0.5, 0, 1.0, 0, 0, 0.5, /**/   5.75, 18, 0.5, 0, 1.0, 0, 0, 0.5, /**/   7, 15, 0.5, 0, 1.0, 0, 0, 0, /**/   3.5, 11, 0, 0, 1.0, 0, 0, 0.5, /**/   7, 7, 0.5, 0, 1.0, 0, 0, 0.5, /**/   6, 2.5, 0.5, 0, 1.0, 0, 0, 0, /**/    3.5, 1, 0, 1, 1.0, 0, 0, 0, /**/ 0, 5, 0, 0, 1.0, 0, 1, 0, /**/ /*2.5, 1, 0, 0, 1.0, 0, 1, 0.5, /**/ /*2, 0.5, 0, 0, 1.0, 0, 1, 0.5, /**/  ),
                        "4" => array( /*header*/ 7,  0, /*+0.5*/0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   3.5, 19, 0, 0, 1.0, 5, 0, 0, /**/   0, 11, 0, 0, 1.0, 0, 0, 0.5, /**/   7, 11, 0, 0, 1.0, 0, 0, 0, /**/   5.5, 19, 0, 0, 1.0, 5, 0, 0, /**/   5.5, 1, 0, 0, 1.0, 0, 0, 0, /**/   /*3.5, 11, 0, 0, 1.0, 0, 0, 0.5, /**/   /*7, 7, 0.5, 0, 1.0, 0, 0, 0.5, /**/     ), 
                        "5" => array( /*header*/ 7,  0, /*+0.5*/0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   7, 19, 0, 0, 1.0, 5, 0, 0, /**/   0, 19, 0, 0, 1.0, 0, 0, 0, /**/   0, 11, 0, 0, 1.0, 0, 0, 0.5, /**/   6, 10, 0.5, 0, 1.0, 0, 0, 0.5, /**/   7, 5, 0.5, 0, 1.0, 0, 0, 0.5, /**/   3.5, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/   0, 4, 0.5, 0, 1.0, 0, 0, 0, /**/   /*2.5, 5, 0.5, 0, 1.0, 0, 0, 0, /**/     ),
                        "6" => array( /*header*/ 7,  0, /*+0.5*/0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   7, 19, 0, 0, 1.0, 5, 0, 0.5, /**/   1, 11, 0.5, 0, 1.0, 0, 0, 0.5, /**/   0, 5, 0.5, 0, 1.0, 0, 0, 0.5, /**/   1.5, 2, 0.5, 0, 1.0, 0, 0, 0.5, /**/   3.5, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/   6, 2, 0.5, 0, 1.0, 0, 0, 0.5, /**/   7, 5, 0.5, 0, 1.0, 0, 0, 0.5, /**/   /*6, 7, 0.5, 0, 1.0, 0, 0, 0.5, /**/    3.5, 10, 0.5, 1, 1.0, 0, 0, 0.5, /**/ 0, 5, 0.5, 0, 1.0, 0, 1, 0.5, /**/ /*2.5, 1, 0, 0, 1.0, 0, 1, 0.5, /**/ /*2, 0.5, 0, 0, 1.0, 0, 1, 0.5, /**/  ),
                        "7" => array( /*header*/ 7,  0, /*+0.5*/0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   0, 19, 0, 0, 1.0, 5, 0, 0, /**/   7, 19, 0, 0, 1.0, 0, 0, 0, /**/   3, 1, 0, 0, 1.0, 0, 0, 0, /**/   3.5, 11, 0, 0, 1.0, 5, 0, 0, /**/   6.5, 11, 0, 0, 1.0, 0, 0, 0, /**/   /*5, 13, 0.5, 0, 1.0, 0, 0, 0.5, /**/    ),
                        "8" => array( /*header*/ 7,  0, /*+0.5*/0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   3.5, 11, 0, 0, 1.0, 5, 0, 0.5, /**/   7, 15, 0.5, 0, 1.0, 0, 0, 0.5, /**/   3.5, 19, 0.5, 0, 1.0, 0, 0, 0.5, /**/   0, 15, 0.5, 0, 1.0, 0, 0, 0.5, /**/   3.5, 11, 0.5, 0, 1.0, 0, 0, 0.5, /**/   7, 6, 0.5, 0, 1.0, 0, 0, 0.5, /**/   3.5, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/   0, 6, 0.5, 0, 1.0, 0, 0, 0, /**/    3.5, 11, 0, 1, 1.0, 0, 0, 0, /**/ /*3, 0.5, 0, 0, 1.0, 0, 1, 0.5, /**/  ),
                        "9" => array( /*header*/ 7,  0, /*+0.5*/0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   7, 14, 0, 0, 1.0, 5, 0, 0.5, /**/   3.5, 10, 0.5, 0, 1.0, 0, 0, 0.5, /**/   0, 15, 0.5, 0, 1.0, 0, 0, 0.5, /**/   3.5, 19, 0.5, 0, 1.0, 0, 0, 0.5, /**/   7, 15, 0.5, 0, 1.0, 0, 0, 0.5, /**/   6, 6, 0.5, 0, 1.0, 0, 0, 0.5, /**/   /*3.5, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/   3.5, 1, 0.5, 0, 1.0, 0, 0, 0, /**/     ),
                        
                        //"" => array( /*header*/ 7,  0,       0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   x, y, 0, 1, 1.0, 5, 0, 0.5, /**/   x, y, t1, 0, 1.0, 0, 0, t2, /**/ ),
                        "#A+" => array( /*header*/ 7,  0,       0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   0, 0, 0, 1, 1.0, 5, 0, 0, /**/   3.5, 19, 0, 0, 1.0, 0, 0, 0, /**/ 7, 0, 0, 0, 1.0, 0, 0, 0, /**/ 1.75, 9.5, 0, 0, 1.0, 5, 0, 0, /**/ 5.25, 9.5, 0, 0, 1.0, 0, 1, 0, /**/ ),
                        "#A-" => array( /*header*/ 7,  0,       0, 0,   4,   0, 0, ""/**/,"","","","",0,0,0,0, /*++*/ 0,0,1,0,0,0,0,0, /*data*/   5.25, 9, 0, 1, 1.0, 5, 0, 0.5, /**/   4.5, 9.5, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 0.5, 3.75, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 0.5, 1, 0.5, 0, 1.0, 0, 0, 0.5, /**/ 1.5, 0, 0.5, 0, 1.0, 0, 0, 0, /**/ 5.25, 9, 0, 0, 1.0, 0, 0, 0.5, /**/ 5.25, 1, 0.5, 0, 1.0, 0, 0, 0, /**/ 6, 0, 0, 0, 1.0, 0, 1, 0, /**/),
                        
                    );


// combiner table: defines which tokens can be combined with other ones
// is used by CreateCombinedTokens and TokenCombiner to create those tokens and add them to $steno_tokens_master
// the name of the resulting token will allways be: key + value (e.g. "T" + "@R" will be "T@R")
$combiner_table = array(
    //array("T15", "B"),  // test
    //array("^1", "B"),  // test
    array("D", "@R", 0, 0),
    array("ND", "@R", 0, 0),
    array("T", "@R", 0, 0),
    array("G", "@R", 0, 0),
    array("K", "@R", 0, 0),
    array("CH", "@R", 0, 0),
    array("NK", "@R", 0, 0),
    array("SCH", "@R", 0, 0),
    array("ST", "@R", 0, 0),
    array("L", "@L", 0, 0),
    array("B", "@L", 0, 0),
    array("G", "@L3", 0, 0),
    array("M", "@L", 0, 0),
    array("F", "@L", 0, 0),
    array("P", "@L", 0, 0),
    array("PF", "@L", 0, 0),
    array("V", "@L", 0, 0),
    array("SP", "@L", 0, 0),
    array("W", "@L", 0, 0),
    array("T", "@L3", 0, 0),
    array("NG", "@L3", 0, 0),
    array("D", "@L3", 0, 0),
    array("ND", "@L3", 0, 0),
    array("ST", "@L3", 0, 0),
    array("NK", "@L3", 0, 0),
    array("K", "@L3", 0, 0),
    array("Z", "@L3", 0, 0),
    array("SCH", "@L3", 0, 0),
    array("CH", "@L3", 0, 0),
    array("B", "@R6", 0, 0),
    array("SP", "@R6", 0, 0),
    array("F", "@R6", 0, 0),
    array("M", "@R6", 0, 0),
    array("P", "@R6", 0, 0),
    array("PF", "@R6", 0, 0),
    array("V", "@R6", 0, 0),
    array("W", "@R6", 0, 0),
    array("Z", "@R", 0, 0),
    array("Z", "@L3", 0, 0),
    array("DA", "@R", 0, 0),
    array("N", "@R6", 0, 0),
    array("N", "@L", 0, 0),
    array("VR", "@L", 0, 0.5),  // should be obsolete with following line => not necessary: implement deltay for tokencombiner
    //array("/VR", "@L"), // unnecessary, if tokencombiner offers possibility to add deltay like tokenshifter => implement that
    array("CK", "@L", 0, 0),
    array("L", "@R6", 0, 0),
    array("TT", "@R", 0, 0), // "Wettrennen" apparently written with that token combination - even if it's completely illogical! (same for "erfolgreich": "Rennen" y "reich" are separate words 
                             // that can clearly be recognized 
                             // as such and should therefore be written without combinations ttr and gr ... I'm sure some shorthand aficionado will explain me that this has its (own) logic ... 
                             // from a strictly formal point of view: it is NOT logical at all! (And I'd even say that there is a point, where all logics come to an end ... ;-)
);

$shifter_table = array(
    
    // "dem" at the beginning of words (e.g. demnach) needs higher position => use shifter for that
    array("DEM", "^DEM", 0, 5, 0, 0 ),      // ^DEM = dem 1/2 line up
    array("DEN", "^DEN", 0, 5, 0, 0 ),      // ^DEN = den 1/2 line up
    array("DEM", "^^DEM", 0, 10, 0, 0 ),    // ^DEN = den 1 line up
    array("DEN", "^^DEN", 0, 10, 0, 0 ),    // ^DEN = den 1 line up
    
    // special treatment: for -tes y -eites shift abbreviation "sein" (works like a charm ... :-), just had to fiddle arround a bit with the distances ... ;-)
    array("SEIN", "&EITES", 13, 10, 0, 1),  
    array("SEIN", "&TES", 2, 10, 0, 1),  
    
    // &T mit einstufigen Zeichen
    array("B", "&TB", 4, 10, 0, 1),
    array("NG", "&TNG", 4, 10, 0, 1),
    array("NS", "&TNS", 4, 10, 0, 1),
    array("C", "&TC", 4, 10, 0, 1),
    array("D", "&TD", 4, 10, 0, 1),
    array("G", "&TG", 4, 10, 0, 1),
    array("H", "&TH", 4, 10, 0, 1),
    array("J", "&TJ", 4, 10, 0, 1),
    array("L", "&TL", 4, 10, 0, 1),
    array("@L3", "&T@L3", 4, 16.5, 0, 1.5),
    array("ALL", "&TALL", 4, 10, 0, 1),
    array("M", "&TM", 4, 10, 0, 1),
    array("W", "&TW", 4, 10, 0, 1),
    array("X", "&TX", 4, 10, 0, 1),
    array("Y", "&TY", 4, 10, 0, 1),
    // &T mit halbstufigen Zeichen
    array("&E", "&T&E", 4, 15, 0, 1.5),
    array("SCHAFT", "&TSCHAFT", 4, 15, 0, 1.5),
    array("ION", "&TION", 4, 10, 0, 1),
    
    //array("", "&T", 4, 10, 0, 1.5), // I
    array("N", "&TN", 4, 15, 0, 1.5),
    array("VR", "&TVR", 4, 15, 0, 1.5),
    array("AR5", "&TAR5", 4, 15, 0, 1.5),
    array("S", "&TS", 4, 15, 0, 1.5),
    //array("", "&T", 4, 10, 0, 1.5), // tes
    array("&U", "&T&U", 4, 15, 0, 1.5),
    array("&O", "&T&O", 4, 15, 0, 1.5),
    array("&I", "&T&I", 4, 15, 0, 1.5),
    
    // &T mit zweistufigen Zeichen
    array("CH", "&TCH", 4, 20, 0, 1),
    array("SCH", "&T^SCH", 4, 20, 0, 1),
    array("^Z", "&T^Z", 4, 20, 0, 1),
    array("^CH", "&T^CH", 4, 20, 0, 1),
    array("^SCH", "&T^SCH", 4, 20, 0, 1),
    array("Z", "&TZ", 4, 20, 0, 1),
    array("F@L", "&TF@L", 4, 10, 0, 1),
    array("F", "&TF", 4, 10, 0, 1),
    array("HAFT", "&THAFT", 4, 10, 0, 1),
    array("K", "&TK", 4, 20, 0, 1),
    array("P", "&TP", 4, 20, 0, 1),
    array("Q", "&TQ", 4, 20, 0, 1),
    array("V", "&TV", 4, 20, 0, 1),
    array("NK", "&TK", 4, 20, 0, 1),
    array("PF", "&TPF", 4, 20, 0, 1),
    array("SP", "&TSP", 4, 20, 0, 1),
    array("ST", "&TST", 4, 10, 0, 1),
    
    // &T mit dreistufigen Zeichen
    array("SCHW", "&TSCHW", 4, 30, 0, 1),
    array("ZW", "&TZW", 4, 30, 0, 1),
    //array("FF", "&TFF", 4, 30, 0, 1),
    //array("PP", "&TPP", 4, 30, 0, 1),
    //array("CK", "&TCK", 4, 30, 0, 1),
    
    // ********************************
    // idem {EIT}
    // &EIT mit einstufigen Zeichen
    array("B", "&EITB", 18, 10, 0, 1),
    array("NG", "&EITNG", 18, 10, 0, 1),
    array("NS", "&EITNS", 18, 10, 0, 1),
    array("C", "&EITC", 18, 10, 0, 1),
    array("D", "&EITD", 18, 10, 0, 1),
    array("G", "&EITG", 18, 10, 0, 1),
    array("H", "&EITH", 18, 10, 0, 1),
    array("J", "&EITJ", 18, 10, 0, 1),
    array("L", "&EITL", 18, 10, 0, 1),
    array("@L3", "&EIT@L3", 18, 10, 0, 1),
    array("ALL", "&EITALL", 18, 10, 0, 1),
    array("M", "&EITM", 18, 10, 0, 1),
    array("W", "&EITW", 18, 10, 0, 1),
    array("X", "&EITX", 18, 10, 0, 1),
    array("Y", "&EITY", 18, 10, 0, 1),
    // &EIT mit halbstufigen Zeichen
    array("&E", "&EIT&E", 18, 15, 0, 1.5),
    array("SCHAFT", "&EITSCHAFT", 18, 15, 0, 1.5),
    
    //array("", "&T", 4, 10, 0, 1.5), // I
    array("N", "&EITN", 18, 15, 0, 1.5),
    array("VR", "&EITVR", 18, 15, 0, 1.5),
    array("S", "&EITS", 18, 15, 0, 1.5),
    //array("", "&T", 4, 10, 0, 1.5), // tes
    array("U", "&EITU", 18, 15, 0, 1.5),
    array("&O", "&EIT&O", 18, 15, 0, 1.5),
    // &EIT mit zweistufigen Zeichen
    array("CH", "&EITCH", 18, 20, 0, 1),
    array("SCH", "&EITSCH", 18, 20, 0, 2),
    array("Z", "&EITZ", 18, 20, 0, 1),
    array("^Z", "&EIT^Z", 4, 20, 0, 1),
    array("^CH", "&EIT^CH", 4, 20, 0, 1),
    array("^SCH", "&EIT^SCH", 4, 20, 0, 1),
    
    array("F", "&EITF", 18, 10, 0, 1),
    array("K", "&EITK", 18, 20, 0, 1),
    array("P", "&EITP", 18, 20, 0, 1),
    array("Q", "&EITQ", 18, 20, 0, 1),
    array("V", "&EITV", 18, 20, 0, 1),
    array("NK", "&EITK", 18, 20, 0, 1),
    array("PF", "&EITPF", 18, 20, 0, 1),
    array("SP", "&EITSP", 18, 20, 0, 1),
    array("ST", "&EITST", 18, 10, 0, 1),
    
    // &EIT mit dreistufigen Zeichen
    array("SCHW", "&EITSCHW", 18, 30, 0, 1),
    array("ZW", "&EITZW", 18, 30, 0, 1),
    //array("FF", "&TFF", 4, 30, 0, 1),
    //array("PP", "&TPP", 4, 30, 0, 1),
    //array("CK", "&TCK", 4, 30, 0, 1),
);

// main
// main

/*
require_once "vsteno_fullpage_template_top.php";
*/
$text_to_parse = LoadModelFromDatabase("99999_default");
/*

echo "Importiert: <textarea id='Model_as_text' name='Model_as_text' rows='30' cols='230'>" . htmlspecialchars($text_to_parse) . "</textarea><br>";
*/
$test = ImportModelFromText($text_to_parse);
/*
//echo var_dump($font);
$entry = "WAS";
$element1 = $font["$insertion_key"]["$entry"][0];
$element2 = $font["$insertion_key"]["$entry"][1];
$element3 = $font["$insertion_key"]["$entry"][2];
$element4 = $font["$insertion_key"]["$entry"][3];
$element5 = $font["$insertion_key"]["$entry"][4];
$element6 = $font["$insertion_key"]["$entry"][5];

echo "Base $entry: { $element1, $element2, $element3, $element4, $element5, $element6, ... }<br>";

$entry = "VR";
$element1 = $combiner["$insertion_key"]["$entry"][0];
$element2 = $combiner["$insertion_key"]["$entry"][1];
$element3 = $combiner["$insertion_key"]["$entry"][2];

echo "Combiner $entry: { $element1, $element2, $element3 }<br>";

$entry = "NG";
$element1 = $shifter["$insertion_key"]["$entry"][0];
$element2 = $shifter["$insertion_key"]["$entry"][1];
$element3 = $shifter["$insertion_key"]["$entry"][2];
$element4 = $shifter["$insertion_key"]["$entry"][3];
$element5 = $shifter["$insertion_key"]["$entry"][4];

echo "Shifter $entry: { $element1, $element2, $element3, $element4, $element5 }<br>";


//echo var_dump($rules);
$i = 0;
foreach ($rules["$insertion_key"] as $single_rule) {
    $element1 = htmlspecialchars($single_rule[0]);
    $element2 = htmlspecialchars($single_rule[1]);
    switch ($element1) {
        case "BeginFunction()" : 
            echo "Rules $i: BeginFunction(";
            $length = count($single_rule);
            for ($n=1; $n<$length-1; $n++) {
                echo $single_rule[$n] . ",";
            }
            echo $single_rule[$length-1] . ")<br>";
            break;
        case "EndFunction()" : 
            echo "Rules $i: EndFunction(";
            $length = count($single_rule);
            for ($n=1; $n<$length-1; $n++) {
                echo $single_rule[$n] . ",";
            }
            echo $single_rule[$length-1] . ")<br>";
            break;
        default :
            if (isset($single_rule[2])) {
                $element3 = htmlspecialchars($single_rule[2]);
                echo "Rules $i: #$element1# => #$element2#, #$element3#<br>";
            } elseif (!isset($single_rule[1])) {
                echo "Rules $i: =====> $element1<br>";
            } else echo "Rules $i: #$element1# => #$element2#<br>";
    }
    $i++;
}

echo "<br><br>FUNCTIONS:<br><br>";
foreach ($functions_table["$insertion_key"] as $function => $values) {
    $start = $values[0];
    $end = $values[1];
    $bre = $values[2];
    $brne = $values[3];
    $store = $values[4];
    $trans = $values[5];
    
    echo "$function($start,$end,$bre,$brne,$store,$trans)<br>";
}
echo "<br><br>";

//$element1 = htmlspecialchars($rules["$insertion_key"][$rule_number][0]);
//$element2 = htmlspecialchars($rules["$insertion_key"][$rule_number][1]);

// test parser
$test_word = "beßer";
//$test_word = "jedem";
$test_word = "Beizeit";
$test_word = "Spendenaufruf";

$result = MetaParser( $test_word );
echo "test_word: #$test_word# result: #$result#<br><br>";

require_once "vsteno_fullpage_template_bottom.php";
*/

?>